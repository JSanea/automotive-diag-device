
ATM_Diag_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8c4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800ba94  0800ba94  0000ca94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb4c  0800bb4c  0000d160  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb4c  0800bb4c  0000cb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb54  0800bb54  0000d160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb54  0800bb54  0000cb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb58  0800bb58  0000cb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  0800bb5c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005844  20000160  0800bcbc  0000d160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200059a4  0800bcbc  0000d9a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d160  2**0
                  CONTENTS, READONLY
 12 .debug_info   000221ec  00000000  00000000  0000d190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005485  00000000  00000000  0002f37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba8  00000000  00000000  00034808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001505  00000000  00000000  000363b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000071ab  00000000  00000000  000378b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002193f  00000000  00000000  0003ea60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfed6  00000000  00000000  0006039f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140275  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075a4  00000000  00000000  001402b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0014785c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000160 	.word	0x20000160
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ba7c 	.word	0x0800ba7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000164 	.word	0x20000164
 800020c:	0800ba7c 	.word	0x0800ba7c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_CAN_TxMailbox0CompleteCallback>:

static void CAN_TxMailBoxCompleteCallback(CAN_HandleTypeDef *hcan);


void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	CAN_TxMailBoxCompleteCallback(hcan);
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 f85f 	bl	80005cc <CAN_TxMailBoxCompleteCallback>
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
	CAN_TxMailBoxCompleteCallback(hcan);
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f000 f854 	bl	80005cc <CAN_TxMailBoxCompleteCallback>
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	CAN_TxMailBoxCompleteCallback(hcan);
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f000 f849 	bl	80005cc <CAN_TxMailBoxCompleteCallback>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08e      	sub	sp, #56	@ 0x38
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef header;
    uint8_t data[CAN_DATA_SIZE];
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800054c:	2300      	movs	r3, #0
 800054e:	613b      	str	r3, [r7, #16]

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &header, data) != HAL_OK)
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	f107 021c 	add.w	r2, r7, #28
 8000558:	2100      	movs	r1, #0
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f000 fe5c 	bl	8001218 <HAL_CAN_GetRxMessage>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d126      	bne.n	80005b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
        return;

    if (header.IDE != CAN_ID_STD || header.RTR != CAN_RTR_DATA)
 8000566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000568:	2b00      	cmp	r3, #0
 800056a:	d125      	bne.n	80005b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 800056c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800056e:	2b00      	cmp	r3, #0
 8000570:	d122      	bne.n	80005b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
        return;

    /* Prepare CAN message */
    CAN_RxMessage_t msg;
    msg.header = &header;
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	60bb      	str	r3, [r7, #8]
    msg.data = data;
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	60fb      	str	r3, [r7, #12]

    /* Add CAN message to Rx Buffer */
    rxBuffer.cbuff.Add(&rxBuffer, &msg);
 800057e:	4b10      	ldr	r3, [pc, #64]	@ (80005c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	f107 0208 	add.w	r2, r7, #8
 8000586:	4611      	mov	r1, r2
 8000588:	480d      	ldr	r0, [pc, #52]	@ (80005c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800058a:	4798      	blx	r3

	/* Notify the task */
	vTaskNotifyGiveFromISR(canRxTaskHandle, &xHigherPriorityTaskWoken);
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f107 0210 	add.w	r2, r7, #16
 8000594:	4611      	mov	r1, r2
 8000596:	4618      	mov	r0, r3
 8000598:	f009 fb9c 	bl	8009cd4 <vTaskNotifyGiveFromISR>

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d00b      	beq.n	80005ba <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
 80005a2:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80005a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	f3bf 8f4f 	dsb	sy
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	e002      	b.n	80005ba <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
        return;
 80005b4:	bf00      	nop
 80005b6:	e000      	b.n	80005ba <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
        return;
 80005b8:	bf00      	nop

}
 80005ba:	3738      	adds	r7, #56	@ 0x38
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000184 	.word	0x20000184
 80005c4:	20000180 	.word	0x20000180
 80005c8:	e000ed04 	.word	0xe000ed04

080005cc <CAN_TxMailBoxCompleteCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 */

static void CAN_TxMailBoxCompleteCallback(CAN_HandleTypeDef *hcan)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	(void)hcan;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]

	/* Notify the task */
	vTaskNotifyGiveFromISR(canTxTaskHandle, &xHigherPriorityTaskWoken);
 80005d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <CAN_TxMailBoxCompleteCallback+0x3c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f107 020c 	add.w	r2, r7, #12
 80005e0:	4611      	mov	r1, r2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f009 fb76 	bl	8009cd4 <vTaskNotifyGiveFromISR>

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d007      	beq.n	80005fe <CAN_TxMailBoxCompleteCallback+0x32>
 80005ee:	4b07      	ldr	r3, [pc, #28]	@ (800060c <CAN_TxMailBoxCompleteCallback+0x40>)
 80005f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	f3bf 8f4f 	dsb	sy
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000017c 	.word	0x2000017c
 800060c:	e000ed04 	.word	0xe000ed04

08000610 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000616:	4b2e      	ldr	r3, [pc, #184]	@ (80006d0 <MX_CAN1_Init+0xc0>)
 8000618:	4a2e      	ldr	r2, [pc, #184]	@ (80006d4 <MX_CAN1_Init+0xc4>)
 800061a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <MX_CAN1_Init+0xc0>)
 800061e:	2206      	movs	r2, #6
 8000620:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000622:	4b2b      	ldr	r3, [pc, #172]	@ (80006d0 <MX_CAN1_Init+0xc0>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000628:	4b29      	ldr	r3, [pc, #164]	@ (80006d0 <MX_CAN1_Init+0xc0>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 800062e:	4b28      	ldr	r3, [pc, #160]	@ (80006d0 <MX_CAN1_Init+0xc0>)
 8000630:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000634:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000636:	4b26      	ldr	r3, [pc, #152]	@ (80006d0 <MX_CAN1_Init+0xc0>)
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800063c:	4b24      	ldr	r3, [pc, #144]	@ (80006d0 <MX_CAN1_Init+0xc0>)
 800063e:	2200      	movs	r2, #0
 8000640:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000642:	4b23      	ldr	r3, [pc, #140]	@ (80006d0 <MX_CAN1_Init+0xc0>)
 8000644:	2200      	movs	r2, #0
 8000646:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000648:	4b21      	ldr	r3, [pc, #132]	@ (80006d0 <MX_CAN1_Init+0xc0>)
 800064a:	2200      	movs	r2, #0
 800064c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800064e:	4b20      	ldr	r3, [pc, #128]	@ (80006d0 <MX_CAN1_Init+0xc0>)
 8000650:	2201      	movs	r2, #1
 8000652:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000654:	4b1e      	ldr	r3, [pc, #120]	@ (80006d0 <MX_CAN1_Init+0xc0>)
 8000656:	2200      	movs	r2, #0
 8000658:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800065a:	4b1d      	ldr	r3, [pc, #116]	@ (80006d0 <MX_CAN1_Init+0xc0>)
 800065c:	2200      	movs	r2, #0
 800065e:	775a      	strb	r2, [r3, #29]

  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000660:	481b      	ldr	r0, [pc, #108]	@ (80006d0 <MX_CAN1_Init+0xc0>)
 8000662:	f000 fbbb 	bl	8000ddc <HAL_CAN_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800066c:	f000 f9ab 	bl	80009c6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  // Configure filters
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterBank = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000678:	2301      	movs	r3, #1
 800067a:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000694:	230e      	movs	r3, #14
 8000696:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK
 8000698:	463b      	mov	r3, r7
 800069a:	4619      	mov	r1, r3
 800069c:	480c      	ldr	r0, [pc, #48]	@ (80006d0 <MX_CAN1_Init+0xc0>)
 800069e:	f000 fc99 	bl	8000fd4 <HAL_CAN_ConfigFilter>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d10c      	bne.n	80006c2 <MX_CAN1_Init+0xb2>
	  || HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK
 80006a8:	2103      	movs	r1, #3
 80006aa:	4809      	ldr	r0, [pc, #36]	@ (80006d0 <MX_CAN1_Init+0xc0>)
 80006ac:	f000 fed6 	bl	800145c <HAL_CAN_ActivateNotification>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d105      	bne.n	80006c2 <MX_CAN1_Init+0xb2>
	  || HAL_CAN_Start(&hcan1) != HAL_OK)
 80006b6:	4806      	ldr	r0, [pc, #24]	@ (80006d0 <MX_CAN1_Init+0xc0>)
 80006b8:	f000 fd6a 	bl	8001190 <HAL_CAN_Start>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_CAN1_Init+0xb6>
  {
      Error_Handler();
 80006c2:	f000 f980 	bl	80009c6 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	3728      	adds	r7, #40	@ 0x28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200001a0 	.word	0x200001a0
 80006d4:	40006400 	.word	0x40006400

080006d8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	@ 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a21      	ldr	r2, [pc, #132]	@ (800077c <HAL_CAN_MspInit+0xa4>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d13c      	bne.n	8000774 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <HAL_CAN_MspInit+0xa8>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000702:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <HAL_CAN_MspInit+0xa8>)
 8000704:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000708:	6413      	str	r3, [r2, #64]	@ 0x40
 800070a:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <HAL_CAN_MspInit+0xa8>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <HAL_CAN_MspInit+0xa8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a18      	ldr	r2, [pc, #96]	@ (8000780 <HAL_CAN_MspInit+0xa8>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <HAL_CAN_MspInit+0xa8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000732:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000744:	2309      	movs	r3, #9
 8000746:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	480d      	ldr	r0, [pc, #52]	@ (8000784 <HAL_CAN_MspInit+0xac>)
 8000750:	f001 f99e 	bl	8001a90 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 7, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2107      	movs	r1, #7
 8000758:	2013      	movs	r0, #19
 800075a:	f001 f96f 	bl	8001a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800075e:	2013      	movs	r0, #19
 8000760:	f001 f988 	bl	8001a74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2106      	movs	r1, #6
 8000768:	2014      	movs	r0, #20
 800076a:	f001 f967 	bl	8001a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800076e:	2014      	movs	r0, #20
 8000770:	f001 f980 	bl	8001a74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000774:	bf00      	nop
 8000776:	3728      	adds	r7, #40	@ 0x28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40006400 	.word	0x40006400
 8000780:	40023800 	.word	0x40023800
 8000784:	40020400 	.word	0x40020400

08000788 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800078e:	4a0a      	ldr	r2, [pc, #40]	@ (80007b8 <MX_FREERTOS_Init+0x30>)
 8000790:	2100      	movs	r1, #0
 8000792:	480a      	ldr	r0, [pc, #40]	@ (80007bc <MX_FREERTOS_Init+0x34>)
 8000794:	f007 fd28 	bl	80081e8 <osThreadNew>
 8000798:	4603      	mov	r3, r0
 800079a:	4a09      	ldr	r2, [pc, #36]	@ (80007c0 <MX_FREERTOS_Init+0x38>)
 800079c:	6013      	str	r3, [r2, #0]
  xTaskCreate(Task_Prepare_Request, "PrepareRequest", 64, NULL, osPriorityHigh7, NULL);
 800079e:	2300      	movs	r3, #0
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	232f      	movs	r3, #47	@ 0x2f
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2300      	movs	r3, #0
 80007a8:	2240      	movs	r2, #64	@ 0x40
 80007aa:	4906      	ldr	r1, [pc, #24]	@ (80007c4 <MX_FREERTOS_Init+0x3c>)
 80007ac:	4806      	ldr	r0, [pc, #24]	@ (80007c8 <MX_FREERTOS_Init+0x40>)
 80007ae:	f008 fc0b 	bl	8008fc8 <xTaskCreate>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	0800bb10 	.word	0x0800bb10
 80007bc:	080007cd 	.word	0x080007cd
 80007c0:	200001c8 	.word	0x200001c8
 80007c4:	0800baa0 	.word	0x0800baa0
 80007c8:	080007e1 	.word	0x080007e1

080007cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80007d4:	f00a fb00 	bl	800add8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80007d8:	2064      	movs	r0, #100	@ 0x64
 80007da:	f007 fd97 	bl	800830c <osDelay>
 80007de:	e7fb      	b.n	80007d8 <StartDefaultTask+0xc>

080007e0 <Task_Prepare_Request>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void Task_Prepare_Request(void* arg){
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	// wait notify from USB ISR
	// receive USB data and prepare CAN msg with data from USB
	// add CAN msg to Tx CAN Buffer
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <MX_GPIO_Init+0xac>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a23      	ldr	r2, [pc, #140]	@ (80008a0 <MX_GPIO_Init+0xac>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <MX_GPIO_Init+0xac>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <MX_GPIO_Init+0xac>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a1c      	ldr	r2, [pc, #112]	@ (80008a0 <MX_GPIO_Init+0xac>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b1a      	ldr	r3, [pc, #104]	@ (80008a0 <MX_GPIO_Init+0xac>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <MX_GPIO_Init+0xac>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a15      	ldr	r2, [pc, #84]	@ (80008a0 <MX_GPIO_Init+0xac>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <MX_GPIO_Init+0xac>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_GPIO_Init+0xac>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a0e      	ldr	r2, [pc, #56]	@ (80008a0 <MX_GPIO_Init+0xac>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_GPIO_Init+0xac>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000880:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <MX_GPIO_Init+0xb0>)
 8000892:	f001 f8fd 	bl	8001a90 <HAL_GPIO_Init>

}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020800 	.word	0x40020800

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ac:	f000 fa30 	bl	8000d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b0:	f000 f80e 	bl	80008d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemCoreClockUpdate();
 80008b4:	f000 f98c 	bl	8000bd0 <SystemCoreClockUpdate>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b8:	f7ff ff9c 	bl	80007f4 <MX_GPIO_Init>
  MX_CAN1_Init();
 80008bc:	f7ff fea8 	bl	8000610 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008c0:	f007 fc48 	bl	8008154 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80008c4:	f7ff ff60 	bl	8000788 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80008c8:	f007 fc68 	bl	800819c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <main+0x24>

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	@ 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	2234      	movs	r2, #52	@ 0x34
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f00a ffe4 	bl	800b8ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	4b29      	ldr	r3, [pc, #164]	@ (80009a0 <SystemClock_Config+0xd0>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	4a28      	ldr	r2, [pc, #160]	@ (80009a0 <SystemClock_Config+0xd0>)
 80008fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000902:	6413      	str	r3, [r2, #64]	@ 0x40
 8000904:	4b26      	ldr	r3, [pc, #152]	@ (80009a0 <SystemClock_Config+0xd0>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000910:	2300      	movs	r3, #0
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	4b23      	ldr	r3, [pc, #140]	@ (80009a4 <SystemClock_Config+0xd4>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800091c:	4a21      	ldr	r2, [pc, #132]	@ (80009a4 <SystemClock_Config+0xd4>)
 800091e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	4b1f      	ldr	r3, [pc, #124]	@ (80009a4 <SystemClock_Config+0xd4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000930:	2301      	movs	r3, #1
 8000932:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000934:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000938:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093a:	2302      	movs	r3, #2
 800093c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000942:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000944:	2304      	movs	r3, #4
 8000946:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000948:	2348      	movs	r3, #72	@ 0x48
 800094a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800094c:	2302      	movs	r3, #2
 800094e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000950:	2303      	movs	r3, #3
 8000952:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000954:	2302      	movs	r3, #2
 8000956:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4618      	mov	r0, r3
 800095e:	f003 fb5b 	bl	8004018 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000968:	f000 f82d 	bl	80009c6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2302      	movs	r3, #2
 8000972:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	2102      	movs	r1, #2
 8000988:	4618      	mov	r0, r3
 800098a:	f002 fcb3 	bl	80032f4 <HAL_RCC_ClockConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000994:	f000 f817 	bl	80009c6 <Error_Handler>
  }
}
 8000998:	bf00      	nop
 800099a:	3750      	adds	r7, #80	@ 0x50
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40007000 	.word	0x40007000

080009a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009b8:	d101      	bne.n	80009be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ba:	f000 f9cb 	bl	8000d54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ca:	b672      	cpsid	i
}
 80009cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ce:	bf00      	nop
 80009d0:	e7fd      	b.n	80009ce <Error_Handler+0x8>
	...

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <HAL_MspInit+0x54>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	4a11      	ldr	r2, [pc, #68]	@ (8000a28 <HAL_MspInit+0x54>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <HAL_MspInit+0x54>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <HAL_MspInit+0x54>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <HAL_MspInit+0x54>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a06:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <HAL_MspInit+0x54>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	210f      	movs	r1, #15
 8000a16:	f06f 0001 	mvn.w	r0, #1
 8000a1a:	f001 f80f 	bl	8001a3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08e      	sub	sp, #56	@ 0x38
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	4b34      	ldr	r3, [pc, #208]	@ (8000b14 <HAL_InitTick+0xe8>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a44:	4a33      	ldr	r2, [pc, #204]	@ (8000b14 <HAL_InitTick+0xe8>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4c:	4b31      	ldr	r3, [pc, #196]	@ (8000b14 <HAL_InitTick+0xe8>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a58:	f107 0210 	add.w	r2, r7, #16
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4611      	mov	r1, r2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 fd4c 	bl	8003500 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a68:	6a3b      	ldr	r3, [r7, #32]
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d103      	bne.n	8000a7a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a72:	f002 fd31 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8000a76:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a78:	e004      	b.n	8000a84 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a7a:	f002 fd2d 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a86:	4a24      	ldr	r2, [pc, #144]	@ (8000b18 <HAL_InitTick+0xec>)
 8000a88:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8c:	0c9b      	lsrs	r3, r3, #18
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000a92:	4b22      	ldr	r3, [pc, #136]	@ (8000b1c <HAL_InitTick+0xf0>)
 8000a94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000a9a:	4b20      	ldr	r3, [pc, #128]	@ (8000b1c <HAL_InitTick+0xf0>)
 8000a9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000aa0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b1c <HAL_InitTick+0xf0>)
 8000aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aa6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <HAL_InitTick+0xf0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b1b      	ldr	r3, [pc, #108]	@ (8000b1c <HAL_InitTick+0xf0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab4:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <HAL_InitTick+0xf0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000aba:	4818      	ldr	r0, [pc, #96]	@ (8000b1c <HAL_InitTick+0xf0>)
 8000abc:	f003 fd4a 	bl	8004554 <HAL_TIM_Base_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ac6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d11b      	bne.n	8000b06 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000ace:	4813      	ldr	r0, [pc, #76]	@ (8000b1c <HAL_InitTick+0xf0>)
 8000ad0:	f003 fd9a 	bl	8004608 <HAL_TIM_Base_Start_IT>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ada:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d111      	bne.n	8000b06 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ae2:	201c      	movs	r0, #28
 8000ae4:	f000 ffc6 	bl	8001a74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b0f      	cmp	r3, #15
 8000aec:	d808      	bhi.n	8000b00 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000aee:	2200      	movs	r2, #0
 8000af0:	6879      	ldr	r1, [r7, #4]
 8000af2:	201c      	movs	r0, #28
 8000af4:	f000 ffa2 	bl	8001a3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af8:	4a09      	ldr	r2, [pc, #36]	@ (8000b20 <HAL_InitTick+0xf4>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
 8000afe:	e002      	b.n	8000b06 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b06:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3738      	adds	r7, #56	@ 0x38
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	431bde83 	.word	0x431bde83
 8000b1c:	200001cc 	.word	0x200001cc
 8000b20:	20000004 	.word	0x20000004

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <NMI_Handler+0x4>

08000b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
	...

08000b5c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <CAN1_TX_IRQHandler+0x10>)
 8000b62:	f000 fca1 	bl	80014a8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200001a0 	.word	0x200001a0

08000b70 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b74:	4802      	ldr	r0, [pc, #8]	@ (8000b80 <CAN1_RX0_IRQHandler+0x10>)
 8000b76:	f000 fc97 	bl	80014a8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200001a0 	.word	0x200001a0

08000b84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <TIM2_IRQHandler+0x10>)
 8000b8a:	f003 fdad 	bl	80046e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200001cc 	.word	0x200001cc

08000b98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b9c:	4802      	ldr	r0, [pc, #8]	@ (8000ba8 <OTG_FS_IRQHandler+0x10>)
 8000b9e:	f001 fa56 	bl	800204e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20005160 	.word	0x20005160

08000bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <SystemInit+0x20>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bb6:	4a05      	ldr	r2, [pc, #20]	@ (8000bcc <SystemInit+0x20>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	af00      	add	r7, sp, #0
  uint32_t tmp, pllvco, pllp, pllsource, pllm;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000bd6:	4b34      	ldr	r3, [pc, #208]	@ (8000ca8 <SystemCoreClockUpdate+0xd8>)
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f003 030c 	and.w	r3, r3, #12
 8000bde:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	2b08      	cmp	r3, #8
 8000be4:	d011      	beq.n	8000c0a <SystemCoreClockUpdate+0x3a>
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	2b08      	cmp	r3, #8
 8000bea:	d844      	bhi.n	8000c76 <SystemCoreClockUpdate+0xa6>
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <SystemCoreClockUpdate+0x2a>
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	2b04      	cmp	r3, #4
 8000bf6:	d004      	beq.n	8000c02 <SystemCoreClockUpdate+0x32>
 8000bf8:	e03d      	b.n	8000c76 <SystemCoreClockUpdate+0xa6>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8000cac <SystemCoreClockUpdate+0xdc>)
 8000bfc:	4a2c      	ldr	r2, [pc, #176]	@ (8000cb0 <SystemCoreClockUpdate+0xe0>)
 8000bfe:	601a      	str	r2, [r3, #0]
      break;
 8000c00:	e03d      	b.n	8000c7e <SystemCoreClockUpdate+0xae>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000c02:	4b2a      	ldr	r3, [pc, #168]	@ (8000cac <SystemCoreClockUpdate+0xdc>)
 8000c04:	4a2b      	ldr	r2, [pc, #172]	@ (8000cb4 <SystemCoreClockUpdate+0xe4>)
 8000c06:	601a      	str	r2, [r3, #0]
      break;
 8000c08:	e039      	b.n	8000c7e <SystemCoreClockUpdate+0xae>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000c0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ca8 <SystemCoreClockUpdate+0xd8>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	0d9b      	lsrs	r3, r3, #22
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c16:	4b24      	ldr	r3, [pc, #144]	@ (8000ca8 <SystemCoreClockUpdate+0xd8>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c1e:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d00c      	beq.n	8000c40 <SystemCoreClockUpdate+0x70>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000c26:	4a23      	ldr	r2, [pc, #140]	@ (8000cb4 <SystemCoreClockUpdate+0xe4>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ca8 <SystemCoreClockUpdate+0xd8>)
 8000c30:	6852      	ldr	r2, [r2, #4]
 8000c32:	0992      	lsrs	r2, r2, #6
 8000c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c38:	fb02 f303 	mul.w	r3, r2, r3
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e00b      	b.n	8000c58 <SystemCoreClockUpdate+0x88>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000c40:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb0 <SystemCoreClockUpdate+0xe0>)
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c48:	4a17      	ldr	r2, [pc, #92]	@ (8000ca8 <SystemCoreClockUpdate+0xd8>)
 8000c4a:	6852      	ldr	r2, [r2, #4]
 8000c4c:	0992      	lsrs	r2, r2, #6
 8000c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c52:	fb02 f303 	mul.w	r3, r2, r3
 8000c56:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000c58:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <SystemCoreClockUpdate+0xd8>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	0c1b      	lsrs	r3, r3, #16
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	3301      	adds	r3, #1
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllp;
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c70:	4a0e      	ldr	r2, [pc, #56]	@ (8000cac <SystemCoreClockUpdate+0xdc>)
 8000c72:	6013      	str	r3, [r2, #0]
      break;
 8000c74:	e003      	b.n	8000c7e <SystemCoreClockUpdate+0xae>
    default:
      SystemCoreClock = HSI_VALUE;
 8000c76:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <SystemCoreClockUpdate+0xdc>)
 8000c78:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb0 <SystemCoreClockUpdate+0xe0>)
 8000c7a:	601a      	str	r2, [r3, #0]
      break;
 8000c7c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <SystemCoreClockUpdate+0xd8>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	f003 030f 	and.w	r3, r3, #15
 8000c88:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb8 <SystemCoreClockUpdate+0xe8>)
 8000c8a:	5cd3      	ldrb	r3, [r2, r3]
 8000c8c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000c8e:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <SystemCoreClockUpdate+0xdc>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	fa22 f303 	lsr.w	r3, r2, r3
 8000c98:	4a04      	ldr	r2, [pc, #16]	@ (8000cac <SystemCoreClockUpdate+0xdc>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	371c      	adds	r7, #28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	00f42400 	.word	0x00f42400
 8000cb4:	007a1200 	.word	0x007a1200
 8000cb8:	0800bb34 	.word	0x0800bb34

08000cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc0:	f7ff ff74 	bl	8000bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	@ (8000cfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cea:	f00a fe3d 	bl	800b968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cee:	f7ff fddb 	bl	80008a8 <main>
  bx  lr    
 8000cf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000d00:	0800bb5c 	.word	0x0800bb5c
  ldr r2, =_sbss
 8000d04:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000d08:	200059a4 	.word	0x200059a4

08000d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d14:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <HAL_Init+0x40>)
 8000d1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d20:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <HAL_Init+0x40>)
 8000d26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a07      	ldr	r2, [pc, #28]	@ (8000d50 <HAL_Init+0x40>)
 8000d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 fe74 	bl	8001a26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3e:	200f      	movs	r0, #15
 8000d40:	f7ff fe74 	bl	8000a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d44:	f7ff fe46 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023c00 	.word	0x40023c00

08000d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	@ (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008
 8000d78:	20000214 	.word	0x20000214

08000d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b03      	ldr	r3, [pc, #12]	@ (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000214 	.word	0x20000214

08000d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d9c:	f7ff ffee 	bl	8000d7c <HAL_GetTick>
 8000da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dac:	d005      	beq.n	8000dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dae:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <HAL_Delay+0x44>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4413      	add	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dba:	bf00      	nop
 8000dbc:	f7ff ffde 	bl	8000d7c <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d8f7      	bhi.n	8000dbc <HAL_Delay+0x28>
  {
  }
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008

08000ddc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e0ed      	b.n	8000fca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d102      	bne.n	8000e00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fc6c 	bl	80006d8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f042 0201 	orr.w	r2, r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e10:	f7ff ffb4 	bl	8000d7c <HAL_GetTick>
 8000e14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e16:	e012      	b.n	8000e3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e18:	f7ff ffb0 	bl	8000d7c <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b0a      	cmp	r3, #10
 8000e24:	d90b      	bls.n	8000e3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e2a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2205      	movs	r2, #5
 8000e36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e0c5      	b.n	8000fca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0e5      	beq.n	8000e18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0202 	bic.w	r2, r2, #2
 8000e5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e5c:	f7ff ff8e 	bl	8000d7c <HAL_GetTick>
 8000e60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e62:	e012      	b.n	8000e8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e64:	f7ff ff8a 	bl	8000d7c <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b0a      	cmp	r3, #10
 8000e70:	d90b      	bls.n	8000e8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e76:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2205      	movs	r2, #5
 8000e82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e09f      	b.n	8000fca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1e5      	bne.n	8000e64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7e1b      	ldrb	r3, [r3, #24]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d108      	bne.n	8000eb2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	e007      	b.n	8000ec2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	7e5b      	ldrb	r3, [r3, #25]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d108      	bne.n	8000edc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	e007      	b.n	8000eec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000eea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7e9b      	ldrb	r3, [r3, #26]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d108      	bne.n	8000f06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0220 	orr.w	r2, r2, #32
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	e007      	b.n	8000f16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0220 	bic.w	r2, r2, #32
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7edb      	ldrb	r3, [r3, #27]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d108      	bne.n	8000f30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0210 	bic.w	r2, r2, #16
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	e007      	b.n	8000f40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0210 	orr.w	r2, r2, #16
 8000f3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	7f1b      	ldrb	r3, [r3, #28]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d108      	bne.n	8000f5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0208 	orr.w	r2, r2, #8
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	e007      	b.n	8000f6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0208 	bic.w	r2, r2, #8
 8000f68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7f5b      	ldrb	r3, [r3, #29]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d108      	bne.n	8000f84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f042 0204 	orr.w	r2, r2, #4
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	e007      	b.n	8000f94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 0204 	bic.w	r2, r2, #4
 8000f92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	ea42 0103 	orr.w	r1, r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	1e5a      	subs	r2, r3, #1
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fe4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d003      	beq.n	8000ff4 <HAL_CAN_ConfigFilter+0x20>
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	f040 80be 	bne.w	8001170 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000ff4:	4b65      	ldr	r3, [pc, #404]	@ (800118c <HAL_CAN_ConfigFilter+0x1b8>)
 8000ff6:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000ffe:	f043 0201 	orr.w	r2, r3, #1
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800100e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	431a      	orrs	r2, r3
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	f003 031f 	and.w	r3, r3, #31
 8001034:	2201      	movs	r2, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43db      	mvns	r3, r3
 8001046:	401a      	ands	r2, r3
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d123      	bne.n	800109e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	401a      	ands	r2, r3
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001078:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	3248      	adds	r2, #72	@ 0x48
 800107e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001092:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001094:	6939      	ldr	r1, [r7, #16]
 8001096:	3348      	adds	r3, #72	@ 0x48
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	440b      	add	r3, r1
 800109c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d122      	bne.n	80010ec <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	3248      	adds	r2, #72	@ 0x48
 80010cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010e2:	6939      	ldr	r1, [r7, #16]
 80010e4:	3348      	adds	r3, #72	@ 0x48
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	440b      	add	r3, r1
 80010ea:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d109      	bne.n	8001108 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	401a      	ands	r2, r3
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001106:	e007      	b.n	8001118 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	431a      	orrs	r2, r3
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d109      	bne.n	8001134 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43db      	mvns	r3, r3
 800112a:	401a      	ands	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001132:	e007      	b.n	8001144 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	431a      	orrs	r2, r3
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d107      	bne.n	800115c <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	431a      	orrs	r2, r3
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001162:	f023 0201 	bic.w	r2, r3, #1
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	e006      	b.n	800117e <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001174:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
  }
}
 800117e:	4618      	mov	r0, r3
 8001180:	371c      	adds	r7, #28
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40006400 	.word	0x40006400

08001190 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d12e      	bne.n	8001202 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2202      	movs	r2, #2
 80011a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0201 	bic.w	r2, r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011bc:	f7ff fdde 	bl	8000d7c <HAL_GetTick>
 80011c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011c2:	e012      	b.n	80011ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011c4:	f7ff fdda 	bl	8000d7c <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b0a      	cmp	r3, #10
 80011d0:	d90b      	bls.n	80011ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2205      	movs	r2, #5
 80011e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e012      	b.n	8001210 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e5      	bne.n	80011c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e006      	b.n	8001210 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001206:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
  }
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001218:	b480      	push	{r7}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f893 3020 	ldrb.w	r3, [r3, #32]
 800122c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800122e:	7dfb      	ldrb	r3, [r7, #23]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d003      	beq.n	800123c <HAL_CAN_GetRxMessage+0x24>
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	2b02      	cmp	r3, #2
 8001238:	f040 8103 	bne.w	8001442 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10e      	bne.n	8001260 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d116      	bne.n	800127e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001254:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e0f7      	b.n	8001450 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d107      	bne.n	800127e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001272:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e0e8      	b.n	8001450 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	331b      	adds	r3, #27
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	4413      	add	r3, r2
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0204 	and.w	r2, r3, #4
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10c      	bne.n	80012b6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	331b      	adds	r3, #27
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	4413      	add	r3, r2
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	0d5b      	lsrs	r3, r3, #21
 80012ac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	e00b      	b.n	80012ce <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	331b      	adds	r3, #27
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	4413      	add	r3, r2
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	08db      	lsrs	r3, r3, #3
 80012c6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	331b      	adds	r3, #27
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	4413      	add	r3, r2
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0202 	and.w	r2, r3, #2
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	331b      	adds	r3, #27
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	4413      	add	r3, r2
 80012f0:	3304      	adds	r3, #4
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2208      	movs	r2, #8
 8001300:	611a      	str	r2, [r3, #16]
 8001302:	e00b      	b.n	800131c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	331b      	adds	r3, #27
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	4413      	add	r3, r2
 8001310:	3304      	adds	r3, #4
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 020f 	and.w	r2, r3, #15
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	331b      	adds	r3, #27
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	4413      	add	r3, r2
 8001328:	3304      	adds	r3, #4
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	b2da      	uxtb	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	331b      	adds	r3, #27
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	4413      	add	r3, r2
 8001340:	3304      	adds	r3, #4
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	0c1b      	lsrs	r3, r3, #16
 8001346:	b29a      	uxth	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	4413      	add	r3, r2
 8001356:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	4413      	add	r3, r2
 800136c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	0a1a      	lsrs	r2, r3, #8
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	4413      	add	r3, r2
 8001386:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	0c1a      	lsrs	r2, r3, #16
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	3302      	adds	r3, #2
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	4413      	add	r3, r2
 80013a0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	0e1a      	lsrs	r2, r3, #24
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	3303      	adds	r3, #3
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	4413      	add	r3, r2
 80013ba:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	3304      	adds	r3, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	4413      	add	r3, r2
 80013d2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	0a1a      	lsrs	r2, r3, #8
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3305      	adds	r3, #5
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	4413      	add	r3, r2
 80013ec:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	0c1a      	lsrs	r2, r3, #16
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	3306      	adds	r3, #6
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	4413      	add	r3, r2
 8001406:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	0e1a      	lsrs	r2, r3, #24
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	3307      	adds	r3, #7
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d108      	bne.n	800142e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0220 	orr.w	r2, r2, #32
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	e007      	b.n	800143e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	691a      	ldr	r2, [r3, #16]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f042 0220 	orr.w	r2, r2, #32
 800143c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e006      	b.n	8001450 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001446:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
  }
}
 8001450:	4618      	mov	r0, r3
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3020 	ldrb.w	r3, [r3, #32]
 800146c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d002      	beq.n	800147a <HAL_CAN_ActivateNotification+0x1e>
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d109      	bne.n	800148e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6959      	ldr	r1, [r3, #20]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e006      	b.n	800149c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001492:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
  }
}
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	@ 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d07c      	beq.n	80015e8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d023      	beq.n	8001540 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2201      	movs	r2, #1
 80014fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7fe fff8 	bl	8000500 <HAL_CAN_TxMailbox0CompleteCallback>
 8001510:	e016      	b.n	8001540 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d004      	beq.n	8001526 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
 8001524:	e00c      	b.n	8001540 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d004      	beq.n	800153a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
 8001538:	e002      	b.n	8001540 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f96b 	bl	8001816 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d024      	beq.n	8001594 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001552:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7fe ffd9 	bl	8000516 <HAL_CAN_TxMailbox1CompleteCallback>
 8001564:	e016      	b.n	8001594 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800156c:	2b00      	cmp	r3, #0
 800156e:	d004      	beq.n	800157a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001572:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001576:	627b      	str	r3, [r7, #36]	@ 0x24
 8001578:	e00c      	b.n	8001594 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001580:	2b00      	cmp	r3, #0
 8001582:	d004      	beq.n	800158e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
 800158c:	e002      	b.n	8001594 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f94b 	bl	800182a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d024      	beq.n	80015e8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7fe ffba 	bl	800052c <HAL_CAN_TxMailbox2CompleteCallback>
 80015b8:	e016      	b.n	80015e8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d004      	beq.n	80015ce <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80015cc:	e00c      	b.n	80015e8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d004      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24
 80015e0:	e002      	b.n	80015e8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f92b 	bl	800183e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00c      	beq.n	800160c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d007      	beq.n	800160c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2210      	movs	r2, #16
 800160a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00b      	beq.n	800162e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2208      	movs	r2, #8
 8001626:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f912 	bl	8001852 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d009      	beq.n	800164c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7fe ff7c 	bl	8000544 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00c      	beq.n	8001670 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	f003 0310 	and.w	r3, r3, #16
 800165c:	2b00      	cmp	r3, #0
 800165e:	d007      	beq.n	8001670 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2210      	movs	r2, #16
 800166e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	f003 0320 	and.w	r3, r3, #32
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00b      	beq.n	8001692 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d006      	beq.n	8001692 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2208      	movs	r2, #8
 800168a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f8f4 	bl	800187a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	2b00      	cmp	r3, #0
 800169a:	d009      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d002      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f8db 	bl	8001866 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00b      	beq.n	80016d2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2210      	movs	r2, #16
 80016ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f8de 	bl	800188e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00b      	beq.n	80016f4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d006      	beq.n	80016f4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2208      	movs	r2, #8
 80016ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f8d7 	bl	80018a2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d07b      	beq.n	80017f6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d072      	beq.n	80017ee <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170e:	2b00      	cmp	r3, #0
 8001710:	d008      	beq.n	8001724 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800171c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800172a:	2b00      	cmp	r3, #0
 800172c:	d008      	beq.n	8001740 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173a:	f043 0302 	orr.w	r3, r3, #2
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001746:	2b00      	cmp	r3, #0
 8001748:	d008      	beq.n	800175c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001762:	2b00      	cmp	r3, #0
 8001764:	d043      	beq.n	80017ee <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800176c:	2b00      	cmp	r3, #0
 800176e:	d03e      	beq.n	80017ee <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001776:	2b60      	cmp	r3, #96	@ 0x60
 8001778:	d02b      	beq.n	80017d2 <HAL_CAN_IRQHandler+0x32a>
 800177a:	2b60      	cmp	r3, #96	@ 0x60
 800177c:	d82e      	bhi.n	80017dc <HAL_CAN_IRQHandler+0x334>
 800177e:	2b50      	cmp	r3, #80	@ 0x50
 8001780:	d022      	beq.n	80017c8 <HAL_CAN_IRQHandler+0x320>
 8001782:	2b50      	cmp	r3, #80	@ 0x50
 8001784:	d82a      	bhi.n	80017dc <HAL_CAN_IRQHandler+0x334>
 8001786:	2b40      	cmp	r3, #64	@ 0x40
 8001788:	d019      	beq.n	80017be <HAL_CAN_IRQHandler+0x316>
 800178a:	2b40      	cmp	r3, #64	@ 0x40
 800178c:	d826      	bhi.n	80017dc <HAL_CAN_IRQHandler+0x334>
 800178e:	2b30      	cmp	r3, #48	@ 0x30
 8001790:	d010      	beq.n	80017b4 <HAL_CAN_IRQHandler+0x30c>
 8001792:	2b30      	cmp	r3, #48	@ 0x30
 8001794:	d822      	bhi.n	80017dc <HAL_CAN_IRQHandler+0x334>
 8001796:	2b10      	cmp	r3, #16
 8001798:	d002      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x2f8>
 800179a:	2b20      	cmp	r3, #32
 800179c:	d005      	beq.n	80017aa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800179e:	e01d      	b.n	80017dc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80017a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a2:	f043 0308 	orr.w	r3, r3, #8
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017a8:	e019      	b.n	80017de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	f043 0310 	orr.w	r3, r3, #16
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017b2:	e014      	b.n	80017de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b6:	f043 0320 	orr.w	r3, r3, #32
 80017ba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017bc:	e00f      	b.n	80017de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017c6:	e00a      	b.n	80017de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017d0:	e005      	b.n	80017de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017da:	e000      	b.n	80017de <HAL_CAN_IRQHandler+0x336>
            break;
 80017dc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	699a      	ldr	r2, [r3, #24]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80017ec:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2204      	movs	r2, #4
 80017f4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f854 	bl	80018b6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	@ 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fe:	4a04      	ldr	r2, [pc, #16]	@ (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60d3      	str	r3, [r2, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001918:	4b04      	ldr	r3, [pc, #16]	@ (800192c <__NVIC_GetPriorityGrouping+0x18>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 0307 	and.w	r3, r3, #7
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db0b      	blt.n	800195a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	4907      	ldr	r1, [pc, #28]	@ (8001968 <__NVIC_EnableIRQ+0x38>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	2001      	movs	r0, #1
 8001952:	fa00 f202 	lsl.w	r2, r0, r2
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	@ (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	@ (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	@ 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	@ 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ff4c 	bl	80018cc <__NVIC_SetPriorityGrouping>
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a4e:	f7ff ff61 	bl	8001914 <__NVIC_GetPriorityGrouping>
 8001a52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	68b9      	ldr	r1, [r7, #8]
 8001a58:	6978      	ldr	r0, [r7, #20]
 8001a5a:	f7ff ffb1 	bl	80019c0 <NVIC_EncodePriority>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff80 	bl	800196c <__NVIC_SetPriority>
}
 8001a6c:	bf00      	nop
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff54 	bl	8001930 <__NVIC_EnableIRQ>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	@ 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	e165      	b.n	8001d78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	f040 8154 	bne.w	8001d72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d005      	beq.n	8001ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d130      	bne.n	8001b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 0201 	and.w	r2, r3, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d017      	beq.n	8001b80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d123      	bne.n	8001bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	08da      	lsrs	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3208      	adds	r2, #8
 8001b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	69b9      	ldr	r1, [r7, #24]
 8001bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0203 	and.w	r2, r3, #3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80ae 	beq.w	8001d72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b5d      	ldr	r3, [pc, #372]	@ (8001d90 <HAL_GPIO_Init+0x300>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1e:	4a5c      	ldr	r2, [pc, #368]	@ (8001d90 <HAL_GPIO_Init+0x300>)
 8001c20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c26:	4b5a      	ldr	r3, [pc, #360]	@ (8001d90 <HAL_GPIO_Init+0x300>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c32:	4a58      	ldr	r2, [pc, #352]	@ (8001d94 <HAL_GPIO_Init+0x304>)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4f      	ldr	r2, [pc, #316]	@ (8001d98 <HAL_GPIO_Init+0x308>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d025      	beq.n	8001caa <HAL_GPIO_Init+0x21a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4e      	ldr	r2, [pc, #312]	@ (8001d9c <HAL_GPIO_Init+0x30c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d01f      	beq.n	8001ca6 <HAL_GPIO_Init+0x216>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4d      	ldr	r2, [pc, #308]	@ (8001da0 <HAL_GPIO_Init+0x310>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d019      	beq.n	8001ca2 <HAL_GPIO_Init+0x212>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4c      	ldr	r2, [pc, #304]	@ (8001da4 <HAL_GPIO_Init+0x314>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <HAL_GPIO_Init+0x20e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4b      	ldr	r2, [pc, #300]	@ (8001da8 <HAL_GPIO_Init+0x318>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00d      	beq.n	8001c9a <HAL_GPIO_Init+0x20a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4a      	ldr	r2, [pc, #296]	@ (8001dac <HAL_GPIO_Init+0x31c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d007      	beq.n	8001c96 <HAL_GPIO_Init+0x206>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a49      	ldr	r2, [pc, #292]	@ (8001db0 <HAL_GPIO_Init+0x320>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d101      	bne.n	8001c92 <HAL_GPIO_Init+0x202>
 8001c8e:	2306      	movs	r3, #6
 8001c90:	e00c      	b.n	8001cac <HAL_GPIO_Init+0x21c>
 8001c92:	2307      	movs	r3, #7
 8001c94:	e00a      	b.n	8001cac <HAL_GPIO_Init+0x21c>
 8001c96:	2305      	movs	r3, #5
 8001c98:	e008      	b.n	8001cac <HAL_GPIO_Init+0x21c>
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	e006      	b.n	8001cac <HAL_GPIO_Init+0x21c>
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e004      	b.n	8001cac <HAL_GPIO_Init+0x21c>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e002      	b.n	8001cac <HAL_GPIO_Init+0x21c>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_GPIO_Init+0x21c>
 8001caa:	2300      	movs	r3, #0
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	f002 0203 	and.w	r2, r2, #3
 8001cb2:	0092      	lsls	r2, r2, #2
 8001cb4:	4093      	lsls	r3, r2
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cbc:	4935      	ldr	r1, [pc, #212]	@ (8001d94 <HAL_GPIO_Init+0x304>)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cca:	4b3a      	ldr	r3, [pc, #232]	@ (8001db4 <HAL_GPIO_Init+0x324>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cee:	4a31      	ldr	r2, [pc, #196]	@ (8001db4 <HAL_GPIO_Init+0x324>)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8001db4 <HAL_GPIO_Init+0x324>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d18:	4a26      	ldr	r2, [pc, #152]	@ (8001db4 <HAL_GPIO_Init+0x324>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d1e:	4b25      	ldr	r3, [pc, #148]	@ (8001db4 <HAL_GPIO_Init+0x324>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d42:	4a1c      	ldr	r2, [pc, #112]	@ (8001db4 <HAL_GPIO_Init+0x324>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d48:	4b1a      	ldr	r3, [pc, #104]	@ (8001db4 <HAL_GPIO_Init+0x324>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d6c:	4a11      	ldr	r2, [pc, #68]	@ (8001db4 <HAL_GPIO_Init+0x324>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3301      	adds	r3, #1
 8001d76:	61fb      	str	r3, [r7, #28]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	2b0f      	cmp	r3, #15
 8001d7c:	f67f ae96 	bls.w	8001aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	3724      	adds	r7, #36	@ 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40013800 	.word	0x40013800
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40020400 	.word	0x40020400
 8001da0:	40020800 	.word	0x40020800
 8001da4:	40020c00 	.word	0x40020c00
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40021400 	.word	0x40021400
 8001db0:	40021800 	.word	0x40021800
 8001db4:	40013c00 	.word	0x40013c00

08001db8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e108      	b.n	8001fdc <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d106      	bne.n	8001dea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f009 f9e9 	bl	800b1bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2203      	movs	r2, #3
 8001dee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001df8:	d102      	bne.n	8001e00 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f002 ff58 	bl	8004cba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	7c1a      	ldrb	r2, [r3, #16]
 8001e12:	f88d 2000 	strb.w	r2, [sp]
 8001e16:	3304      	adds	r3, #4
 8001e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e1a:	f002 fe37 	bl	8004a8c <USB_CoreInit>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0d5      	b.n	8001fdc <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f002 ff50 	bl	8004cdc <USB_SetCurrentMode>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2202      	movs	r2, #2
 8001e46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e0c6      	b.n	8001fdc <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	e04a      	b.n	8001eea <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	3315      	adds	r3, #21
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	3314      	adds	r3, #20
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	b298      	uxth	r0, r3
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	332e      	adds	r3, #46	@ 0x2e
 8001e90:	4602      	mov	r2, r0
 8001e92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3318      	adds	r3, #24
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	331c      	adds	r3, #28
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	3320      	adds	r3, #32
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	3324      	adds	r3, #36	@ 0x24
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	791b      	ldrb	r3, [r3, #4]
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d3af      	bcc.n	8001e54 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	73fb      	strb	r3, [r7, #15]
 8001ef8:	e044      	b.n	8001f84 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001efa:	7bfa      	ldrb	r2, [r7, #15]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4413      	add	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f26:	7bfa      	ldrb	r2, [r7, #15]
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f52:	7bfa      	ldrb	r2, [r7, #15]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	3301      	adds	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	791b      	ldrb	r3, [r3, #4]
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d3b5      	bcc.n	8001efa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7c1a      	ldrb	r2, [r3, #16]
 8001f96:	f88d 2000 	strb.w	r2, [sp]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f9e:	f002 fee9 	bl	8004d74 <USB_DevInit>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e013      	b.n	8001fdc <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	7b1b      	ldrb	r3, [r3, #12]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f001 f96e 	bl	80032ac <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f003 ff26 	bl	8005e26 <USB_DevDisconnect>

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_PCD_Start+0x1c>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e022      	b.n	8002046 <HAL_PCD_Start+0x62>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002010:	2b00      	cmp	r3, #0
 8002012:	d009      	beq.n	8002028 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002018:	2b01      	cmp	r3, #1
 800201a:	d105      	bne.n	8002028 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002020:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f002 fe33 	bl	8004c98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f003 fed4 	bl	8005de4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800204e:	b590      	push	{r4, r7, lr}
 8002050:	b08d      	sub	sp, #52	@ 0x34
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f003 ff92 	bl	8005f8e <USB_GetMode>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	f040 84b9 	bne.w	80029e4 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f003 fef6 	bl	8005e68 <USB_ReadInterrupts>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 84af 	beq.w	80029e2 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f003 fee3 	bl	8005e68 <USB_ReadInterrupts>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d107      	bne.n	80020bc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f002 0202 	and.w	r2, r2, #2
 80020ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f003 fed1 	bl	8005e68 <USB_ReadInterrupts>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d161      	bne.n	8002194 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699a      	ldr	r2, [r3, #24]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0210 	bic.w	r2, r2, #16
 80020de:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	f003 020f 	and.w	r2, r3, #15
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	3304      	adds	r3, #4
 80020fe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	0c5b      	lsrs	r3, r3, #17
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	2b02      	cmp	r3, #2
 800210a:	d124      	bne.n	8002156 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d035      	beq.n	8002184 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002122:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002126:	b29b      	uxth	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	6a38      	ldr	r0, [r7, #32]
 800212c:	f003 fd08 	bl	8005b40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	091b      	lsrs	r3, r3, #4
 8002138:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800213c:	441a      	add	r2, r3
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800214e:	441a      	add	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	615a      	str	r2, [r3, #20]
 8002154:	e016      	b.n	8002184 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	0c5b      	lsrs	r3, r3, #17
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	2b06      	cmp	r3, #6
 8002160:	d110      	bne.n	8002184 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002168:	2208      	movs	r2, #8
 800216a:	4619      	mov	r1, r3
 800216c:	6a38      	ldr	r0, [r7, #32]
 800216e:	f003 fce7 	bl	8005b40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800217e:	441a      	add	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0210 	orr.w	r2, r2, #16
 8002192:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f003 fe65 	bl	8005e68 <USB_ReadInterrupts>
 800219e:	4603      	mov	r3, r0
 80021a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80021a8:	f040 80a7 	bne.w	80022fa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f003 fe6a 	bl	8005e8e <USB_ReadDevAllOutEpInterrupt>
 80021ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80021bc:	e099      	b.n	80022f2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 808e 	beq.w	80022e6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f003 fe8e 	bl	8005ef6 <USB_ReadDevOutEPInterrupt>
 80021da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00c      	beq.n	8002200 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021f2:	461a      	mov	r2, r3
 80021f4:	2301      	movs	r3, #1
 80021f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80021f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fed0 	bl	8002fa0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00c      	beq.n	8002224 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	4413      	add	r3, r2
 8002212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002216:	461a      	mov	r2, r3
 8002218:	2308      	movs	r3, #8
 800221a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800221c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 ffa6 	bl	8003170 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b00      	cmp	r3, #0
 800222c:	d008      	beq.n	8002240 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800223a:	461a      	mov	r2, r3
 800223c:	2310      	movs	r3, #16
 800223e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d030      	beq.n	80022ac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002252:	2b80      	cmp	r3, #128	@ 0x80
 8002254:	d109      	bne.n	800226a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002264:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002268:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800226a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	3304      	adds	r3, #4
 800227e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	78db      	ldrb	r3, [r3, #3]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d108      	bne.n	800229a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	2200      	movs	r2, #0
 800228c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	b2db      	uxtb	r3, r3
 8002292:	4619      	mov	r1, r3
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f009 f8ad 	bl	800b3f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800229a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022a6:	461a      	mov	r2, r3
 80022a8:	2302      	movs	r3, #2
 80022aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022c2:	461a      	mov	r2, r3
 80022c4:	2320      	movs	r3, #32
 80022c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022de:	461a      	mov	r2, r3
 80022e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	3301      	adds	r3, #1
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80022ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ee:	085b      	lsrs	r3, r3, #1
 80022f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80022f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f47f af62 	bne.w	80021be <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f003 fdb2 	bl	8005e68 <USB_ReadInterrupts>
 8002304:	4603      	mov	r3, r0
 8002306:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800230a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800230e:	f040 80db 	bne.w	80024c8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f003 fdd3 	bl	8005ec2 <USB_ReadDevAllInEpInterrupt>
 800231c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002322:	e0cd      	b.n	80024c0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 80c2 	beq.w	80024b4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f003 fdf9 	bl	8005f32 <USB_ReadDevInEPInterrupt>
 8002340:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d057      	beq.n	80023fc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	2201      	movs	r2, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	43db      	mvns	r3, r3
 8002366:	69f9      	ldr	r1, [r7, #28]
 8002368:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800236c:	4013      	ands	r3, r2
 800236e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	4413      	add	r3, r2
 8002378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800237c:	461a      	mov	r2, r3
 800237e:	2301      	movs	r3, #1
 8002380:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	799b      	ldrb	r3, [r3, #6]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d132      	bne.n	80023f0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	3320      	adds	r3, #32
 800239a:	6819      	ldr	r1, [r3, #0]
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4403      	add	r3, r0
 80023aa:	331c      	adds	r3, #28
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4419      	add	r1, r3
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4403      	add	r3, r0
 80023be:	3320      	adds	r3, #32
 80023c0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d113      	bne.n	80023f0 <HAL_PCD_IRQHandler+0x3a2>
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	3324      	adds	r3, #36	@ 0x24
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d108      	bne.n	80023f0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023e8:	461a      	mov	r2, r3
 80023ea:	2101      	movs	r1, #1
 80023ec:	f003 fe00 	bl	8005ff0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80023f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	4619      	mov	r1, r3
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f008 ff77 	bl	800b2ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d008      	beq.n	8002418 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	4413      	add	r3, r2
 800240e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002412:	461a      	mov	r2, r3
 8002414:	2308      	movs	r3, #8
 8002416:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	2b00      	cmp	r3, #0
 8002420:	d008      	beq.n	8002434 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	4413      	add	r3, r2
 800242a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800242e:	461a      	mov	r2, r3
 8002430:	2310      	movs	r3, #16
 8002432:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	4413      	add	r3, r2
 8002446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800244a:	461a      	mov	r2, r3
 800244c:	2340      	movs	r3, #64	@ 0x40
 800244e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d023      	beq.n	80024a2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800245a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800245c:	6a38      	ldr	r0, [r7, #32]
 800245e:	f002 fde7 	bl	8005030 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	3310      	adds	r3, #16
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	3304      	adds	r3, #4
 8002474:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	78db      	ldrb	r3, [r3, #3]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d108      	bne.n	8002490 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2200      	movs	r2, #0
 8002482:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	b2db      	uxtb	r3, r3
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f008 ffc4 	bl	800b418 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800249c:	461a      	mov	r2, r3
 800249e:	2302      	movs	r3, #2
 80024a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80024ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fcea 	bl	8002e88 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80024b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b6:	3301      	adds	r3, #1
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80024ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024bc:	085b      	lsrs	r3, r3, #1
 80024be:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80024c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f47f af2e 	bne.w	8002324 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 fccb 	bl	8005e68 <USB_ReadInterrupts>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80024d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80024dc:	d122      	bne.n	8002524 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d108      	bne.n	800250e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002504:	2100      	movs	r1, #0
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f009 f93e 	bl	800b788 <HAL_PCDEx_LPM_Callback>
 800250c:	e002      	b.n	8002514 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f008 ff62 	bl	800b3d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002522:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f003 fc9d 	bl	8005e68 <USB_ReadInterrupts>
 800252e:	4603      	mov	r3, r0
 8002530:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002534:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002538:	d112      	bne.n	8002560 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b01      	cmp	r3, #1
 8002548:	d102      	bne.n	8002550 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f008 ff1e 	bl	800b38c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800255e:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f003 fc7f 	bl	8005e68 <USB_ReadInterrupts>
 800256a:	4603      	mov	r3, r0
 800256c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002570:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002574:	d121      	bne.n	80025ba <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002584:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800258c:	2b00      	cmp	r3, #0
 800258e:	d111      	bne.n	80025b4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	f003 020f 	and.w	r2, r3, #15
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80025aa:	2101      	movs	r1, #1
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f009 f8eb 	bl	800b788 <HAL_PCDEx_LPM_Callback>
 80025b2:	e002      	b.n	80025ba <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f008 fee9 	bl	800b38c <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 fc52 	bl	8005e68 <USB_ReadInterrupts>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025ce:	f040 80b7 	bne.w	8002740 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2110      	movs	r1, #16
 80025ec:	4618      	mov	r0, r3
 80025ee:	f002 fd1f 	bl	8005030 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025f6:	e046      	b.n	8002686 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80025f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002604:	461a      	mov	r2, r3
 8002606:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800260a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800260c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	4413      	add	r3, r2
 8002614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800261c:	0151      	lsls	r1, r2, #5
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	440a      	add	r2, r1
 8002622:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002626:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800262a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800262c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	4413      	add	r3, r2
 8002634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002638:	461a      	mov	r2, r3
 800263a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800263e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	4413      	add	r3, r2
 8002648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002650:	0151      	lsls	r1, r2, #5
 8002652:	69fa      	ldr	r2, [r7, #28]
 8002654:	440a      	add	r2, r1
 8002656:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800265a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800265e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	4413      	add	r3, r2
 8002668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002670:	0151      	lsls	r1, r2, #5
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	440a      	add	r2, r1
 8002676:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800267a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800267e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002682:	3301      	adds	r3, #1
 8002684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	791b      	ldrb	r3, [r3, #4]
 800268a:	461a      	mov	r2, r3
 800268c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800268e:	4293      	cmp	r3, r2
 8002690:	d3b2      	bcc.n	80025f8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	69fa      	ldr	r2, [r7, #28]
 800269c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026a0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80026a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	7bdb      	ldrb	r3, [r3, #15]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d016      	beq.n	80026dc <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026be:	f043 030b 	orr.w	r3, r3, #11
 80026c2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026d4:	f043 030b 	orr.w	r3, r3, #11
 80026d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026da:	e015      	b.n	8002708 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026ee:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80026f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002702:	f043 030b 	orr.w	r3, r3, #11
 8002706:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002716:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800271a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800272a:	461a      	mov	r2, r3
 800272c:	f003 fc60 	bl	8005ff0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800273e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f003 fb8f 	bl	8005e68 <USB_ReadInterrupts>
 800274a:	4603      	mov	r3, r0
 800274c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002750:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002754:	d123      	bne.n	800279e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f003 fc25 	bl	8005faa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f002 fcdc 	bl	8005122 <USB_GetDevSpeed>
 800276a:	4603      	mov	r3, r0
 800276c:	461a      	mov	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681c      	ldr	r4, [r3, #0]
 8002776:	f000 fea3 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 800277a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002780:	461a      	mov	r2, r3
 8002782:	4620      	mov	r0, r4
 8002784:	f002 f9e6 	bl	8004b54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f008 fdd6 	bl	800b33a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800279c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 fb60 	bl	8005e68 <USB_ReadInterrupts>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d10a      	bne.n	80027c8 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f008 fdb3 	bl	800b31e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f002 0208 	and.w	r2, r2, #8
 80027c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 fb4b 	bl	8005e68 <USB_ReadInterrupts>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d8:	2b80      	cmp	r3, #128	@ 0x80
 80027da:	d123      	bne.n	8002824 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027e8:	2301      	movs	r3, #1
 80027ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ec:	e014      	b.n	8002818 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d105      	bne.n	8002812 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	b2db      	uxtb	r3, r3
 800280a:	4619      	mov	r1, r3
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fb0a 	bl	8002e26 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	3301      	adds	r3, #1
 8002816:	627b      	str	r3, [r7, #36]	@ 0x24
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	791b      	ldrb	r3, [r3, #4]
 800281c:	461a      	mov	r2, r3
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	4293      	cmp	r3, r2
 8002822:	d3e4      	bcc.n	80027ee <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f003 fb1d 	bl	8005e68 <USB_ReadInterrupts>
 800282e:	4603      	mov	r3, r0
 8002830:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002834:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002838:	d13c      	bne.n	80028b4 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800283a:	2301      	movs	r3, #1
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
 800283e:	e02b      	b.n	8002898 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	4413      	add	r3, r2
 8002848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	3318      	adds	r3, #24
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d115      	bne.n	8002892 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002866:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002868:	2b00      	cmp	r3, #0
 800286a:	da12      	bge.n	8002892 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002870:	4613      	mov	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	3317      	adds	r3, #23
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002888:	b2db      	uxtb	r3, r3
 800288a:	4619      	mov	r1, r3
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 faca 	bl	8002e26 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	3301      	adds	r3, #1
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	791b      	ldrb	r3, [r3, #4]
 800289c:	461a      	mov	r2, r3
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d3cd      	bcc.n	8002840 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80028b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f003 fad5 	bl	8005e68 <USB_ReadInterrupts>
 80028be:	4603      	mov	r3, r0
 80028c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028c8:	d156      	bne.n	8002978 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028ca:	2301      	movs	r3, #1
 80028cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ce:	e045      	b.n	800295c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e4:	4613      	mov	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4413      	add	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d12e      	bne.n	8002956 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	da2b      	bge.n	8002956 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	0c1a      	lsrs	r2, r3, #16
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002908:	4053      	eors	r3, r2
 800290a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800290e:	2b00      	cmp	r3, #0
 8002910:	d121      	bne.n	8002956 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10a      	bne.n	8002956 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800294e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002952:	6053      	str	r3, [r2, #4]
            break;
 8002954:	e008      	b.n	8002968 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	3301      	adds	r3, #1
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	791b      	ldrb	r3, [r3, #4]
 8002960:	461a      	mov	r2, r3
 8002962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002964:	4293      	cmp	r3, r2
 8002966:	d3b3      	bcc.n	80028d0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002976:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f003 fa73 	bl	8005e68 <USB_ReadInterrupts>
 8002982:	4603      	mov	r3, r0
 8002984:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800298c:	d10a      	bne.n	80029a4 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f008 fd54 	bl	800b43c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80029a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f003 fa5d 	bl	8005e68 <USB_ReadInterrupts>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d115      	bne.n	80029e4 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f008 fd44 	bl	800b458 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	430a      	orrs	r2, r1
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	e000      	b.n	80029e4 <HAL_PCD_IRQHandler+0x996>
      return;
 80029e2:	bf00      	nop
    }
  }
}
 80029e4:	3734      	adds	r7, #52	@ 0x34
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd90      	pop	{r4, r7, pc}

080029ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	460b      	mov	r3, r1
 80029f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_PCD_SetAddress+0x1a>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e012      	b.n	8002a2a <HAL_PCD_SetAddress+0x40>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	78fa      	ldrb	r2, [r7, #3]
 8002a10:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 f9bc 	bl	8005d98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	4608      	mov	r0, r1
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4603      	mov	r3, r0
 8002a42:	70fb      	strb	r3, [r7, #3]
 8002a44:	460b      	mov	r3, r1
 8002a46:	803b      	strh	r3, [r7, #0]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	da0f      	bge.n	8002a78 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	f003 020f 	and.w	r2, r3, #15
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	3310      	adds	r3, #16
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	705a      	strb	r2, [r3, #1]
 8002a76:	e00f      	b.n	8002a98 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	f003 020f 	and.w	r2, r3, #15
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3304      	adds	r3, #4
 8002a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002aa4:	883b      	ldrh	r3, [r7, #0]
 8002aa6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	78ba      	ldrb	r2, [r7, #2]
 8002ab2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	785b      	ldrb	r3, [r3, #1]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d004      	beq.n	8002ac6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ac6:	78bb      	ldrb	r3, [r7, #2]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d102      	bne.n	8002ad2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_PCD_EP_Open+0xae>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e00e      	b.n	8002afe <HAL_PCD_EP_Open+0xcc>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68f9      	ldr	r1, [r7, #12]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f002 fb3c 	bl	800516c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002afc:	7afb      	ldrb	r3, [r7, #11]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	da0f      	bge.n	8002b3a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	f003 020f 	and.w	r2, r3, #15
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	3310      	adds	r3, #16
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3304      	adds	r3, #4
 8002b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	705a      	strb	r2, [r3, #1]
 8002b38:	e00f      	b.n	8002b5a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	f003 020f 	and.w	r2, r3, #15
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	3304      	adds	r3, #4
 8002b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b5a:	78fb      	ldrb	r3, [r7, #3]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_PCD_EP_Close+0x6e>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e00e      	b.n	8002b92 <HAL_PCD_EP_Close+0x8c>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68f9      	ldr	r1, [r7, #12]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f002 fb7a 	bl	800527c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002baa:	7afb      	ldrb	r3, [r7, #11]
 8002bac:	f003 020f 	and.w	r2, r3, #15
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bdc:	7afb      	ldrb	r3, [r7, #11]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	799b      	ldrb	r3, [r3, #6]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d102      	bne.n	8002bf6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	799b      	ldrb	r3, [r3, #6]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	6979      	ldr	r1, [r7, #20]
 8002c02:	f002 fc17 	bl	8005434 <USB_EPStartXfer>

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	f003 020f 	and.w	r2, r3, #15
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c50:	7afb      	ldrb	r3, [r7, #11]
 8002c52:	f003 020f 	and.w	r2, r3, #15
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	3310      	adds	r3, #16
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4413      	add	r3, r2
 8002c64:	3304      	adds	r3, #4
 8002c66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2200      	movs	r2, #0
 8002c78:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c80:	7afb      	ldrb	r3, [r7, #11]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	799b      	ldrb	r3, [r3, #6]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d102      	bne.n	8002c9a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	799b      	ldrb	r3, [r3, #6]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	6979      	ldr	r1, [r7, #20]
 8002ca6:	f002 fbc5 	bl	8005434 <USB_EPStartXfer>

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	7912      	ldrb	r2, [r2, #4]
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e04f      	b.n	8002d72 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	da0f      	bge.n	8002cfa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	f003 020f 	and.w	r2, r3, #15
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	3310      	adds	r3, #16
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	3304      	adds	r3, #4
 8002cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	705a      	strb	r2, [r3, #1]
 8002cf8:	e00d      	b.n	8002d16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_PCD_EP_SetStall+0x82>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e01d      	b.n	8002d72 <HAL_PCD_EP_SetStall+0xbe>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68f9      	ldr	r1, [r7, #12]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f002 ff53 	bl	8005bf0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d109      	bne.n	8002d68 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	7999      	ldrb	r1, [r3, #6]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d62:	461a      	mov	r2, r3
 8002d64:	f003 f944 	bl	8005ff0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	460b      	mov	r3, r1
 8002d84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d86:	78fb      	ldrb	r3, [r7, #3]
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	7912      	ldrb	r2, [r2, #4]
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e042      	b.n	8002e1e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	da0f      	bge.n	8002dc0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	f003 020f 	and.w	r2, r3, #15
 8002da6:	4613      	mov	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	3310      	adds	r3, #16
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	4413      	add	r3, r2
 8002db4:	3304      	adds	r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	705a      	strb	r2, [r3, #1]
 8002dbe:	e00f      	b.n	8002de0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	f003 020f 	and.w	r2, r3, #15
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002de6:	78fb      	ldrb	r3, [r7, #3]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_PCD_EP_ClrStall+0x86>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e00e      	b.n	8002e1e <HAL_PCD_EP_ClrStall+0xa4>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68f9      	ldr	r1, [r7, #12]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f002 ff5c 	bl	8005ccc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	da0c      	bge.n	8002e54 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	f003 020f 	and.w	r2, r3, #15
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	3310      	adds	r3, #16
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3304      	adds	r3, #4
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	e00c      	b.n	8002e6e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	f003 020f 	and.w	r2, r3, #15
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68f9      	ldr	r1, [r7, #12]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f002 fd7b 	bl	8005970 <USB_EPStopXfer>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e7e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	@ 0x28
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	3310      	adds	r3, #16
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	4413      	add	r3, r2
 8002eac:	3304      	adds	r3, #4
 8002eae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	695a      	ldr	r2, [r3, #20]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d901      	bls.n	8002ec0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e06b      	b.n	8002f98 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d902      	bls.n	8002edc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	3303      	adds	r3, #3
 8002ee0:	089b      	lsrs	r3, r3, #2
 8002ee2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ee4:	e02a      	b.n	8002f3c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d902      	bls.n	8002f02 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3303      	adds	r3, #3
 8002f06:	089b      	lsrs	r3, r3, #2
 8002f08:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	68d9      	ldr	r1, [r3, #12]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	6978      	ldr	r0, [r7, #20]
 8002f20:	f002 fdd0 	bl	8005ac4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	441a      	add	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	441a      	add	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d809      	bhi.n	8002f66 <PCD_WriteEmptyTxFifo+0xde>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d203      	bcs.n	8002f66 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1bf      	bne.n	8002ee6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	691a      	ldr	r2, [r3, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d811      	bhi.n	8002f96 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	2201      	movs	r2, #1
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	6939      	ldr	r1, [r7, #16]
 8002f8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002f92:	4013      	ands	r3, r2
 8002f94:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3720      	adds	r7, #32
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	333c      	adds	r3, #60	@ 0x3c
 8002fb8:	3304      	adds	r3, #4
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	799b      	ldrb	r3, [r3, #6]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d17b      	bne.n	80030ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d015      	beq.n	800300c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	4a61      	ldr	r2, [pc, #388]	@ (8003168 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	f240 80b9 	bls.w	800315c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 80b3 	beq.w	800315c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003002:	461a      	mov	r2, r3
 8003004:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003008:	6093      	str	r3, [r2, #8]
 800300a:	e0a7      	b.n	800315c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	4413      	add	r3, r2
 800301e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003022:	461a      	mov	r2, r3
 8003024:	2320      	movs	r3, #32
 8003026:	6093      	str	r3, [r2, #8]
 8003028:	e098      	b.n	800315c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003030:	2b00      	cmp	r3, #0
 8003032:	f040 8093 	bne.w	800315c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	4a4b      	ldr	r2, [pc, #300]	@ (8003168 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d90f      	bls.n	800305e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	4413      	add	r3, r2
 8003050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003054:	461a      	mov	r2, r3
 8003056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800305a:	6093      	str	r3, [r2, #8]
 800305c:	e07e      	b.n	800315c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	4413      	add	r3, r2
 8003070:	3304      	adds	r3, #4
 8003072:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a1a      	ldr	r2, [r3, #32]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	0159      	lsls	r1, r3, #5
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	440b      	add	r3, r1
 8003080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308a:	1ad2      	subs	r2, r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d114      	bne.n	80030c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d109      	bne.n	80030b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030a8:	461a      	mov	r2, r3
 80030aa:	2101      	movs	r1, #1
 80030ac:	f002 ffa0 	bl	8005ff0 <USB_EP0_OutStart>
 80030b0:	e006      	b.n	80030c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	441a      	add	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	4619      	mov	r1, r3
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f008 f8f4 	bl	800b2b4 <HAL_PCD_DataOutStageCallback>
 80030cc:	e046      	b.n	800315c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	4a26      	ldr	r2, [pc, #152]	@ (800316c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d124      	bne.n	8003120 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ec:	461a      	mov	r2, r3
 80030ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030f2:	6093      	str	r3, [r2, #8]
 80030f4:	e032      	b.n	800315c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800310c:	461a      	mov	r2, r3
 800310e:	2320      	movs	r3, #32
 8003110:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	4619      	mov	r1, r3
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f008 f8cb 	bl	800b2b4 <HAL_PCD_DataOutStageCallback>
 800311e:	e01d      	b.n	800315c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d114      	bne.n	8003150 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d108      	bne.n	8003150 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003148:	461a      	mov	r2, r3
 800314a:	2100      	movs	r1, #0
 800314c:	f002 ff50 	bl	8005ff0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	b2db      	uxtb	r3, r3
 8003154:	4619      	mov	r1, r3
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f008 f8ac 	bl	800b2b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	4f54300a 	.word	0x4f54300a
 800316c:	4f54310a 	.word	0x4f54310a

08003170 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	333c      	adds	r3, #60	@ 0x3c
 8003188:	3304      	adds	r3, #4
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4a15      	ldr	r2, [pc, #84]	@ (80031f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d90e      	bls.n	80031c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d009      	beq.n	80031c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031bc:	461a      	mov	r2, r3
 80031be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f008 f863 	bl	800b290 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4a0a      	ldr	r2, [pc, #40]	@ (80031f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d90c      	bls.n	80031ec <PCD_EP_OutSetupPacket_int+0x7c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	799b      	ldrb	r3, [r3, #6]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d108      	bne.n	80031ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031e4:	461a      	mov	r2, r3
 80031e6:	2101      	movs	r1, #1
 80031e8:	f002 ff02 	bl	8005ff0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	4f54300a 	.word	0x4f54300a

080031fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	70fb      	strb	r3, [r7, #3]
 8003208:	4613      	mov	r3, r2
 800320a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d107      	bne.n	800322a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800321a:	883b      	ldrh	r3, [r7, #0]
 800321c:	0419      	lsls	r1, r3, #16
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	430a      	orrs	r2, r1
 8003226:	629a      	str	r2, [r3, #40]	@ 0x28
 8003228:	e028      	b.n	800327c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	4413      	add	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003238:	2300      	movs	r3, #0
 800323a:	73fb      	strb	r3, [r7, #15]
 800323c:	e00d      	b.n	800325a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	3340      	adds	r3, #64	@ 0x40
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	4413      	add	r3, r2
 8003252:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	3301      	adds	r3, #1
 8003258:	73fb      	strb	r3, [r7, #15]
 800325a:	7bfa      	ldrb	r2, [r7, #15]
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	3b01      	subs	r3, #1
 8003260:	429a      	cmp	r2, r3
 8003262:	d3ec      	bcc.n	800323e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003264:	883b      	ldrh	r3, [r7, #0]
 8003266:	0418      	lsls	r0, r3, #16
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6819      	ldr	r1, [r3, #0]
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	3b01      	subs	r3, #1
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	4302      	orrs	r2, r0
 8003274:	3340      	adds	r3, #64	@ 0x40
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	887a      	ldrh	r2, [r7, #2]
 800329c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032de:	f043 0303 	orr.w	r3, r3, #3
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0cc      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003308:	4b68      	ldr	r3, [pc, #416]	@ (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d90c      	bls.n	8003330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4b65      	ldr	r3, [pc, #404]	@ (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b63      	ldr	r3, [pc, #396]	@ (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0b8      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003348:	4b59      	ldr	r3, [pc, #356]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4a58      	ldr	r2, [pc, #352]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003352:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003360:	4b53      	ldr	r3, [pc, #332]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a52      	ldr	r2, [pc, #328]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800336a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336c:	4b50      	ldr	r3, [pc, #320]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	494d      	ldr	r1, [pc, #308]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d044      	beq.n	8003414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b47      	ldr	r3, [pc, #284]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d119      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e07f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b2:	4b3f      	ldr	r3, [pc, #252]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e06f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c2:	4b3b      	ldr	r3, [pc, #236]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e067      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033d2:	4b37      	ldr	r3, [pc, #220]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f023 0203 	bic.w	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4934      	ldr	r1, [pc, #208]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e4:	f7fd fcca 	bl	8000d7c <HAL_GetTick>
 80033e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	e00a      	b.n	8003402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ec:	f7fd fcc6 	bl	8000d7c <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e04f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	4b2b      	ldr	r3, [pc, #172]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 020c 	and.w	r2, r3, #12
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	429a      	cmp	r2, r3
 8003412:	d1eb      	bne.n	80033ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003414:	4b25      	ldr	r3, [pc, #148]	@ (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d20c      	bcs.n	800343c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b22      	ldr	r3, [pc, #136]	@ (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b20      	ldr	r3, [pc, #128]	@ (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e032      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003448:	4b19      	ldr	r3, [pc, #100]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4916      	ldr	r1, [pc, #88]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003466:	4b12      	ldr	r3, [pc, #72]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	490e      	ldr	r1, [pc, #56]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800347a:	f000 fb9d 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 800347e:	4602      	mov	r2, r0
 8003480:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	490a      	ldr	r1, [pc, #40]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 800348c:	5ccb      	ldrb	r3, [r1, r3]
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	4a09      	ldr	r2, [pc, #36]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003496:	4b09      	ldr	r3, [pc, #36]	@ (80034bc <HAL_RCC_ClockConfig+0x1c8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd fac6 	bl	8000a2c <HAL_InitTick>

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40023c00 	.word	0x40023c00
 80034b0:	40023800 	.word	0x40023800
 80034b4:	0800bb34 	.word	0x0800bb34
 80034b8:	20000000 	.word	0x20000000
 80034bc:	20000004 	.word	0x20000004

080034c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c4:	4b03      	ldr	r3, [pc, #12]	@ (80034d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c6:	681b      	ldr	r3, [r3, #0]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000000 	.word	0x20000000

080034d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034dc:	f7ff fff0 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 80034e0:	4602      	mov	r2, r0
 80034e2:	4b05      	ldr	r3, [pc, #20]	@ (80034f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	0a9b      	lsrs	r3, r3, #10
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	4903      	ldr	r1, [pc, #12]	@ (80034fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ee:	5ccb      	ldrb	r3, [r1, r3]
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40023800 	.word	0x40023800
 80034fc:	0800bb44 	.word	0x0800bb44

08003500 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	220f      	movs	r2, #15
 800350e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003510:	4b12      	ldr	r3, [pc, #72]	@ (800355c <HAL_RCC_GetClockConfig+0x5c>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0203 	and.w	r2, r3, #3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800351c:	4b0f      	ldr	r3, [pc, #60]	@ (800355c <HAL_RCC_GetClockConfig+0x5c>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003528:	4b0c      	ldr	r3, [pc, #48]	@ (800355c <HAL_RCC_GetClockConfig+0x5c>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003534:	4b09      	ldr	r3, [pc, #36]	@ (800355c <HAL_RCC_GetClockConfig+0x5c>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	08db      	lsrs	r3, r3, #3
 800353a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003542:	4b07      	ldr	r3, [pc, #28]	@ (8003560 <HAL_RCC_GetClockConfig+0x60>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 020f 	and.w	r2, r3, #15
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	601a      	str	r2, [r3, #0]
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	40023c00 	.word	0x40023c00

08003564 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08c      	sub	sp, #48	@ 0x30
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d010      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800359c:	4b6f      	ldr	r3, [pc, #444]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800359e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035a2:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035aa:	496c      	ldr	r1, [pc, #432]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80035ba:	2301      	movs	r3, #1
 80035bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d010      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80035ca:	4b64      	ldr	r3, [pc, #400]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035d0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d8:	4960      	ldr	r1, [pc, #384]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80035e8:	2301      	movs	r3, #1
 80035ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d017      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035f8:	4b58      	ldr	r3, [pc, #352]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003606:	4955      	ldr	r1, [pc, #340]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003616:	d101      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003618:	2301      	movs	r3, #1
 800361a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003624:	2301      	movs	r3, #1
 8003626:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b00      	cmp	r3, #0
 8003632:	d017      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003634:	4b49      	ldr	r3, [pc, #292]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003636:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800363a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003642:	4946      	ldr	r1, [pc, #280]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800364e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003652:	d101      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003654:	2301      	movs	r3, #1
 8003656:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003660:	2301      	movs	r3, #1
 8003662:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 808a 	beq.w	8003786 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	4b39      	ldr	r3, [pc, #228]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	4a38      	ldr	r2, [pc, #224]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800367c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003680:	6413      	str	r3, [r2, #64]	@ 0x40
 8003682:	4b36      	ldr	r3, [pc, #216]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800368e:	4b34      	ldr	r3, [pc, #208]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a33      	ldr	r2, [pc, #204]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003698:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800369a:	f7fd fb6f 	bl	8000d7c <HAL_GetTick>
 800369e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80036a0:	e008      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a2:	f7fd fb6b 	bl	8000d7c <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e278      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80036b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036c0:	4b26      	ldr	r3, [pc, #152]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036c8:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d02f      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036d8:	6a3a      	ldr	r2, [r7, #32]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d028      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036de:	4b1f      	ldr	r3, [pc, #124]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036e6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80036f4:	4a19      	ldr	r2, [pc, #100]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036fa:	4b18      	ldr	r3, [pc, #96]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b01      	cmp	r3, #1
 8003704:	d114      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003706:	f7fd fb39 	bl	8000d7c <HAL_GetTick>
 800370a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370c:	e00a      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370e:	f7fd fb35 	bl	8000d7c <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800371c:	4293      	cmp	r3, r2
 800371e:	d901      	bls.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e240      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003724:	4b0d      	ldr	r3, [pc, #52]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0ee      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003738:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800373c:	d114      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800373e:	4b07      	ldr	r3, [pc, #28]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800374e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003752:	4902      	ldr	r1, [pc, #8]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003754:	4313      	orrs	r3, r2
 8003756:	608b      	str	r3, [r1, #8]
 8003758:	e00c      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800375a:	bf00      	nop
 800375c:	40023800 	.word	0x40023800
 8003760:	40007000 	.word	0x40007000
 8003764:	42470e40 	.word	0x42470e40
 8003768:	4b4a      	ldr	r3, [pc, #296]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a49      	ldr	r2, [pc, #292]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800376e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003772:	6093      	str	r3, [r2, #8]
 8003774:	4b47      	ldr	r3, [pc, #284]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003776:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003780:	4944      	ldr	r1, [pc, #272]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003782:	4313      	orrs	r3, r2
 8003784:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	2b00      	cmp	r3, #0
 8003790:	d004      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003798:	4b3f      	ldr	r3, [pc, #252]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800379a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80037a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b6:	4937      	ldr	r1, [pc, #220]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037ca:	4b32      	ldr	r3, [pc, #200]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037d0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d8:	492e      	ldr	r1, [pc, #184]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d011      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80037ec:	4b29      	ldr	r3, [pc, #164]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037f2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fa:	4926      	ldr	r1, [pc, #152]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003806:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800380a:	d101      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800380c:	2301      	movs	r3, #1
 800380e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800381c:	4b1d      	ldr	r3, [pc, #116]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800381e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003822:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382a:	491a      	ldr	r1, [pc, #104]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800383a:	2b00      	cmp	r3, #0
 800383c:	d011      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800383e:	4b15      	ldr	r3, [pc, #84]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003840:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003844:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800384c:	4911      	ldr	r1, [pc, #68]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800385c:	d101      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800385e:	2301      	movs	r3, #1
 8003860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003864:	2b01      	cmp	r3, #1
 8003866:	d005      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003870:	f040 80ff 	bne.w	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003874:	4b09      	ldr	r3, [pc, #36]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800387a:	f7fd fa7f 	bl	8000d7c <HAL_GetTick>
 800387e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003880:	e00e      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003882:	f7fd fa7b 	bl	8000d7c <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d907      	bls.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e188      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003894:	40023800 	.word	0x40023800
 8003898:	424711e0 	.word	0x424711e0
 800389c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038a0:	4b7e      	ldr	r3, [pc, #504]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1ea      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d009      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d028      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d124      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80038d4:	4b71      	ldr	r3, [pc, #452]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038da:	0c1b      	lsrs	r3, r3, #16
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	3301      	adds	r3, #1
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038e6:	4b6d      	ldr	r3, [pc, #436]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ec:	0e1b      	lsrs	r3, r3, #24
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	019b      	lsls	r3, r3, #6
 80038fe:	431a      	orrs	r2, r3
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	085b      	lsrs	r3, r3, #1
 8003904:	3b01      	subs	r3, #1
 8003906:	041b      	lsls	r3, r3, #16
 8003908:	431a      	orrs	r2, r3
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	061b      	lsls	r3, r3, #24
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	071b      	lsls	r3, r3, #28
 8003916:	4961      	ldr	r1, [pc, #388]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	d004      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003932:	d00a      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800393c:	2b00      	cmp	r3, #0
 800393e:	d035      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003944:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003948:	d130      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800394a:	4b54      	ldr	r3, [pc, #336]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800394c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	3301      	adds	r3, #1
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800395c:	4b4f      	ldr	r3, [pc, #316]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800395e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003962:	0f1b      	lsrs	r3, r3, #28
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	019b      	lsls	r3, r3, #6
 8003974:	431a      	orrs	r2, r3
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	085b      	lsrs	r3, r3, #1
 800397a:	3b01      	subs	r3, #1
 800397c:	041b      	lsls	r3, r3, #16
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	061b      	lsls	r3, r3, #24
 8003986:	431a      	orrs	r2, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	071b      	lsls	r3, r3, #28
 800398c:	4943      	ldr	r1, [pc, #268]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003994:	4b41      	ldr	r3, [pc, #260]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003996:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800399a:	f023 021f 	bic.w	r2, r3, #31
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a2:	3b01      	subs	r3, #1
 80039a4:	493d      	ldr	r1, [pc, #244]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d029      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039c0:	d124      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80039c2:	4b36      	ldr	r3, [pc, #216]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039c8:	0c1b      	lsrs	r3, r3, #16
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	3301      	adds	r3, #1
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039d4:	4b31      	ldr	r3, [pc, #196]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039da:	0f1b      	lsrs	r3, r3, #28
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	019b      	lsls	r3, r3, #6
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	085b      	lsrs	r3, r3, #1
 80039f4:	3b01      	subs	r3, #1
 80039f6:	041b      	lsls	r3, r3, #16
 80039f8:	431a      	orrs	r2, r3
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	061b      	lsls	r3, r3, #24
 80039fe:	431a      	orrs	r2, r3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	071b      	lsls	r3, r3, #28
 8003a04:	4925      	ldr	r1, [pc, #148]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d016      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	019b      	lsls	r3, r3, #6
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	085b      	lsrs	r3, r3, #1
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	061b      	lsls	r3, r3, #24
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	071b      	lsls	r3, r3, #28
 8003a3e:	4917      	ldr	r1, [pc, #92]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a46:	4b16      	ldr	r3, [pc, #88]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a4c:	f7fd f996 	bl	8000d7c <HAL_GetTick>
 8003a50:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a54:	f7fd f992 	bl	8000d7c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e09f      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a66:	4b0d      	ldr	r3, [pc, #52]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	f040 8095 	bne.w	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a80:	f7fd f97c 	bl	8000d7c <HAL_GetTick>
 8003a84:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a86:	e00f      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a88:	f7fd f978 	bl	8000d7c <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d908      	bls.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e085      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	42470068 	.word	0x42470068
 8003aa4:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003aa8:	4b41      	ldr	r3, [pc, #260]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ab4:	d0e8      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d02b      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d127      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003ade:	4b34      	ldr	r3, [pc, #208]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae4:	0c1b      	lsrs	r3, r3, #16
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	3301      	adds	r3, #1
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699a      	ldr	r2, [r3, #24]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	019b      	lsls	r3, r3, #6
 8003afa:	431a      	orrs	r2, r3
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	085b      	lsrs	r3, r3, #1
 8003b00:	3b01      	subs	r3, #1
 8003b02:	041b      	lsls	r3, r3, #16
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	061b      	lsls	r3, r3, #24
 8003b0c:	4928      	ldr	r1, [pc, #160]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b14:	4b26      	ldr	r3, [pc, #152]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b1a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b22:	3b01      	subs	r3, #1
 8003b24:	021b      	lsls	r3, r3, #8
 8003b26:	4922      	ldr	r1, [pc, #136]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d01d      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b42:	d118      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b44:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4a:	0e1b      	lsrs	r3, r3, #24
 8003b4c:	f003 030f 	and.w	r3, r3, #15
 8003b50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	019b      	lsls	r3, r3, #6
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	085b      	lsrs	r3, r3, #1
 8003b64:	3b01      	subs	r3, #1
 8003b66:	041b      	lsls	r3, r3, #16
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	061b      	lsls	r3, r3, #24
 8003b6e:	4910      	ldr	r1, [pc, #64]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b76:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b7c:	f7fd f8fe 	bl	8000d7c <HAL_GetTick>
 8003b80:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b84:	f7fd f8fa 	bl	8000d7c <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e007      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b96:	4b06      	ldr	r3, [pc, #24]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ba2:	d1ef      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3730      	adds	r7, #48	@ 0x30
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	42470070 	.word	0x42470070

08003bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bbc:	b0ae      	sub	sp, #184	@ 0xb8
 8003bbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bde:	4bcb      	ldr	r3, [pc, #812]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	2b0c      	cmp	r3, #12
 8003be8:	f200 8206 	bhi.w	8003ff8 <HAL_RCC_GetSysClockFreq+0x440>
 8003bec:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf2:	bf00      	nop
 8003bf4:	08003c29 	.word	0x08003c29
 8003bf8:	08003ff9 	.word	0x08003ff9
 8003bfc:	08003ff9 	.word	0x08003ff9
 8003c00:	08003ff9 	.word	0x08003ff9
 8003c04:	08003c31 	.word	0x08003c31
 8003c08:	08003ff9 	.word	0x08003ff9
 8003c0c:	08003ff9 	.word	0x08003ff9
 8003c10:	08003ff9 	.word	0x08003ff9
 8003c14:	08003c39 	.word	0x08003c39
 8003c18:	08003ff9 	.word	0x08003ff9
 8003c1c:	08003ff9 	.word	0x08003ff9
 8003c20:	08003ff9 	.word	0x08003ff9
 8003c24:	08003e29 	.word	0x08003e29
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c28:	4bb9      	ldr	r3, [pc, #740]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c2e:	e1e7      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c30:	4bb8      	ldr	r3, [pc, #736]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c36:	e1e3      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c38:	4bb4      	ldr	r3, [pc, #720]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c44:	4bb1      	ldr	r3, [pc, #708]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d071      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c50:	4bae      	ldr	r3, [pc, #696]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	099b      	lsrs	r3, r3, #6
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c5c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c76:	4622      	mov	r2, r4
 8003c78:	462b      	mov	r3, r5
 8003c7a:	f04f 0000 	mov.w	r0, #0
 8003c7e:	f04f 0100 	mov.w	r1, #0
 8003c82:	0159      	lsls	r1, r3, #5
 8003c84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c88:	0150      	lsls	r0, r2, #5
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4621      	mov	r1, r4
 8003c90:	1a51      	subs	r1, r2, r1
 8003c92:	6439      	str	r1, [r7, #64]	@ 0x40
 8003c94:	4629      	mov	r1, r5
 8003c96:	eb63 0301 	sbc.w	r3, r3, r1
 8003c9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003ca8:	4649      	mov	r1, r9
 8003caa:	018b      	lsls	r3, r1, #6
 8003cac:	4641      	mov	r1, r8
 8003cae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cb2:	4641      	mov	r1, r8
 8003cb4:	018a      	lsls	r2, r1, #6
 8003cb6:	4641      	mov	r1, r8
 8003cb8:	1a51      	subs	r1, r2, r1
 8003cba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003cbc:	4649      	mov	r1, r9
 8003cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003cd0:	4649      	mov	r1, r9
 8003cd2:	00cb      	lsls	r3, r1, #3
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cda:	4641      	mov	r1, r8
 8003cdc:	00ca      	lsls	r2, r1, #3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	4622      	mov	r2, r4
 8003ce6:	189b      	adds	r3, r3, r2
 8003ce8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cea:	462b      	mov	r3, r5
 8003cec:	460a      	mov	r2, r1
 8003cee:	eb42 0303 	adc.w	r3, r2, r3
 8003cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d00:	4629      	mov	r1, r5
 8003d02:	024b      	lsls	r3, r1, #9
 8003d04:	4621      	mov	r1, r4
 8003d06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	024a      	lsls	r2, r1, #9
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d20:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003d24:	f7fc fa74 	bl	8000210 <__aeabi_uldivmod>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d32:	e067      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d34:	4b75      	ldr	r3, [pc, #468]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	099b      	lsrs	r3, r3, #6
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d40:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d4e:	2300      	movs	r3, #0
 8003d50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d52:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003d56:	4622      	mov	r2, r4
 8003d58:	462b      	mov	r3, r5
 8003d5a:	f04f 0000 	mov.w	r0, #0
 8003d5e:	f04f 0100 	mov.w	r1, #0
 8003d62:	0159      	lsls	r1, r3, #5
 8003d64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d68:	0150      	lsls	r0, r2, #5
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4621      	mov	r1, r4
 8003d70:	1a51      	subs	r1, r2, r1
 8003d72:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d74:	4629      	mov	r1, r5
 8003d76:	eb63 0301 	sbc.w	r3, r3, r1
 8003d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003d88:	4649      	mov	r1, r9
 8003d8a:	018b      	lsls	r3, r1, #6
 8003d8c:	4641      	mov	r1, r8
 8003d8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d92:	4641      	mov	r1, r8
 8003d94:	018a      	lsls	r2, r1, #6
 8003d96:	4641      	mov	r1, r8
 8003d98:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003db2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003db6:	4692      	mov	sl, r2
 8003db8:	469b      	mov	fp, r3
 8003dba:	4623      	mov	r3, r4
 8003dbc:	eb1a 0303 	adds.w	r3, sl, r3
 8003dc0:	623b      	str	r3, [r7, #32]
 8003dc2:	462b      	mov	r3, r5
 8003dc4:	eb4b 0303 	adc.w	r3, fp, r3
 8003dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003dd6:	4629      	mov	r1, r5
 8003dd8:	028b      	lsls	r3, r1, #10
 8003dda:	4621      	mov	r1, r4
 8003ddc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003de0:	4621      	mov	r1, r4
 8003de2:	028a      	lsls	r2, r1, #10
 8003de4:	4610      	mov	r0, r2
 8003de6:	4619      	mov	r1, r3
 8003de8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dec:	2200      	movs	r2, #0
 8003dee:	673b      	str	r3, [r7, #112]	@ 0x70
 8003df0:	677a      	str	r2, [r7, #116]	@ 0x74
 8003df2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003df6:	f7fc fa0b 	bl	8000210 <__aeabi_uldivmod>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4613      	mov	r3, r2
 8003e00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e04:	4b41      	ldr	r3, [pc, #260]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003e16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e26:	e0eb      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e28:	4b38      	ldr	r3, [pc, #224]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e34:	4b35      	ldr	r3, [pc, #212]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d06b      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e40:	4b32      	ldr	r3, [pc, #200]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	099b      	lsrs	r3, r3, #6
 8003e46:	2200      	movs	r2, #0
 8003e48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e52:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e54:	2300      	movs	r3, #0
 8003e56:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e58:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003e5c:	4622      	mov	r2, r4
 8003e5e:	462b      	mov	r3, r5
 8003e60:	f04f 0000 	mov.w	r0, #0
 8003e64:	f04f 0100 	mov.w	r1, #0
 8003e68:	0159      	lsls	r1, r3, #5
 8003e6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e6e:	0150      	lsls	r0, r2, #5
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4621      	mov	r1, r4
 8003e76:	1a51      	subs	r1, r2, r1
 8003e78:	61b9      	str	r1, [r7, #24]
 8003e7a:	4629      	mov	r1, r5
 8003e7c:	eb63 0301 	sbc.w	r3, r3, r1
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003e8e:	4659      	mov	r1, fp
 8003e90:	018b      	lsls	r3, r1, #6
 8003e92:	4651      	mov	r1, sl
 8003e94:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e98:	4651      	mov	r1, sl
 8003e9a:	018a      	lsls	r2, r1, #6
 8003e9c:	4651      	mov	r1, sl
 8003e9e:	ebb2 0801 	subs.w	r8, r2, r1
 8003ea2:	4659      	mov	r1, fp
 8003ea4:	eb63 0901 	sbc.w	r9, r3, r1
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eb4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eb8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ebc:	4690      	mov	r8, r2
 8003ebe:	4699      	mov	r9, r3
 8003ec0:	4623      	mov	r3, r4
 8003ec2:	eb18 0303 	adds.w	r3, r8, r3
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	462b      	mov	r3, r5
 8003eca:	eb49 0303 	adc.w	r3, r9, r3
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003edc:	4629      	mov	r1, r5
 8003ede:	024b      	lsls	r3, r1, #9
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	024a      	lsls	r2, r1, #9
 8003eea:	4610      	mov	r0, r2
 8003eec:	4619      	mov	r1, r3
 8003eee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ef6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ef8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003efc:	f7fc f988 	bl	8000210 <__aeabi_uldivmod>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4613      	mov	r3, r2
 8003f06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f0a:	e065      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x420>
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	00f42400 	.word	0x00f42400
 8003f14:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f18:	4b3d      	ldr	r3, [pc, #244]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	099b      	lsrs	r3, r3, #6
 8003f1e:	2200      	movs	r2, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	4611      	mov	r1, r2
 8003f24:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f28:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f2e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003f32:	4642      	mov	r2, r8
 8003f34:	464b      	mov	r3, r9
 8003f36:	f04f 0000 	mov.w	r0, #0
 8003f3a:	f04f 0100 	mov.w	r1, #0
 8003f3e:	0159      	lsls	r1, r3, #5
 8003f40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f44:	0150      	lsls	r0, r2, #5
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4641      	mov	r1, r8
 8003f4c:	1a51      	subs	r1, r2, r1
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	4649      	mov	r1, r9
 8003f52:	eb63 0301 	sbc.w	r3, r3, r1
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f64:	4659      	mov	r1, fp
 8003f66:	018b      	lsls	r3, r1, #6
 8003f68:	4651      	mov	r1, sl
 8003f6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f6e:	4651      	mov	r1, sl
 8003f70:	018a      	lsls	r2, r1, #6
 8003f72:	4651      	mov	r1, sl
 8003f74:	1a54      	subs	r4, r2, r1
 8003f76:	4659      	mov	r1, fp
 8003f78:	eb63 0501 	sbc.w	r5, r3, r1
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	00eb      	lsls	r3, r5, #3
 8003f86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f8a:	00e2      	lsls	r2, r4, #3
 8003f8c:	4614      	mov	r4, r2
 8003f8e:	461d      	mov	r5, r3
 8003f90:	4643      	mov	r3, r8
 8003f92:	18e3      	adds	r3, r4, r3
 8003f94:	603b      	str	r3, [r7, #0]
 8003f96:	464b      	mov	r3, r9
 8003f98:	eb45 0303 	adc.w	r3, r5, r3
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003faa:	4629      	mov	r1, r5
 8003fac:	028b      	lsls	r3, r1, #10
 8003fae:	4621      	mov	r1, r4
 8003fb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	028a      	lsls	r2, r1, #10
 8003fb8:	4610      	mov	r0, r2
 8003fba:	4619      	mov	r1, r3
 8003fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fc4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003fc6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003fca:	f7fc f921 	bl	8000210 <__aeabi_uldivmod>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x458>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	0f1b      	lsrs	r3, r3, #28
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003fe6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ff6:	e003      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ff8:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ffe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004000:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004004:	4618      	mov	r0, r3
 8004006:	37b8      	adds	r7, #184	@ 0xb8
 8004008:	46bd      	mov	sp, r7
 800400a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800
 8004014:	00f42400 	.word	0x00f42400

08004018 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e28d      	b.n	8004546 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 8083 	beq.w	800413e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004038:	4b94      	ldr	r3, [pc, #592]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 030c 	and.w	r3, r3, #12
 8004040:	2b04      	cmp	r3, #4
 8004042:	d019      	beq.n	8004078 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004044:	4b91      	ldr	r3, [pc, #580]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 030c 	and.w	r3, r3, #12
        || \
 800404c:	2b08      	cmp	r3, #8
 800404e:	d106      	bne.n	800405e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004050:	4b8e      	ldr	r3, [pc, #568]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004058:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800405c:	d00c      	beq.n	8004078 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800405e:	4b8b      	ldr	r3, [pc, #556]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004066:	2b0c      	cmp	r3, #12
 8004068:	d112      	bne.n	8004090 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800406a:	4b88      	ldr	r3, [pc, #544]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004072:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004076:	d10b      	bne.n	8004090 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004078:	4b84      	ldr	r3, [pc, #528]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d05b      	beq.n	800413c <HAL_RCC_OscConfig+0x124>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d157      	bne.n	800413c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e25a      	b.n	8004546 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004098:	d106      	bne.n	80040a8 <HAL_RCC_OscConfig+0x90>
 800409a:	4b7c      	ldr	r3, [pc, #496]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a7b      	ldr	r2, [pc, #492]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 80040a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	e01d      	b.n	80040e4 <HAL_RCC_OscConfig+0xcc>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040b0:	d10c      	bne.n	80040cc <HAL_RCC_OscConfig+0xb4>
 80040b2:	4b76      	ldr	r3, [pc, #472]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a75      	ldr	r2, [pc, #468]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 80040b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	4b73      	ldr	r3, [pc, #460]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a72      	ldr	r2, [pc, #456]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 80040c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	e00b      	b.n	80040e4 <HAL_RCC_OscConfig+0xcc>
 80040cc:	4b6f      	ldr	r3, [pc, #444]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a6e      	ldr	r2, [pc, #440]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 80040d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	4b6c      	ldr	r3, [pc, #432]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a6b      	ldr	r2, [pc, #428]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 80040de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d013      	beq.n	8004114 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fc fe46 	bl	8000d7c <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f4:	f7fc fe42 	bl	8000d7c <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b64      	cmp	r3, #100	@ 0x64
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e21f      	b.n	8004546 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004106:	4b61      	ldr	r3, [pc, #388]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0xdc>
 8004112:	e014      	b.n	800413e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7fc fe32 	bl	8000d7c <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800411c:	f7fc fe2e 	bl	8000d7c <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b64      	cmp	r3, #100	@ 0x64
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e20b      	b.n	8004546 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412e:	4b57      	ldr	r3, [pc, #348]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f0      	bne.n	800411c <HAL_RCC_OscConfig+0x104>
 800413a:	e000      	b.n	800413e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d06f      	beq.n	800422a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800414a:	4b50      	ldr	r3, [pc, #320]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
 8004152:	2b00      	cmp	r3, #0
 8004154:	d017      	beq.n	8004186 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004156:	4b4d      	ldr	r3, [pc, #308]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
        || \
 800415e:	2b08      	cmp	r3, #8
 8004160:	d105      	bne.n	800416e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004162:	4b4a      	ldr	r3, [pc, #296]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800416e:	4b47      	ldr	r3, [pc, #284]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004176:	2b0c      	cmp	r3, #12
 8004178:	d11c      	bne.n	80041b4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800417a:	4b44      	ldr	r3, [pc, #272]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d116      	bne.n	80041b4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004186:	4b41      	ldr	r3, [pc, #260]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <HAL_RCC_OscConfig+0x186>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d001      	beq.n	800419e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e1d3      	b.n	8004546 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419e:	4b3b      	ldr	r3, [pc, #236]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4937      	ldr	r1, [pc, #220]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b2:	e03a      	b.n	800422a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d020      	beq.n	80041fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041bc:	4b34      	ldr	r3, [pc, #208]	@ (8004290 <HAL_RCC_OscConfig+0x278>)
 80041be:	2201      	movs	r2, #1
 80041c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c2:	f7fc fddb 	bl	8000d7c <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ca:	f7fc fdd7 	bl	8000d7c <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e1b4      	b.n	8004546 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041dc:	4b2b      	ldr	r3, [pc, #172]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f0      	beq.n	80041ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e8:	4b28      	ldr	r3, [pc, #160]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4925      	ldr	r1, [pc, #148]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	600b      	str	r3, [r1, #0]
 80041fc:	e015      	b.n	800422a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041fe:	4b24      	ldr	r3, [pc, #144]	@ (8004290 <HAL_RCC_OscConfig+0x278>)
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7fc fdba 	bl	8000d7c <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800420c:	f7fc fdb6 	bl	8000d7c <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e193      	b.n	8004546 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421e:	4b1b      	ldr	r3, [pc, #108]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d036      	beq.n	80042a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d016      	beq.n	800426c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800423e:	4b15      	ldr	r3, [pc, #84]	@ (8004294 <HAL_RCC_OscConfig+0x27c>)
 8004240:	2201      	movs	r2, #1
 8004242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004244:	f7fc fd9a 	bl	8000d7c <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800424c:	f7fc fd96 	bl	8000d7c <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e173      	b.n	8004546 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425e:	4b0b      	ldr	r3, [pc, #44]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 8004260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0f0      	beq.n	800424c <HAL_RCC_OscConfig+0x234>
 800426a:	e01b      	b.n	80042a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800426c:	4b09      	ldr	r3, [pc, #36]	@ (8004294 <HAL_RCC_OscConfig+0x27c>)
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004272:	f7fc fd83 	bl	8000d7c <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004278:	e00e      	b.n	8004298 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427a:	f7fc fd7f 	bl	8000d7c <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d907      	bls.n	8004298 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e15c      	b.n	8004546 <HAL_RCC_OscConfig+0x52e>
 800428c:	40023800 	.word	0x40023800
 8004290:	42470000 	.word	0x42470000
 8004294:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004298:	4b8a      	ldr	r3, [pc, #552]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 800429a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1ea      	bne.n	800427a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8097 	beq.w	80043e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042b2:	2300      	movs	r3, #0
 80042b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b6:	4b83      	ldr	r3, [pc, #524]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10f      	bne.n	80042e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c2:	2300      	movs	r3, #0
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	4b7f      	ldr	r3, [pc, #508]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	4a7e      	ldr	r2, [pc, #504]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 80042cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80042d2:	4b7c      	ldr	r3, [pc, #496]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042da:	60bb      	str	r3, [r7, #8]
 80042dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042de:	2301      	movs	r3, #1
 80042e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e2:	4b79      	ldr	r3, [pc, #484]	@ (80044c8 <HAL_RCC_OscConfig+0x4b0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d118      	bne.n	8004320 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ee:	4b76      	ldr	r3, [pc, #472]	@ (80044c8 <HAL_RCC_OscConfig+0x4b0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a75      	ldr	r2, [pc, #468]	@ (80044c8 <HAL_RCC_OscConfig+0x4b0>)
 80042f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042fa:	f7fc fd3f 	bl	8000d7c <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004302:	f7fc fd3b 	bl	8000d7c <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e118      	b.n	8004546 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004314:	4b6c      	ldr	r3, [pc, #432]	@ (80044c8 <HAL_RCC_OscConfig+0x4b0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0f0      	beq.n	8004302 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d106      	bne.n	8004336 <HAL_RCC_OscConfig+0x31e>
 8004328:	4b66      	ldr	r3, [pc, #408]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 800432a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432c:	4a65      	ldr	r2, [pc, #404]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 800432e:	f043 0301 	orr.w	r3, r3, #1
 8004332:	6713      	str	r3, [r2, #112]	@ 0x70
 8004334:	e01c      	b.n	8004370 <HAL_RCC_OscConfig+0x358>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b05      	cmp	r3, #5
 800433c:	d10c      	bne.n	8004358 <HAL_RCC_OscConfig+0x340>
 800433e:	4b61      	ldr	r3, [pc, #388]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004342:	4a60      	ldr	r2, [pc, #384]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 8004344:	f043 0304 	orr.w	r3, r3, #4
 8004348:	6713      	str	r3, [r2, #112]	@ 0x70
 800434a:	4b5e      	ldr	r3, [pc, #376]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434e:	4a5d      	ldr	r2, [pc, #372]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 8004350:	f043 0301 	orr.w	r3, r3, #1
 8004354:	6713      	str	r3, [r2, #112]	@ 0x70
 8004356:	e00b      	b.n	8004370 <HAL_RCC_OscConfig+0x358>
 8004358:	4b5a      	ldr	r3, [pc, #360]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 800435a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800435c:	4a59      	ldr	r2, [pc, #356]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 800435e:	f023 0301 	bic.w	r3, r3, #1
 8004362:	6713      	str	r3, [r2, #112]	@ 0x70
 8004364:	4b57      	ldr	r3, [pc, #348]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 8004366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004368:	4a56      	ldr	r2, [pc, #344]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 800436a:	f023 0304 	bic.w	r3, r3, #4
 800436e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d015      	beq.n	80043a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004378:	f7fc fd00 	bl	8000d7c <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437e:	e00a      	b.n	8004396 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004380:	f7fc fcfc 	bl	8000d7c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800438e:	4293      	cmp	r3, r2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e0d7      	b.n	8004546 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004396:	4b4b      	ldr	r3, [pc, #300]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0ee      	beq.n	8004380 <HAL_RCC_OscConfig+0x368>
 80043a2:	e014      	b.n	80043ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a4:	f7fc fcea 	bl	8000d7c <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043aa:	e00a      	b.n	80043c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ac:	f7fc fce6 	bl	8000d7c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e0c1      	b.n	8004546 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c2:	4b40      	ldr	r3, [pc, #256]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1ee      	bne.n	80043ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043ce:	7dfb      	ldrb	r3, [r7, #23]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d105      	bne.n	80043e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d4:	4b3b      	ldr	r3, [pc, #236]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	4a3a      	ldr	r2, [pc, #232]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 80043da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80ad 	beq.w	8004544 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043ea:	4b36      	ldr	r3, [pc, #216]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 030c 	and.w	r3, r3, #12
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d060      	beq.n	80044b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d145      	bne.n	800448a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fe:	4b33      	ldr	r3, [pc, #204]	@ (80044cc <HAL_RCC_OscConfig+0x4b4>)
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fc fcba 	bl	8000d7c <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440c:	f7fc fcb6 	bl	8000d7c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e093      	b.n	8004546 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441e:	4b29      	ldr	r3, [pc, #164]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004438:	019b      	lsls	r3, r3, #6
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004440:	085b      	lsrs	r3, r3, #1
 8004442:	3b01      	subs	r3, #1
 8004444:	041b      	lsls	r3, r3, #16
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444c:	061b      	lsls	r3, r3, #24
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	071b      	lsls	r3, r3, #28
 8004456:	491b      	ldr	r1, [pc, #108]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 8004458:	4313      	orrs	r3, r2
 800445a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800445c:	4b1b      	ldr	r3, [pc, #108]	@ (80044cc <HAL_RCC_OscConfig+0x4b4>)
 800445e:	2201      	movs	r2, #1
 8004460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004462:	f7fc fc8b 	bl	8000d7c <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446a:	f7fc fc87 	bl	8000d7c <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e064      	b.n	8004546 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800447c:	4b11      	ldr	r3, [pc, #68]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0f0      	beq.n	800446a <HAL_RCC_OscConfig+0x452>
 8004488:	e05c      	b.n	8004544 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800448a:	4b10      	ldr	r3, [pc, #64]	@ (80044cc <HAL_RCC_OscConfig+0x4b4>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004490:	f7fc fc74 	bl	8000d7c <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004498:	f7fc fc70 	bl	8000d7c <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e04d      	b.n	8004546 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044aa:	4b06      	ldr	r3, [pc, #24]	@ (80044c4 <HAL_RCC_OscConfig+0x4ac>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x480>
 80044b6:	e045      	b.n	8004544 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d107      	bne.n	80044d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e040      	b.n	8004546 <HAL_RCC_OscConfig+0x52e>
 80044c4:	40023800 	.word	0x40023800
 80044c8:	40007000 	.word	0x40007000
 80044cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004550 <HAL_RCC_OscConfig+0x538>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d030      	beq.n	8004540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d129      	bne.n	8004540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d122      	bne.n	8004540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004500:	4013      	ands	r3, r2
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004506:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004508:	4293      	cmp	r3, r2
 800450a:	d119      	bne.n	8004540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004516:	085b      	lsrs	r3, r3, #1
 8004518:	3b01      	subs	r3, #1
 800451a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800451c:	429a      	cmp	r2, r3
 800451e:	d10f      	bne.n	8004540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800452c:	429a      	cmp	r2, r3
 800452e:	d107      	bne.n	8004540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800453c:	429a      	cmp	r2, r3
 800453e:	d001      	beq.n	8004544 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40023800 	.word	0x40023800

08004554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e041      	b.n	80045ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f839 	bl	80045f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	4619      	mov	r1, r3
 8004592:	4610      	mov	r0, r2
 8004594:	f000 f9c0 	bl	8004918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	d001      	beq.n	8004620 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e04e      	b.n	80046be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a23      	ldr	r2, [pc, #140]	@ (80046cc <HAL_TIM_Base_Start_IT+0xc4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d022      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800464a:	d01d      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1f      	ldr	r2, [pc, #124]	@ (80046d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d018      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1e      	ldr	r2, [pc, #120]	@ (80046d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d013      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1c      	ldr	r2, [pc, #112]	@ (80046d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00e      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1b      	ldr	r2, [pc, #108]	@ (80046dc <HAL_TIM_Base_Start_IT+0xd4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d009      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a19      	ldr	r2, [pc, #100]	@ (80046e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a18      	ldr	r2, [pc, #96]	@ (80046e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d111      	bne.n	80046ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b06      	cmp	r3, #6
 8004698:	d010      	beq.n	80046bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f042 0201 	orr.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046aa:	e007      	b.n	80046bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40000800 	.word	0x40000800
 80046d8:	40000c00 	.word	0x40000c00
 80046dc:	40010400 	.word	0x40010400
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40001800 	.word	0x40001800

080046e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d020      	beq.n	800474c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01b      	beq.n	800474c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0202 	mvn.w	r2, #2
 800471c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f8d2 	bl	80048dc <HAL_TIM_IC_CaptureCallback>
 8004738:	e005      	b.n	8004746 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8c4 	bl	80048c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f8d5 	bl	80048f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	2b00      	cmp	r3, #0
 8004754:	d020      	beq.n	8004798 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01b      	beq.n	8004798 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0204 	mvn.w	r2, #4
 8004768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2202      	movs	r2, #2
 800476e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f8ac 	bl	80048dc <HAL_TIM_IC_CaptureCallback>
 8004784:	e005      	b.n	8004792 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f89e 	bl	80048c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f8af 	bl	80048f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d020      	beq.n	80047e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d01b      	beq.n	80047e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f06f 0208 	mvn.w	r2, #8
 80047b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2204      	movs	r2, #4
 80047ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f886 	bl	80048dc <HAL_TIM_IC_CaptureCallback>
 80047d0:	e005      	b.n	80047de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f878 	bl	80048c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f889 	bl	80048f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f003 0310 	and.w	r3, r3, #16
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d020      	beq.n	8004830 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01b      	beq.n	8004830 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0210 	mvn.w	r2, #16
 8004800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2208      	movs	r2, #8
 8004806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f860 	bl	80048dc <HAL_TIM_IC_CaptureCallback>
 800481c:	e005      	b.n	800482a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f852 	bl	80048c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f863 	bl	80048f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00c      	beq.n	8004854 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d007      	beq.n	8004854 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0201 	mvn.w	r2, #1
 800484c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fc f8aa 	bl	80009a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00c      	beq.n	8004878 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f900 	bl	8004a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00c      	beq.n	800489c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f834 	bl	8004904 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00c      	beq.n	80048c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0220 	mvn.w	r2, #32
 80048b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f8d2 	bl	8004a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048c0:	bf00      	nop
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a43      	ldr	r2, [pc, #268]	@ (8004a38 <TIM_Base_SetConfig+0x120>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d013      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004936:	d00f      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a40      	ldr	r2, [pc, #256]	@ (8004a3c <TIM_Base_SetConfig+0x124>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00b      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a3f      	ldr	r2, [pc, #252]	@ (8004a40 <TIM_Base_SetConfig+0x128>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d007      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a3e      	ldr	r2, [pc, #248]	@ (8004a44 <TIM_Base_SetConfig+0x12c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d003      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a3d      	ldr	r2, [pc, #244]	@ (8004a48 <TIM_Base_SetConfig+0x130>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d108      	bne.n	800496a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800495e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a32      	ldr	r2, [pc, #200]	@ (8004a38 <TIM_Base_SetConfig+0x120>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d02b      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004978:	d027      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a2f      	ldr	r2, [pc, #188]	@ (8004a3c <TIM_Base_SetConfig+0x124>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d023      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a2e      	ldr	r2, [pc, #184]	@ (8004a40 <TIM_Base_SetConfig+0x128>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d01f      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a2d      	ldr	r2, [pc, #180]	@ (8004a44 <TIM_Base_SetConfig+0x12c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d01b      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a2c      	ldr	r2, [pc, #176]	@ (8004a48 <TIM_Base_SetConfig+0x130>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d017      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a2b      	ldr	r2, [pc, #172]	@ (8004a4c <TIM_Base_SetConfig+0x134>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d013      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a2a      	ldr	r2, [pc, #168]	@ (8004a50 <TIM_Base_SetConfig+0x138>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00f      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a29      	ldr	r2, [pc, #164]	@ (8004a54 <TIM_Base_SetConfig+0x13c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00b      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a28      	ldr	r2, [pc, #160]	@ (8004a58 <TIM_Base_SetConfig+0x140>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d007      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a27      	ldr	r2, [pc, #156]	@ (8004a5c <TIM_Base_SetConfig+0x144>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d003      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a26      	ldr	r2, [pc, #152]	@ (8004a60 <TIM_Base_SetConfig+0x148>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d108      	bne.n	80049dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a0e      	ldr	r2, [pc, #56]	@ (8004a38 <TIM_Base_SetConfig+0x120>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d003      	beq.n	8004a0a <TIM_Base_SetConfig+0xf2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a10      	ldr	r2, [pc, #64]	@ (8004a48 <TIM_Base_SetConfig+0x130>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d103      	bne.n	8004a12 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f043 0204 	orr.w	r2, r3, #4
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	601a      	str	r2, [r3, #0]
}
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40010000 	.word	0x40010000
 8004a3c:	40000400 	.word	0x40000400
 8004a40:	40000800 	.word	0x40000800
 8004a44:	40000c00 	.word	0x40000c00
 8004a48:	40010400 	.word	0x40010400
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40014400 	.word	0x40014400
 8004a54:	40014800 	.word	0x40014800
 8004a58:	40001800 	.word	0x40001800
 8004a5c:	40001c00 	.word	0x40001c00
 8004a60:	40002000 	.word	0x40002000

08004a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	f107 001c 	add.w	r0, r7, #28
 8004a9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a9e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d123      	bne.n	8004aee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aaa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004aba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ace:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d105      	bne.n	8004ae2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f001 fae2 	bl	80060ac <USB_CoreReset>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	73fb      	strb	r3, [r7, #15]
 8004aec:	e01b      	b.n	8004b26 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f001 fad6 	bl	80060ac <USB_CoreReset>
 8004b00:	4603      	mov	r3, r0
 8004b02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d106      	bne.n	8004b1a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b18:	e005      	b.n	8004b26 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b26:	7fbb      	ldrb	r3, [r7, #30]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d10b      	bne.n	8004b44 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f043 0206 	orr.w	r2, r3, #6
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f043 0220 	orr.w	r2, r3, #32
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b50:	b004      	add	sp, #16
 8004b52:	4770      	bx	lr

08004b54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004b62:	79fb      	ldrb	r3, [r7, #7]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d165      	bne.n	8004c34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	4a41      	ldr	r2, [pc, #260]	@ (8004c70 <USB_SetTurnaroundTime+0x11c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d906      	bls.n	8004b7e <USB_SetTurnaroundTime+0x2a>
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4a40      	ldr	r2, [pc, #256]	@ (8004c74 <USB_SetTurnaroundTime+0x120>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d202      	bcs.n	8004b7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b78:	230f      	movs	r3, #15
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	e062      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4a3c      	ldr	r2, [pc, #240]	@ (8004c74 <USB_SetTurnaroundTime+0x120>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d306      	bcc.n	8004b94 <USB_SetTurnaroundTime+0x40>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4a3b      	ldr	r2, [pc, #236]	@ (8004c78 <USB_SetTurnaroundTime+0x124>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d202      	bcs.n	8004b94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b8e:	230e      	movs	r3, #14
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	e057      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4a38      	ldr	r2, [pc, #224]	@ (8004c78 <USB_SetTurnaroundTime+0x124>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d306      	bcc.n	8004baa <USB_SetTurnaroundTime+0x56>
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4a37      	ldr	r2, [pc, #220]	@ (8004c7c <USB_SetTurnaroundTime+0x128>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d202      	bcs.n	8004baa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ba4:	230d      	movs	r3, #13
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	e04c      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4a33      	ldr	r2, [pc, #204]	@ (8004c7c <USB_SetTurnaroundTime+0x128>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d306      	bcc.n	8004bc0 <USB_SetTurnaroundTime+0x6c>
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	4a32      	ldr	r2, [pc, #200]	@ (8004c80 <USB_SetTurnaroundTime+0x12c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d802      	bhi.n	8004bc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004bba:	230c      	movs	r3, #12
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	e041      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4a2f      	ldr	r2, [pc, #188]	@ (8004c80 <USB_SetTurnaroundTime+0x12c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d906      	bls.n	8004bd6 <USB_SetTurnaroundTime+0x82>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4a2e      	ldr	r2, [pc, #184]	@ (8004c84 <USB_SetTurnaroundTime+0x130>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d802      	bhi.n	8004bd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004bd0:	230b      	movs	r3, #11
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	e036      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	4a2a      	ldr	r2, [pc, #168]	@ (8004c84 <USB_SetTurnaroundTime+0x130>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d906      	bls.n	8004bec <USB_SetTurnaroundTime+0x98>
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4a29      	ldr	r2, [pc, #164]	@ (8004c88 <USB_SetTurnaroundTime+0x134>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d802      	bhi.n	8004bec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004be6:	230a      	movs	r3, #10
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	e02b      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4a26      	ldr	r2, [pc, #152]	@ (8004c88 <USB_SetTurnaroundTime+0x134>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d906      	bls.n	8004c02 <USB_SetTurnaroundTime+0xae>
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4a25      	ldr	r2, [pc, #148]	@ (8004c8c <USB_SetTurnaroundTime+0x138>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d202      	bcs.n	8004c02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004bfc:	2309      	movs	r3, #9
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	e020      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	4a21      	ldr	r2, [pc, #132]	@ (8004c8c <USB_SetTurnaroundTime+0x138>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d306      	bcc.n	8004c18 <USB_SetTurnaroundTime+0xc4>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	4a20      	ldr	r2, [pc, #128]	@ (8004c90 <USB_SetTurnaroundTime+0x13c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d802      	bhi.n	8004c18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c12:	2308      	movs	r3, #8
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	e015      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8004c90 <USB_SetTurnaroundTime+0x13c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d906      	bls.n	8004c2e <USB_SetTurnaroundTime+0xda>
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4a1c      	ldr	r2, [pc, #112]	@ (8004c94 <USB_SetTurnaroundTime+0x140>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d202      	bcs.n	8004c2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c28:	2307      	movs	r3, #7
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	e00a      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c2e:	2306      	movs	r3, #6
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	e007      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d102      	bne.n	8004c40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004c3a:	2309      	movs	r3, #9
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	e001      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c40:	2309      	movs	r3, #9
 8004c42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	029b      	lsls	r3, r3, #10
 8004c58:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	00d8acbf 	.word	0x00d8acbf
 8004c74:	00e4e1c0 	.word	0x00e4e1c0
 8004c78:	00f42400 	.word	0x00f42400
 8004c7c:	01067380 	.word	0x01067380
 8004c80:	011a499f 	.word	0x011a499f
 8004c84:	01312cff 	.word	0x01312cff
 8004c88:	014ca43f 	.word	0x014ca43f
 8004c8c:	016e3600 	.word	0x016e3600
 8004c90:	01a6ab1f 	.word	0x01a6ab1f
 8004c94:	01e84800 	.word	0x01e84800

08004c98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f043 0201 	orr.w	r2, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f023 0201 	bic.w	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cf8:	78fb      	ldrb	r3, [r7, #3]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d115      	bne.n	8004d2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d0a:	200a      	movs	r0, #10
 8004d0c:	f7fc f842 	bl	8000d94 <HAL_Delay>
      ms += 10U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	330a      	adds	r3, #10
 8004d14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f001 f939 	bl	8005f8e <USB_GetMode>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d01e      	beq.n	8004d60 <USB_SetCurrentMode+0x84>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d26:	d9f0      	bls.n	8004d0a <USB_SetCurrentMode+0x2e>
 8004d28:	e01a      	b.n	8004d60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d115      	bne.n	8004d5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d3c:	200a      	movs	r0, #10
 8004d3e:	f7fc f829 	bl	8000d94 <HAL_Delay>
      ms += 10U;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	330a      	adds	r3, #10
 8004d46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f001 f920 	bl	8005f8e <USB_GetMode>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d005      	beq.n	8004d60 <USB_SetCurrentMode+0x84>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d58:	d9f0      	bls.n	8004d3c <USB_SetCurrentMode+0x60>
 8004d5a:	e001      	b.n	8004d60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e005      	b.n	8004d6c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2bc8      	cmp	r3, #200	@ 0xc8
 8004d64:	d101      	bne.n	8004d6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e000      	b.n	8004d6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d74:	b084      	sub	sp, #16
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b086      	sub	sp, #24
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004d82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d8e:	2300      	movs	r3, #0
 8004d90:	613b      	str	r3, [r7, #16]
 8004d92:	e009      	b.n	8004da8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	3340      	adds	r3, #64	@ 0x40
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	2200      	movs	r2, #0
 8004da0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	3301      	adds	r3, #1
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	2b0e      	cmp	r3, #14
 8004dac:	d9f2      	bls.n	8004d94 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004dae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d11c      	bne.n	8004df0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dc4:	f043 0302 	orr.w	r3, r3, #2
 8004dc8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dce:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	e005      	b.n	8004dfc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e02:	461a      	mov	r2, r3
 8004e04:	2300      	movs	r3, #0
 8004e06:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e08:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d10d      	bne.n	8004e2c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d104      	bne.n	8004e22 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e18:	2100      	movs	r1, #0
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f968 	bl	80050f0 <USB_SetDevSpeed>
 8004e20:	e008      	b.n	8004e34 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e22:	2101      	movs	r1, #1
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f963 	bl	80050f0 <USB_SetDevSpeed>
 8004e2a:	e003      	b.n	8004e34 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e2c:	2103      	movs	r1, #3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f95e 	bl	80050f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e34:	2110      	movs	r1, #16
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f8fa 	bl	8005030 <USB_FlushTxFifo>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f924 	bl	8005094 <USB_FlushRxFifo>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	2300      	movs	r3, #0
 8004e60:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e68:	461a      	mov	r2, r3
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e74:	461a      	mov	r2, r3
 8004e76:	2300      	movs	r3, #0
 8004e78:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	e043      	b.n	8004f08 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e96:	d118      	bne.n	8004eca <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e013      	b.n	8004edc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	e008      	b.n	8004edc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	2300      	movs	r3, #0
 8004eda:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ee8:	461a      	mov	r2, r3
 8004eea:	2300      	movs	r3, #0
 8004eec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004efa:	461a      	mov	r2, r3
 8004efc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	3301      	adds	r3, #1
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d3b5      	bcc.n	8004e80 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f14:	2300      	movs	r3, #0
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	e043      	b.n	8004fa2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f30:	d118      	bne.n	8004f64 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10a      	bne.n	8004f4e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f44:	461a      	mov	r2, r3
 8004f46:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	e013      	b.n	8004f76 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	e008      	b.n	8004f76 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f70:	461a      	mov	r2, r3
 8004f72:	2300      	movs	r3, #0
 8004f74:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f82:	461a      	mov	r2, r3
 8004f84:	2300      	movs	r3, #0
 8004f86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f94:	461a      	mov	r2, r3
 8004f96:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	613b      	str	r3, [r7, #16]
 8004fa2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d3b5      	bcc.n	8004f1a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fc0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004fce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004fd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d105      	bne.n	8004fe4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	f043 0210 	orr.w	r2, r3, #16
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699a      	ldr	r2, [r3, #24]
 8004fe8:	4b10      	ldr	r3, [pc, #64]	@ (800502c <USB_DevInit+0x2b8>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ff0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	f043 0208 	orr.w	r2, r3, #8
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005004:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005008:	2b01      	cmp	r3, #1
 800500a:	d107      	bne.n	800501c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005014:	f043 0304 	orr.w	r3, r3, #4
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800501c:	7dfb      	ldrb	r3, [r7, #23]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005028:	b004      	add	sp, #16
 800502a:	4770      	bx	lr
 800502c:	803c3800 	.word	0x803c3800

08005030 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3301      	adds	r3, #1
 8005042:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800504a:	d901      	bls.n	8005050 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e01b      	b.n	8005088 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	daf2      	bge.n	800503e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	019b      	lsls	r3, r3, #6
 8005060:	f043 0220 	orr.w	r2, r3, #32
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	3301      	adds	r3, #1
 800506c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005074:	d901      	bls.n	800507a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e006      	b.n	8005088 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b20      	cmp	r3, #32
 8005084:	d0f0      	beq.n	8005068 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3301      	adds	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050ac:	d901      	bls.n	80050b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e018      	b.n	80050e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	daf2      	bge.n	80050a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2210      	movs	r2, #16
 80050c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3301      	adds	r3, #1
 80050c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050d0:	d901      	bls.n	80050d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e006      	b.n	80050e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	2b10      	cmp	r3, #16
 80050e0:	d0f0      	beq.n	80050c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	68f9      	ldr	r1, [r7, #12]
 800510c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005110:	4313      	orrs	r3, r2
 8005112:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005122:	b480      	push	{r7}
 8005124:	b087      	sub	sp, #28
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0306 	and.w	r3, r3, #6
 800513a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005142:	2300      	movs	r3, #0
 8005144:	75fb      	strb	r3, [r7, #23]
 8005146:	e00a      	b.n	800515e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d002      	beq.n	8005154 <USB_GetDevSpeed+0x32>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b06      	cmp	r3, #6
 8005152:	d102      	bne.n	800515a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005154:	2302      	movs	r3, #2
 8005156:	75fb      	strb	r3, [r7, #23]
 8005158:	e001      	b.n	800515e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800515a:	230f      	movs	r3, #15
 800515c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800515e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005160:	4618      	mov	r0, r3
 8005162:	371c      	adds	r7, #28
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	785b      	ldrb	r3, [r3, #1]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d13a      	bne.n	80051fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800518e:	69da      	ldr	r2, [r3, #28]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	2101      	movs	r1, #1
 800519a:	fa01 f303 	lsl.w	r3, r1, r3
 800519e:	b29b      	uxth	r3, r3
 80051a0:	68f9      	ldr	r1, [r7, #12]
 80051a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051a6:	4313      	orrs	r3, r2
 80051a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d155      	bne.n	800526c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	791b      	ldrb	r3, [r3, #4]
 80051da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	059b      	lsls	r3, r3, #22
 80051e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051e4:	4313      	orrs	r3, r2
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	e036      	b.n	800526c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005204:	69da      	ldr	r2, [r3, #28]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	2101      	movs	r1, #1
 8005210:	fa01 f303 	lsl.w	r3, r1, r3
 8005214:	041b      	lsls	r3, r3, #16
 8005216:	68f9      	ldr	r1, [r7, #12]
 8005218:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800521c:	4313      	orrs	r3, r2
 800521e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d11a      	bne.n	800526c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	791b      	ldrb	r3, [r3, #4]
 8005250:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005252:	430b      	orrs	r3, r1
 8005254:	4313      	orrs	r3, r2
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	440a      	add	r2, r1
 800525e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800526a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
	...

0800527c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	785b      	ldrb	r3, [r3, #1]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d161      	bne.n	800535c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052ae:	d11f      	bne.n	80052f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	2101      	movs	r1, #1
 8005302:	fa01 f303 	lsl.w	r3, r1, r3
 8005306:	b29b      	uxth	r3, r3
 8005308:	43db      	mvns	r3, r3
 800530a:	68f9      	ldr	r1, [r7, #12]
 800530c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005310:	4013      	ands	r3, r2
 8005312:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	2101      	movs	r1, #1
 8005326:	fa01 f303 	lsl.w	r3, r1, r3
 800532a:	b29b      	uxth	r3, r3
 800532c:	43db      	mvns	r3, r3
 800532e:	68f9      	ldr	r1, [r7, #12]
 8005330:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005334:	4013      	ands	r3, r2
 8005336:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	0159      	lsls	r1, r3, #5
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	440b      	add	r3, r1
 800534e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005352:	4619      	mov	r1, r3
 8005354:	4b35      	ldr	r3, [pc, #212]	@ (800542c <USB_DeactivateEndpoint+0x1b0>)
 8005356:	4013      	ands	r3, r2
 8005358:	600b      	str	r3, [r1, #0]
 800535a:	e060      	b.n	800541e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800536e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005372:	d11f      	bne.n	80053b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	0151      	lsls	r1, r2, #5
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	440a      	add	r2, r1
 800538a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800538e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005392:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	2101      	movs	r1, #1
 80053c6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ca:	041b      	lsls	r3, r3, #16
 80053cc:	43db      	mvns	r3, r3
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053d4:	4013      	ands	r3, r2
 80053d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053de:	69da      	ldr	r2, [r3, #28]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	2101      	movs	r1, #1
 80053ea:	fa01 f303 	lsl.w	r3, r1, r3
 80053ee:	041b      	lsls	r3, r3, #16
 80053f0:	43db      	mvns	r3, r3
 80053f2:	68f9      	ldr	r1, [r7, #12]
 80053f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053f8:	4013      	ands	r3, r2
 80053fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	0159      	lsls	r1, r3, #5
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	440b      	add	r3, r1
 8005412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005416:	4619      	mov	r1, r3
 8005418:	4b05      	ldr	r3, [pc, #20]	@ (8005430 <USB_DeactivateEndpoint+0x1b4>)
 800541a:	4013      	ands	r3, r2
 800541c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	ec337800 	.word	0xec337800
 8005430:	eff37800 	.word	0xeff37800

08005434 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	@ 0x28
 8005438:	af02      	add	r7, sp, #8
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	785b      	ldrb	r3, [r3, #1]
 8005450:	2b01      	cmp	r3, #1
 8005452:	f040 817f 	bne.w	8005754 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d132      	bne.n	80054c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	440a      	add	r2, r1
 8005474:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005478:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800547c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005480:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	0151      	lsls	r1, r2, #5
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	440a      	add	r2, r1
 8005498:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800549c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	0151      	lsls	r1, r2, #5
 80054b4:	69fa      	ldr	r2, [r7, #28]
 80054b6:	440a      	add	r2, r1
 80054b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054bc:	0cdb      	lsrs	r3, r3, #19
 80054be:	04db      	lsls	r3, r3, #19
 80054c0:	6113      	str	r3, [r2, #16]
 80054c2:	e097      	b.n	80055f4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	0151      	lsls	r1, r2, #5
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	440a      	add	r2, r1
 80054da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054de:	0cdb      	lsrs	r3, r3, #19
 80054e0:	04db      	lsls	r3, r3, #19
 80054e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	69fa      	ldr	r2, [r7, #28]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054fe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005502:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005506:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d11a      	bne.n	8005544 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	429a      	cmp	r2, r3
 8005518:	d903      	bls.n	8005522 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	0151      	lsls	r1, r2, #5
 8005534:	69fa      	ldr	r2, [r7, #28]
 8005536:	440a      	add	r2, r1
 8005538:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800553c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005540:	6113      	str	r3, [r2, #16]
 8005542:	e044      	b.n	80055ce <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	4413      	add	r3, r2
 800554e:	1e5a      	subs	r2, r3, #1
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	fbb2 f3f3 	udiv	r3, r2, r3
 8005558:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	8afb      	ldrh	r3, [r7, #22]
 800556a:	04d9      	lsls	r1, r3, #19
 800556c:	4ba4      	ldr	r3, [pc, #656]	@ (8005800 <USB_EPStartXfer+0x3cc>)
 800556e:	400b      	ands	r3, r1
 8005570:	69b9      	ldr	r1, [r7, #24]
 8005572:	0148      	lsls	r0, r1, #5
 8005574:	69f9      	ldr	r1, [r7, #28]
 8005576:	4401      	add	r1, r0
 8005578:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800557c:	4313      	orrs	r3, r2
 800557e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	791b      	ldrb	r3, [r3, #4]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d122      	bne.n	80055ce <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	440a      	add	r2, r1
 800559e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055a2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80055a6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b4:	691a      	ldr	r2, [r3, #16]
 80055b6:	8afb      	ldrh	r3, [r7, #22]
 80055b8:	075b      	lsls	r3, r3, #29
 80055ba:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80055be:	69b9      	ldr	r1, [r7, #24]
 80055c0:	0148      	lsls	r0, r1, #5
 80055c2:	69f9      	ldr	r1, [r7, #28]
 80055c4:	4401      	add	r1, r0
 80055c6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80055ca:	4313      	orrs	r3, r2
 80055cc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055e4:	69b9      	ldr	r1, [r7, #24]
 80055e6:	0148      	lsls	r0, r1, #5
 80055e8:	69f9      	ldr	r1, [r7, #28]
 80055ea:	4401      	add	r1, r0
 80055ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80055f0:	4313      	orrs	r3, r2
 80055f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d14b      	bne.n	8005692 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800560e:	461a      	mov	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	791b      	ldrb	r3, [r3, #4]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d128      	bne.n	8005670 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800562a:	2b00      	cmp	r3, #0
 800562c:	d110      	bne.n	8005650 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	0151      	lsls	r1, r2, #5
 8005640:	69fa      	ldr	r2, [r7, #28]
 8005642:	440a      	add	r2, r1
 8005644:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005648:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	e00f      	b.n	8005670 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	0151      	lsls	r1, r2, #5
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	440a      	add	r2, r1
 8005666:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800566a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800566e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	0151      	lsls	r1, r2, #5
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	440a      	add	r2, r1
 8005686:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800568a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	e166      	b.n	8005960 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056ac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80056b0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	791b      	ldrb	r3, [r3, #4]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d015      	beq.n	80056e6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 814e 	beq.w	8005960 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	2101      	movs	r1, #1
 80056d6:	fa01 f303 	lsl.w	r3, r1, r3
 80056da:	69f9      	ldr	r1, [r7, #28]
 80056dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056e0:	4313      	orrs	r3, r2
 80056e2:	634b      	str	r3, [r1, #52]	@ 0x34
 80056e4:	e13c      	b.n	8005960 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d110      	bne.n	8005718 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	0151      	lsls	r1, r2, #5
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	440a      	add	r2, r1
 800570c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005710:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	e00f      	b.n	8005738 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005736:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	68d9      	ldr	r1, [r3, #12]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	781a      	ldrb	r2, [r3, #0]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	b298      	uxth	r0, r3
 8005746:	79fb      	ldrb	r3, [r7, #7]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	4603      	mov	r3, r0
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 f9b9 	bl	8005ac4 <USB_WritePacket>
 8005752:	e105      	b.n	8005960 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	0151      	lsls	r1, r2, #5
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	440a      	add	r2, r1
 800576a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800576e:	0cdb      	lsrs	r3, r3, #19
 8005770:	04db      	lsls	r3, r3, #19
 8005772:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	440a      	add	r2, r1
 800578a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800578e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005792:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005796:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d132      	bne.n	8005804 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057cc:	69b9      	ldr	r1, [r7, #24]
 80057ce:	0148      	lsls	r0, r1, #5
 80057d0:	69f9      	ldr	r1, [r7, #28]
 80057d2:	4401      	add	r1, r0
 80057d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80057d8:	4313      	orrs	r3, r2
 80057da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057fa:	6113      	str	r3, [r2, #16]
 80057fc:	e062      	b.n	80058c4 <USB_EPStartXfer+0x490>
 80057fe:	bf00      	nop
 8005800:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d123      	bne.n	8005854 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005822:	69b9      	ldr	r1, [r7, #24]
 8005824:	0148      	lsls	r0, r1, #5
 8005826:	69f9      	ldr	r1, [r7, #28]
 8005828:	4401      	add	r1, r0
 800582a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800582e:	4313      	orrs	r3, r2
 8005830:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	440a      	add	r2, r1
 8005848:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800584c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005850:	6113      	str	r3, [r2, #16]
 8005852:	e037      	b.n	80058c4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	4413      	add	r3, r2
 800585e:	1e5a      	subs	r2, r3, #1
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	fbb2 f3f3 	udiv	r3, r2, r3
 8005868:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	8afa      	ldrh	r2, [r7, #22]
 8005870:	fb03 f202 	mul.w	r2, r3, r2
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	8afb      	ldrh	r3, [r7, #22]
 8005888:	04d9      	lsls	r1, r3, #19
 800588a:	4b38      	ldr	r3, [pc, #224]	@ (800596c <USB_EPStartXfer+0x538>)
 800588c:	400b      	ands	r3, r1
 800588e:	69b9      	ldr	r1, [r7, #24]
 8005890:	0148      	lsls	r0, r1, #5
 8005892:	69f9      	ldr	r1, [r7, #28]
 8005894:	4401      	add	r1, r0
 8005896:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800589a:	4313      	orrs	r3, r2
 800589c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058b4:	69b9      	ldr	r1, [r7, #24]
 80058b6:	0148      	lsls	r0, r1, #5
 80058b8:	69f9      	ldr	r1, [r7, #28]
 80058ba:	4401      	add	r1, r0
 80058bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80058c0:	4313      	orrs	r3, r2
 80058c2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80058c4:	79fb      	ldrb	r3, [r7, #7]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d10d      	bne.n	80058e6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d009      	beq.n	80058e6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	68d9      	ldr	r1, [r3, #12]
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e2:	460a      	mov	r2, r1
 80058e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	791b      	ldrb	r3, [r3, #4]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d128      	bne.n	8005940 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d110      	bne.n	8005920 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	0151      	lsls	r1, r2, #5
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	440a      	add	r2, r1
 8005914:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005918:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	e00f      	b.n	8005940 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	0151      	lsls	r1, r2, #5
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	440a      	add	r2, r1
 8005936:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800593a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800593e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	0151      	lsls	r1, r2, #5
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	440a      	add	r2, r1
 8005956:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800595a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800595e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3720      	adds	r7, #32
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	1ff80000 	.word	0x1ff80000

08005970 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	785b      	ldrb	r3, [r3, #1]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d14a      	bne.n	8005a24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059a6:	f040 8086 	bne.w	8005ab6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	7812      	ldrb	r2, [r2, #0]
 80059be:	0151      	lsls	r1, r2, #5
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	440a      	add	r2, r1
 80059c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80059cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	7812      	ldrb	r2, [r2, #0]
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3301      	adds	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d902      	bls.n	8005a08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	75fb      	strb	r3, [r7, #23]
          break;
 8005a06:	e056      	b.n	8005ab6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a20:	d0e7      	beq.n	80059f2 <USB_EPStopXfer+0x82>
 8005a22:	e048      	b.n	8005ab6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a3c:	d13b      	bne.n	8005ab6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	7812      	ldrb	r2, [r2, #0]
 8005a52:	0151      	lsls	r1, r2, #5
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	440a      	add	r2, r1
 8005a58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a5c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	7812      	ldrb	r2, [r2, #0]
 8005a76:	0151      	lsls	r1, r2, #5
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	440a      	add	r2, r1
 8005a7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d902      	bls.n	8005a9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	75fb      	strb	r3, [r7, #23]
          break;
 8005a9a:	e00c      	b.n	8005ab6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ab4:	d0e7      	beq.n	8005a86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b089      	sub	sp, #36	@ 0x24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	4611      	mov	r1, r2
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	71fb      	strb	r3, [r7, #7]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ae2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d123      	bne.n	8005b32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005aea:	88bb      	ldrh	r3, [r7, #4]
 8005aec:	3303      	adds	r3, #3
 8005aee:	089b      	lsrs	r3, r3, #2
 8005af0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005af2:	2300      	movs	r3, #0
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	e018      	b.n	8005b2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	031a      	lsls	r2, r3, #12
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b04:	461a      	mov	r2, r3
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	3301      	adds	r3, #1
 8005b16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	3301      	adds	r3, #1
 8005b22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	3301      	adds	r3, #1
 8005b28:	61bb      	str	r3, [r7, #24]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d3e2      	bcc.n	8005af8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3724      	adds	r7, #36	@ 0x24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b08b      	sub	sp, #44	@ 0x2c
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b56:	88fb      	ldrh	r3, [r7, #6]
 8005b58:	089b      	lsrs	r3, r3, #2
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	f003 0303 	and.w	r3, r3, #3
 8005b64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b66:	2300      	movs	r3, #0
 8005b68:	623b      	str	r3, [r7, #32]
 8005b6a:	e014      	b.n	8005b96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b76:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b80:	3301      	adds	r3, #1
 8005b82:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b86:	3301      	adds	r3, #1
 8005b88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	3301      	adds	r3, #1
 8005b94:	623b      	str	r3, [r7, #32]
 8005b96:	6a3a      	ldr	r2, [r7, #32]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d3e6      	bcc.n	8005b6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b9e:	8bfb      	ldrh	r3, [r7, #30]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d01e      	beq.n	8005be2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f107 0310 	add.w	r3, r7, #16
 8005bb4:	6812      	ldr	r2, [r2, #0]
 8005bb6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	701a      	strb	r2, [r3, #0]
      i++;
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005bd6:	8bfb      	ldrh	r3, [r7, #30]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005bdc:	8bfb      	ldrh	r3, [r7, #30]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1ea      	bne.n	8005bb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	372c      	adds	r7, #44	@ 0x2c
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	785b      	ldrb	r3, [r3, #1]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d12c      	bne.n	8005c66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	db12      	blt.n	8005c44 <USB_EPSetStall+0x54>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00f      	beq.n	8005c44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	0151      	lsls	r1, r2, #5
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	440a      	add	r2, r1
 8005c5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	e02b      	b.n	8005cbe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	db12      	blt.n	8005c9e <USB_EPSetStall+0xae>
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00f      	beq.n	8005c9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	0151      	lsls	r1, r2, #5
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005cbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d128      	bne.n	8005d3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	0151      	lsls	r1, r2, #5
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	440a      	add	r2, r1
 8005cfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	791b      	ldrb	r3, [r3, #4]
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d003      	beq.n	8005d18 <USB_EPClearStall+0x4c>
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	791b      	ldrb	r3, [r3, #4]
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d138      	bne.n	8005d8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	e027      	b.n	8005d8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d54:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	791b      	ldrb	r3, [r3, #4]
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d003      	beq.n	8005d6a <USB_EPClearStall+0x9e>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	791b      	ldrb	r3, [r3, #4]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d10f      	bne.n	8005d8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	0151      	lsls	r1, r2, #5
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	440a      	add	r2, r1
 8005d80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005db6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005dba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005dcc:	68f9      	ldr	r1, [r7, #12]
 8005dce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005dfe:	f023 0303 	bic.w	r3, r3, #3
 8005e02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e12:	f023 0302 	bic.w	r3, r3, #2
 8005e16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005e40:	f023 0303 	bic.w	r3, r3, #3
 8005e44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e54:	f043 0302 	orr.w	r3, r3, #2
 8005e58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e80:	68fb      	ldr	r3, [r7, #12]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b085      	sub	sp, #20
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	0c1b      	lsrs	r3, r3, #16
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b085      	sub	sp, #20
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	b29b      	uxth	r3, r3
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b085      	sub	sp, #20
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	460b      	mov	r3, r1
 8005f00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f06:	78fb      	ldrb	r3, [r7, #3]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	4013      	ands	r3, r2
 8005f22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f24:	68bb      	ldr	r3, [r7, #8]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b087      	sub	sp, #28
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	f003 030f 	and.w	r3, r3, #15
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f62:	01db      	lsls	r3, r3, #7
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f80:	68bb      	ldr	r3, [r7, #8]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fc4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005fc8:	f023 0307 	bic.w	r3, r3, #7
 8005fcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fe0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	607a      	str	r2, [r7, #4]
 8005ffc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	333c      	adds	r3, #60	@ 0x3c
 8006006:	3304      	adds	r3, #4
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	4a26      	ldr	r2, [pc, #152]	@ (80060a8 <USB_EP0_OutStart+0xb8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d90a      	bls.n	800602a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006020:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006024:	d101      	bne.n	800602a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	e037      	b.n	800609a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006030:	461a      	mov	r2, r3
 8006032:	2300      	movs	r3, #0
 8006034:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006044:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006058:	f043 0318 	orr.w	r3, r3, #24
 800605c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800606c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006070:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006072:	7afb      	ldrb	r3, [r7, #11]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d10f      	bne.n	8006098 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800607e:	461a      	mov	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006092:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006096:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	4f54300a 	.word	0x4f54300a

080060ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3301      	adds	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060c4:	d901      	bls.n	80060ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e022      	b.n	8006110 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	daf2      	bge.n	80060b8 <USB_CoreReset+0xc>

  count = 10U;
 80060d2:	230a      	movs	r3, #10
 80060d4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80060d6:	e002      	b.n	80060de <USB_CoreReset+0x32>
  {
    count--;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	3b01      	subs	r3, #1
 80060dc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1f9      	bne.n	80060d8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	f043 0201 	orr.w	r2, r3, #1
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	3301      	adds	r3, #1
 80060f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060fc:	d901      	bls.n	8006102 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e006      	b.n	8006110 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b01      	cmp	r3, #1
 800610c:	d0f0      	beq.n	80060f0 <USB_CoreReset+0x44>

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006128:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800612c:	f005 fb7a 	bl	800b824 <USBD_static_malloc>
 8006130:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d109      	bne.n	800614c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	32b0      	adds	r2, #176	@ 0xb0
 8006142:	2100      	movs	r1, #0
 8006144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006148:	2302      	movs	r3, #2
 800614a:	e0d4      	b.n	80062f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800614c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006150:	2100      	movs	r1, #0
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f005 fbaa 	bl	800b8ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	32b0      	adds	r2, #176	@ 0xb0
 8006162:	68f9      	ldr	r1, [r7, #12]
 8006164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	32b0      	adds	r2, #176	@ 0xb0
 8006172:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	7c1b      	ldrb	r3, [r3, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d138      	bne.n	80061f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006184:	4b5e      	ldr	r3, [pc, #376]	@ (8006300 <USBD_CDC_Init+0x1e4>)
 8006186:	7819      	ldrb	r1, [r3, #0]
 8006188:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800618c:	2202      	movs	r2, #2
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f005 f9d7 	bl	800b542 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006194:	4b5a      	ldr	r3, [pc, #360]	@ (8006300 <USBD_CDC_Init+0x1e4>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	f003 020f 	and.w	r2, r3, #15
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	440b      	add	r3, r1
 80061a8:	3323      	adds	r3, #35	@ 0x23
 80061aa:	2201      	movs	r2, #1
 80061ac:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80061ae:	4b55      	ldr	r3, [pc, #340]	@ (8006304 <USBD_CDC_Init+0x1e8>)
 80061b0:	7819      	ldrb	r1, [r3, #0]
 80061b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061b6:	2202      	movs	r2, #2
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f005 f9c2 	bl	800b542 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80061be:	4b51      	ldr	r3, [pc, #324]	@ (8006304 <USBD_CDC_Init+0x1e8>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	f003 020f 	and.w	r2, r3, #15
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	440b      	add	r3, r1
 80061d2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80061d6:	2201      	movs	r2, #1
 80061d8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80061da:	4b4b      	ldr	r3, [pc, #300]	@ (8006308 <USBD_CDC_Init+0x1ec>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	f003 020f 	and.w	r2, r3, #15
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	440b      	add	r3, r1
 80061ee:	331c      	adds	r3, #28
 80061f0:	2210      	movs	r2, #16
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	e035      	b.n	8006262 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80061f6:	4b42      	ldr	r3, [pc, #264]	@ (8006300 <USBD_CDC_Init+0x1e4>)
 80061f8:	7819      	ldrb	r1, [r3, #0]
 80061fa:	2340      	movs	r3, #64	@ 0x40
 80061fc:	2202      	movs	r2, #2
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f005 f99f 	bl	800b542 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006204:	4b3e      	ldr	r3, [pc, #248]	@ (8006300 <USBD_CDC_Init+0x1e4>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	f003 020f 	and.w	r2, r3, #15
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	440b      	add	r3, r1
 8006218:	3323      	adds	r3, #35	@ 0x23
 800621a:	2201      	movs	r2, #1
 800621c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800621e:	4b39      	ldr	r3, [pc, #228]	@ (8006304 <USBD_CDC_Init+0x1e8>)
 8006220:	7819      	ldrb	r1, [r3, #0]
 8006222:	2340      	movs	r3, #64	@ 0x40
 8006224:	2202      	movs	r2, #2
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f005 f98b 	bl	800b542 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800622c:	4b35      	ldr	r3, [pc, #212]	@ (8006304 <USBD_CDC_Init+0x1e8>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	f003 020f 	and.w	r2, r3, #15
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	440b      	add	r3, r1
 8006240:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006244:	2201      	movs	r2, #1
 8006246:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006248:	4b2f      	ldr	r3, [pc, #188]	@ (8006308 <USBD_CDC_Init+0x1ec>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	f003 020f 	and.w	r2, r3, #15
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	331c      	adds	r3, #28
 800625e:	2210      	movs	r2, #16
 8006260:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006262:	4b29      	ldr	r3, [pc, #164]	@ (8006308 <USBD_CDC_Init+0x1ec>)
 8006264:	7819      	ldrb	r1, [r3, #0]
 8006266:	2308      	movs	r3, #8
 8006268:	2203      	movs	r2, #3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f005 f969 	bl	800b542 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006270:	4b25      	ldr	r3, [pc, #148]	@ (8006308 <USBD_CDC_Init+0x1ec>)
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	f003 020f 	and.w	r2, r3, #15
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	440b      	add	r3, r1
 8006284:	3323      	adds	r3, #35	@ 0x23
 8006286:	2201      	movs	r2, #1
 8006288:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	33b0      	adds	r3, #176	@ 0xb0
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80062c0:	2302      	movs	r3, #2
 80062c2:	e018      	b.n	80062f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	7c1b      	ldrb	r3, [r3, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006304 <USBD_CDC_Init+0x1e8>)
 80062ce:	7819      	ldrb	r1, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80062d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f005 fa20 	bl	800b720 <USBD_LL_PrepareReceive>
 80062e0:	e008      	b.n	80062f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062e2:	4b08      	ldr	r3, [pc, #32]	@ (8006304 <USBD_CDC_Init+0x1e8>)
 80062e4:	7819      	ldrb	r1, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80062ec:	2340      	movs	r3, #64	@ 0x40
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f005 fa16 	bl	800b720 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000093 	.word	0x20000093
 8006304:	20000094 	.word	0x20000094
 8006308:	20000095 	.word	0x20000095

0800630c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006318:	4b3a      	ldr	r3, [pc, #232]	@ (8006404 <USBD_CDC_DeInit+0xf8>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	4619      	mov	r1, r3
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f005 f935 	bl	800b58e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006324:	4b37      	ldr	r3, [pc, #220]	@ (8006404 <USBD_CDC_DeInit+0xf8>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	f003 020f 	and.w	r2, r3, #15
 800632c:	6879      	ldr	r1, [r7, #4]
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	440b      	add	r3, r1
 8006338:	3323      	adds	r3, #35	@ 0x23
 800633a:	2200      	movs	r2, #0
 800633c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800633e:	4b32      	ldr	r3, [pc, #200]	@ (8006408 <USBD_CDC_DeInit+0xfc>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f005 f922 	bl	800b58e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800634a:	4b2f      	ldr	r3, [pc, #188]	@ (8006408 <USBD_CDC_DeInit+0xfc>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	f003 020f 	and.w	r2, r3, #15
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006362:	2200      	movs	r2, #0
 8006364:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006366:	4b29      	ldr	r3, [pc, #164]	@ (800640c <USBD_CDC_DeInit+0x100>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	4619      	mov	r1, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f005 f90e 	bl	800b58e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006372:	4b26      	ldr	r3, [pc, #152]	@ (800640c <USBD_CDC_DeInit+0x100>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	f003 020f 	and.w	r2, r3, #15
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	4613      	mov	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	3323      	adds	r3, #35	@ 0x23
 8006388:	2200      	movs	r2, #0
 800638a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800638c:	4b1f      	ldr	r3, [pc, #124]	@ (800640c <USBD_CDC_DeInit+0x100>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	f003 020f 	and.w	r2, r3, #15
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	4613      	mov	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	440b      	add	r3, r1
 80063a0:	331c      	adds	r3, #28
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	32b0      	adds	r2, #176	@ 0xb0
 80063b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d01f      	beq.n	80063f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	33b0      	adds	r3, #176	@ 0xb0
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	32b0      	adds	r2, #176	@ 0xb0
 80063d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063da:	4618      	mov	r0, r3
 80063dc:	f005 fa30 	bl	800b840 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	32b0      	adds	r2, #176	@ 0xb0
 80063ea:	2100      	movs	r1, #0
 80063ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000093 	.word	0x20000093
 8006408:	20000094 	.word	0x20000094
 800640c:	20000095 	.word	0x20000095

08006410 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	32b0      	adds	r2, #176	@ 0xb0
 8006424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006428:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800643c:	2303      	movs	r3, #3
 800643e:	e0bf      	b.n	80065c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006448:	2b00      	cmp	r3, #0
 800644a:	d050      	beq.n	80064ee <USBD_CDC_Setup+0xde>
 800644c:	2b20      	cmp	r3, #32
 800644e:	f040 80af 	bne.w	80065b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	88db      	ldrh	r3, [r3, #6]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d03a      	beq.n	80064d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	b25b      	sxtb	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	da1b      	bge.n	800649c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	33b0      	adds	r3, #176	@ 0xb0
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800647a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	88d2      	ldrh	r2, [r2, #6]
 8006480:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	88db      	ldrh	r3, [r3, #6]
 8006486:	2b07      	cmp	r3, #7
 8006488:	bf28      	it	cs
 800648a:	2307      	movcs	r3, #7
 800648c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	89fa      	ldrh	r2, [r7, #14]
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 fd91 	bl	8007fbc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800649a:	e090      	b.n	80065be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	785a      	ldrb	r2, [r3, #1]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	88db      	ldrh	r3, [r3, #6]
 80064aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80064ac:	d803      	bhi.n	80064b6 <USBD_CDC_Setup+0xa6>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	88db      	ldrh	r3, [r3, #6]
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	e000      	b.n	80064b8 <USBD_CDC_Setup+0xa8>
 80064b6:	2240      	movs	r2, #64	@ 0x40
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80064be:	6939      	ldr	r1, [r7, #16]
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80064c6:	461a      	mov	r2, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 fda6 	bl	800801a <USBD_CtlPrepareRx>
      break;
 80064ce:	e076      	b.n	80065be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	33b0      	adds	r3, #176	@ 0xb0
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	7850      	ldrb	r0, [r2, #1]
 80064e6:	2200      	movs	r2, #0
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	4798      	blx	r3
      break;
 80064ec:	e067      	b.n	80065be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	785b      	ldrb	r3, [r3, #1]
 80064f2:	2b0b      	cmp	r3, #11
 80064f4:	d851      	bhi.n	800659a <USBD_CDC_Setup+0x18a>
 80064f6:	a201      	add	r2, pc, #4	@ (adr r2, 80064fc <USBD_CDC_Setup+0xec>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	0800652d 	.word	0x0800652d
 8006500:	080065a9 	.word	0x080065a9
 8006504:	0800659b 	.word	0x0800659b
 8006508:	0800659b 	.word	0x0800659b
 800650c:	0800659b 	.word	0x0800659b
 8006510:	0800659b 	.word	0x0800659b
 8006514:	0800659b 	.word	0x0800659b
 8006518:	0800659b 	.word	0x0800659b
 800651c:	0800659b 	.word	0x0800659b
 8006520:	0800659b 	.word	0x0800659b
 8006524:	08006557 	.word	0x08006557
 8006528:	08006581 	.word	0x08006581
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b03      	cmp	r3, #3
 8006536:	d107      	bne.n	8006548 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006538:	f107 030a 	add.w	r3, r7, #10
 800653c:	2202      	movs	r2, #2
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 fd3b 	bl	8007fbc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006546:	e032      	b.n	80065ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 fcb9 	bl	8007ec2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006550:	2303      	movs	r3, #3
 8006552:	75fb      	strb	r3, [r7, #23]
          break;
 8006554:	e02b      	b.n	80065ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b03      	cmp	r3, #3
 8006560:	d107      	bne.n	8006572 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006562:	f107 030d 	add.w	r3, r7, #13
 8006566:	2201      	movs	r2, #1
 8006568:	4619      	mov	r1, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f001 fd26 	bl	8007fbc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006570:	e01d      	b.n	80065ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 fca4 	bl	8007ec2 <USBD_CtlError>
            ret = USBD_FAIL;
 800657a:	2303      	movs	r3, #3
 800657c:	75fb      	strb	r3, [r7, #23]
          break;
 800657e:	e016      	b.n	80065ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b03      	cmp	r3, #3
 800658a:	d00f      	beq.n	80065ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f001 fc97 	bl	8007ec2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006594:	2303      	movs	r3, #3
 8006596:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006598:	e008      	b.n	80065ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 fc90 	bl	8007ec2 <USBD_CtlError>
          ret = USBD_FAIL;
 80065a2:	2303      	movs	r3, #3
 80065a4:	75fb      	strb	r3, [r7, #23]
          break;
 80065a6:	e002      	b.n	80065ae <USBD_CDC_Setup+0x19e>
          break;
 80065a8:	bf00      	nop
 80065aa:	e008      	b.n	80065be <USBD_CDC_Setup+0x1ae>
          break;
 80065ac:	bf00      	nop
      }
      break;
 80065ae:	e006      	b.n	80065be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f001 fc85 	bl	8007ec2 <USBD_CtlError>
      ret = USBD_FAIL;
 80065b8:	2303      	movs	r3, #3
 80065ba:	75fb      	strb	r3, [r7, #23]
      break;
 80065bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80065be:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80065da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	32b0      	adds	r2, #176	@ 0xb0
 80065e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e065      	b.n	80066be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	32b0      	adds	r2, #176	@ 0xb0
 80065fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006600:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006602:	78fb      	ldrb	r3, [r7, #3]
 8006604:	f003 020f 	and.w	r2, r3, #15
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	4613      	mov	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	440b      	add	r3, r1
 8006614:	3314      	adds	r3, #20
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d02f      	beq.n	800667c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	f003 020f 	and.w	r2, r3, #15
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	3314      	adds	r3, #20
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	78fb      	ldrb	r3, [r7, #3]
 8006634:	f003 010f 	and.w	r1, r3, #15
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	460b      	mov	r3, r1
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	440b      	add	r3, r1
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4403      	add	r3, r0
 8006644:	331c      	adds	r3, #28
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	fbb2 f1f3 	udiv	r1, r2, r3
 800664c:	fb01 f303 	mul.w	r3, r1, r3
 8006650:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006652:	2b00      	cmp	r3, #0
 8006654:	d112      	bne.n	800667c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006656:	78fb      	ldrb	r3, [r7, #3]
 8006658:	f003 020f 	and.w	r2, r3, #15
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	4613      	mov	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	440b      	add	r3, r1
 8006668:	3314      	adds	r3, #20
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800666e:	78f9      	ldrb	r1, [r7, #3]
 8006670:	2300      	movs	r3, #0
 8006672:	2200      	movs	r2, #0
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f005 f832 	bl	800b6de <USBD_LL_Transmit>
 800667a:	e01f      	b.n	80066bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2200      	movs	r2, #0
 8006680:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	33b0      	adds	r3, #176	@ 0xb0
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d010      	beq.n	80066bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	33b0      	adds	r3, #176	@ 0xb0
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80066b8:	78fa      	ldrb	r2, [r7, #3]
 80066ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	460b      	mov	r3, r1
 80066d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	32b0      	adds	r2, #176	@ 0xb0
 80066dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	32b0      	adds	r2, #176	@ 0xb0
 80066ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e01a      	b.n	800672e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80066f8:	78fb      	ldrb	r3, [r7, #3]
 80066fa:	4619      	mov	r1, r3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f005 f830 	bl	800b762 <USBD_LL_GetRxDataSize>
 8006702:	4602      	mov	r2, r0
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	33b0      	adds	r3, #176	@ 0xb0
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006728:	4611      	mov	r1, r2
 800672a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	32b0      	adds	r2, #176	@ 0xb0
 8006748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006754:	2303      	movs	r3, #3
 8006756:	e024      	b.n	80067a2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	33b0      	adds	r3, #176	@ 0xb0
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d019      	beq.n	80067a0 <USBD_CDC_EP0_RxReady+0x6a>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006772:	2bff      	cmp	r3, #255	@ 0xff
 8006774:	d014      	beq.n	80067a0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	33b0      	adds	r3, #176	@ 0xb0
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800678e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006796:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	22ff      	movs	r2, #255	@ 0xff
 800679c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067b4:	2182      	movs	r1, #130	@ 0x82
 80067b6:	4818      	ldr	r0, [pc, #96]	@ (8006818 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067b8:	f000 fd22 	bl	8007200 <USBD_GetEpDesc>
 80067bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067be:	2101      	movs	r1, #1
 80067c0:	4815      	ldr	r0, [pc, #84]	@ (8006818 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067c2:	f000 fd1d 	bl	8007200 <USBD_GetEpDesc>
 80067c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067c8:	2181      	movs	r1, #129	@ 0x81
 80067ca:	4813      	ldr	r0, [pc, #76]	@ (8006818 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067cc:	f000 fd18 	bl	8007200 <USBD_GetEpDesc>
 80067d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2210      	movs	r2, #16
 80067dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d006      	beq.n	80067f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067ec:	711a      	strb	r2, [r3, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d006      	beq.n	8006806 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006800:	711a      	strb	r2, [r3, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2243      	movs	r2, #67	@ 0x43
 800680a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800680c:	4b02      	ldr	r3, [pc, #8]	@ (8006818 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800680e:	4618      	mov	r0, r3
 8006810:	3718      	adds	r7, #24
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20000050 	.word	0x20000050

0800681c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006824:	2182      	movs	r1, #130	@ 0x82
 8006826:	4818      	ldr	r0, [pc, #96]	@ (8006888 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006828:	f000 fcea 	bl	8007200 <USBD_GetEpDesc>
 800682c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800682e:	2101      	movs	r1, #1
 8006830:	4815      	ldr	r0, [pc, #84]	@ (8006888 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006832:	f000 fce5 	bl	8007200 <USBD_GetEpDesc>
 8006836:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006838:	2181      	movs	r1, #129	@ 0x81
 800683a:	4813      	ldr	r0, [pc, #76]	@ (8006888 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800683c:	f000 fce0 	bl	8007200 <USBD_GetEpDesc>
 8006840:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2210      	movs	r2, #16
 800684c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d006      	beq.n	8006862 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2200      	movs	r2, #0
 8006858:	711a      	strb	r2, [r3, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f042 0202 	orr.w	r2, r2, #2
 8006860:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d006      	beq.n	8006876 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	711a      	strb	r2, [r3, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f042 0202 	orr.w	r2, r2, #2
 8006874:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2243      	movs	r2, #67	@ 0x43
 800687a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800687c:	4b02      	ldr	r3, [pc, #8]	@ (8006888 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000050 	.word	0x20000050

0800688c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006894:	2182      	movs	r1, #130	@ 0x82
 8006896:	4818      	ldr	r0, [pc, #96]	@ (80068f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006898:	f000 fcb2 	bl	8007200 <USBD_GetEpDesc>
 800689c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800689e:	2101      	movs	r1, #1
 80068a0:	4815      	ldr	r0, [pc, #84]	@ (80068f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80068a2:	f000 fcad 	bl	8007200 <USBD_GetEpDesc>
 80068a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80068a8:	2181      	movs	r1, #129	@ 0x81
 80068aa:	4813      	ldr	r0, [pc, #76]	@ (80068f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80068ac:	f000 fca8 	bl	8007200 <USBD_GetEpDesc>
 80068b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2210      	movs	r2, #16
 80068bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d006      	beq.n	80068d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068cc:	711a      	strb	r2, [r3, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d006      	beq.n	80068e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068e0:	711a      	strb	r2, [r3, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2243      	movs	r2, #67	@ 0x43
 80068ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80068ec:	4b02      	ldr	r3, [pc, #8]	@ (80068f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20000050 	.word	0x20000050

080068fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	220a      	movs	r2, #10
 8006908:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800690a:	4b03      	ldr	r3, [pc, #12]	@ (8006918 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800690c:	4618      	mov	r0, r3
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	2000000c 	.word	0x2000000c

0800691c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800692c:	2303      	movs	r3, #3
 800692e:	e009      	b.n	8006944 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	33b0      	adds	r3, #176	@ 0xb0
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	32b0      	adds	r2, #176	@ 0xb0
 8006966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006972:	2303      	movs	r3, #3
 8006974:	e008      	b.n	8006988 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	32b0      	adds	r2, #176	@ 0xb0
 80069a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e004      	b.n	80069c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
	...

080069d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	32b0      	adds	r2, #176	@ 0xb0
 80069e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	32b0      	adds	r2, #176	@ 0xb0
 80069f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e018      	b.n	8006a30 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	7c1b      	ldrb	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10a      	bne.n	8006a1c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a06:	4b0c      	ldr	r3, [pc, #48]	@ (8006a38 <USBD_CDC_ReceivePacket+0x68>)
 8006a08:	7819      	ldrb	r1, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f004 fe83 	bl	800b720 <USBD_LL_PrepareReceive>
 8006a1a:	e008      	b.n	8006a2e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a1c:	4b06      	ldr	r3, [pc, #24]	@ (8006a38 <USBD_CDC_ReceivePacket+0x68>)
 8006a1e:	7819      	ldrb	r1, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a26:	2340      	movs	r3, #64	@ 0x40
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f004 fe79 	bl	800b720 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	20000094 	.word	0x20000094

08006a3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	4613      	mov	r3, r2
 8006a48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e01f      	b.n	8006a94 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	79fa      	ldrb	r2, [r7, #7]
 8006a86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f004 fcf3 	bl	800b474 <USBD_LL_Init>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e025      	b.n	8006b00 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	32ae      	adds	r2, #174	@ 0xae
 8006ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00f      	beq.n	8006af0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	32ae      	adds	r2, #174	@ 0xae
 8006ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae0:	f107 020e 	add.w	r2, r7, #14
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4798      	blx	r3
 8006ae8:	4602      	mov	r2, r0
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f004 fcfb 	bl	800b50c <USBD_LL_Start>
 8006b16:	4603      	mov	r3, r0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b28:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d009      	beq.n	8006b64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	78fa      	ldrb	r2, [r7, #3]
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	4798      	blx	r3
 8006b60:	4603      	mov	r3, r0
 8006b62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	460b      	mov	r3, r1
 8006b78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	78fa      	ldrb	r2, [r7, #3]
 8006b88:	4611      	mov	r1, r2
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	4798      	blx	r3
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006b94:	2303      	movs	r3, #3
 8006b96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 f94a 	bl	8007e4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006bc8:	461a      	mov	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006bd6:	f003 031f 	and.w	r3, r3, #31
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d01a      	beq.n	8006c14 <USBD_LL_SetupStage+0x72>
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d822      	bhi.n	8006c28 <USBD_LL_SetupStage+0x86>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <USBD_LL_SetupStage+0x4a>
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d00a      	beq.n	8006c00 <USBD_LL_SetupStage+0x5e>
 8006bea:	e01d      	b.n	8006c28 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fb75 	bl	80072e4 <USBD_StdDevReq>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8006bfe:	e020      	b.n	8006c42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006c06:	4619      	mov	r1, r3
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fbdd 	bl	80073c8 <USBD_StdItfReq>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	73fb      	strb	r3, [r7, #15]
      break;
 8006c12:	e016      	b.n	8006c42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fc3f 	bl	80074a0 <USBD_StdEPReq>
 8006c22:	4603      	mov	r3, r0
 8006c24:	73fb      	strb	r3, [r7, #15]
      break;
 8006c26:	e00c      	b.n	8006c42 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006c2e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f004 fcc8 	bl	800b5cc <USBD_LL_StallEP>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c40:	bf00      	nop
  }

  return ret;
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	460b      	mov	r3, r1
 8006c56:	607a      	str	r2, [r7, #4]
 8006c58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006c5e:	7afb      	ldrb	r3, [r7, #11]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d177      	bne.n	8006d54 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006c6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	f040 80a1 	bne.w	8006dba <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	8992      	ldrh	r2, [r2, #12]
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d91c      	bls.n	8006cbe <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	8992      	ldrh	r2, [r2, #12]
 8006c8c:	1a9a      	subs	r2, r3, r2
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	8992      	ldrh	r2, [r2, #12]
 8006c9a:	441a      	add	r2, r3
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	6919      	ldr	r1, [r3, #16]
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	899b      	ldrh	r3, [r3, #12]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	bf38      	it	cc
 8006cb2:	4613      	movcc	r3, r2
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f001 f9d0 	bl	800805c <USBD_CtlContinueRx>
 8006cbc:	e07d      	b.n	8006dba <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006cc4:	f003 031f 	and.w	r3, r3, #31
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d014      	beq.n	8006cf6 <USBD_LL_DataOutStage+0xaa>
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d81d      	bhi.n	8006d0c <USBD_LL_DataOutStage+0xc0>
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <USBD_LL_DataOutStage+0x8e>
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d003      	beq.n	8006ce0 <USBD_LL_DataOutStage+0x94>
 8006cd8:	e018      	b.n	8006d0c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	75bb      	strb	r3, [r7, #22]
            break;
 8006cde:	e018      	b.n	8006d12 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	4619      	mov	r1, r3
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 fa6e 	bl	80071cc <USBD_CoreFindIF>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	75bb      	strb	r3, [r7, #22]
            break;
 8006cf4:	e00d      	b.n	8006d12 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	4619      	mov	r1, r3
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 fa70 	bl	80071e6 <USBD_CoreFindEP>
 8006d06:	4603      	mov	r3, r0
 8006d08:	75bb      	strb	r3, [r7, #22]
            break;
 8006d0a:	e002      	b.n	8006d12 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	75bb      	strb	r3, [r7, #22]
            break;
 8006d10:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006d12:	7dbb      	ldrb	r3, [r7, #22]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d119      	bne.n	8006d4c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d113      	bne.n	8006d4c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006d24:	7dba      	ldrb	r2, [r7, #22]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	32ae      	adds	r2, #174	@ 0xae
 8006d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00b      	beq.n	8006d4c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8006d34:	7dba      	ldrb	r2, [r7, #22]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006d3c:	7dba      	ldrb	r2, [r7, #22]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	32ae      	adds	r2, #174	@ 0xae
 8006d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f001 f996 	bl	800807e <USBD_CtlSendStatus>
 8006d52:	e032      	b.n	8006dba <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006d54:	7afb      	ldrb	r3, [r7, #11]
 8006d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 fa41 	bl	80071e6 <USBD_CoreFindEP>
 8006d64:	4603      	mov	r3, r0
 8006d66:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d68:	7dbb      	ldrb	r3, [r7, #22]
 8006d6a:	2bff      	cmp	r3, #255	@ 0xff
 8006d6c:	d025      	beq.n	8006dba <USBD_LL_DataOutStage+0x16e>
 8006d6e:	7dbb      	ldrb	r3, [r7, #22]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d122      	bne.n	8006dba <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d117      	bne.n	8006db0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006d80:	7dba      	ldrb	r2, [r7, #22]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	32ae      	adds	r2, #174	@ 0xae
 8006d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00f      	beq.n	8006db0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8006d90:	7dba      	ldrb	r2, [r7, #22]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006d98:	7dba      	ldrb	r2, [r7, #22]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	32ae      	adds	r2, #174	@ 0xae
 8006d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	7afa      	ldrb	r2, [r7, #11]
 8006da6:	4611      	mov	r1, r2
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	4798      	blx	r3
 8006dac:	4603      	mov	r3, r0
 8006dae:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	e000      	b.n	8006dbc <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006dd2:	7afb      	ldrb	r3, [r7, #11]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d178      	bne.n	8006eca <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3314      	adds	r3, #20
 8006ddc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d163      	bne.n	8006eb0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	8992      	ldrh	r2, [r2, #12]
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d91c      	bls.n	8006e2e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	8992      	ldrh	r2, [r2, #12]
 8006dfc:	1a9a      	subs	r2, r3, r2
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	8992      	ldrh	r2, [r2, #12]
 8006e0a:	441a      	add	r2, r3
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	6919      	ldr	r1, [r3, #16]
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f001 f8ec 	bl	8007ff8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e20:	2300      	movs	r3, #0
 8006e22:	2200      	movs	r2, #0
 8006e24:	2100      	movs	r1, #0
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f004 fc7a 	bl	800b720 <USBD_LL_PrepareReceive>
 8006e2c:	e040      	b.n	8006eb0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	899b      	ldrh	r3, [r3, #12]
 8006e32:	461a      	mov	r2, r3
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d11c      	bne.n	8006e76 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d316      	bcc.n	8006e76 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d20f      	bcs.n	8006e76 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e56:	2200      	movs	r2, #0
 8006e58:	2100      	movs	r1, #0
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f001 f8cc 	bl	8007ff8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e68:	2300      	movs	r3, #0
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f004 fc56 	bl	800b720 <USBD_LL_PrepareReceive>
 8006e74:	e01c      	b.n	8006eb0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d10f      	bne.n	8006ea2 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d009      	beq.n	8006ea2 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ea2:	2180      	movs	r1, #128	@ 0x80
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f004 fb91 	bl	800b5cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f001 f8fa 	bl	80080a4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d03a      	beq.n	8006f30 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f7ff fe30 	bl	8006b20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006ec8:	e032      	b.n	8006f30 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006eca:	7afb      	ldrb	r3, [r7, #11]
 8006ecc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 f986 	bl	80071e6 <USBD_CoreFindEP>
 8006eda:	4603      	mov	r3, r0
 8006edc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	2bff      	cmp	r3, #255	@ 0xff
 8006ee2:	d025      	beq.n	8006f30 <USBD_LL_DataInStage+0x16c>
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d122      	bne.n	8006f30 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d11c      	bne.n	8006f30 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006ef6:	7dfa      	ldrb	r2, [r7, #23]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	32ae      	adds	r2, #174	@ 0xae
 8006efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d014      	beq.n	8006f30 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8006f06:	7dfa      	ldrb	r2, [r7, #23]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006f0e:	7dfa      	ldrb	r2, [r7, #23]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	32ae      	adds	r2, #174	@ 0xae
 8006f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	7afa      	ldrb	r2, [r7, #11]
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	4798      	blx	r3
 8006f22:	4603      	mov	r3, r0
 8006f24:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006f26:	7dbb      	ldrb	r3, [r7, #22]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8006f2c:	7dbb      	ldrb	r3, [r7, #22]
 8006f2e:	e000      	b.n	8006f32 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d014      	beq.n	8006fa0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00e      	beq.n	8006fa0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	6852      	ldr	r2, [r2, #4]
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	4611      	mov	r1, r2
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	4798      	blx	r3
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fa0:	2340      	movs	r3, #64	@ 0x40
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f004 facb 	bl	800b542 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2240      	movs	r2, #64	@ 0x40
 8006fb8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fbc:	2340      	movs	r3, #64	@ 0x40
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	2180      	movs	r1, #128	@ 0x80
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f004 fabd 	bl	800b542 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2240      	movs	r2, #64	@ 0x40
 8006fd4:	841a      	strh	r2, [r3, #32]

  return ret;
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	78fa      	ldrb	r2, [r7, #3]
 8006ff0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b04      	cmp	r3, #4
 8007012:	d006      	beq.n	8007022 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800701a:	b2da      	uxtb	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2204      	movs	r2, #4
 8007026:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b04      	cmp	r3, #4
 800704a:	d106      	bne.n	800705a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007052:	b2da      	uxtb	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b03      	cmp	r3, #3
 800707a:	d110      	bne.n	800709e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00b      	beq.n	800709e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	460b      	mov	r3, r1
 80070b2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	32ae      	adds	r2, #174	@ 0xae
 80070be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e01c      	b.n	8007104 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d115      	bne.n	8007102 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	32ae      	adds	r2, #174	@ 0xae
 80070e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00b      	beq.n	8007102 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	32ae      	adds	r2, #174	@ 0xae
 80070f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	78fa      	ldrb	r2, [r7, #3]
 80070fc:	4611      	mov	r1, r2
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	32ae      	adds	r2, #174	@ 0xae
 8007122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800712a:	2303      	movs	r3, #3
 800712c:	e01c      	b.n	8007168 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b03      	cmp	r3, #3
 8007138:	d115      	bne.n	8007166 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	32ae      	adds	r2, #174	@ 0xae
 8007144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00b      	beq.n	8007166 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	32ae      	adds	r2, #174	@ 0xae
 8007158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800715c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715e:	78fa      	ldrb	r2, [r7, #3]
 8007160:	4611      	mov	r1, r2
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00e      	beq.n	80071c2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	6852      	ldr	r2, [r2, #4]
 80071b0:	b2d2      	uxtb	r2, r2
 80071b2:	4611      	mov	r1, r2
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	4798      	blx	r3
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80071be:	2303      	movs	r3, #3
 80071c0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80071d8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80071da:	4618      	mov	r0, r3
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	460b      	mov	r3, r1
 80071f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80071f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007214:	2300      	movs	r3, #0
 8007216:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	885b      	ldrh	r3, [r3, #2]
 800721c:	b29b      	uxth	r3, r3
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	7812      	ldrb	r2, [r2, #0]
 8007222:	4293      	cmp	r3, r2
 8007224:	d91f      	bls.n	8007266 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800722c:	e013      	b.n	8007256 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800722e:	f107 030a 	add.w	r3, r7, #10
 8007232:	4619      	mov	r1, r3
 8007234:	6978      	ldr	r0, [r7, #20]
 8007236:	f000 f81b 	bl	8007270 <USBD_GetNextDesc>
 800723a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	785b      	ldrb	r3, [r3, #1]
 8007240:	2b05      	cmp	r3, #5
 8007242:	d108      	bne.n	8007256 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	789b      	ldrb	r3, [r3, #2]
 800724c:	78fa      	ldrb	r2, [r7, #3]
 800724e:	429a      	cmp	r2, r3
 8007250:	d008      	beq.n	8007264 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007252:	2300      	movs	r3, #0
 8007254:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	885b      	ldrh	r3, [r3, #2]
 800725a:	b29a      	uxth	r2, r3
 800725c:	897b      	ldrh	r3, [r7, #10]
 800725e:	429a      	cmp	r2, r3
 8007260:	d8e5      	bhi.n	800722e <USBD_GetEpDesc+0x2e>
 8007262:	e000      	b.n	8007266 <USBD_GetEpDesc+0x66>
          break;
 8007264:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007266:	693b      	ldr	r3, [r7, #16]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	7812      	ldrb	r2, [r2, #0]
 8007286:	4413      	add	r3, r2
 8007288:	b29a      	uxth	r2, r3
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4413      	add	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800729a:	68fb      	ldr	r3, [r7, #12]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	3301      	adds	r3, #1
 80072be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80072c6:	8a3b      	ldrh	r3, [r7, #16]
 80072c8:	021b      	lsls	r3, r3, #8
 80072ca:	b21a      	sxth	r2, r3
 80072cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	b21b      	sxth	r3, r3
 80072d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80072d6:	89fb      	ldrh	r3, [r7, #14]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	371c      	adds	r7, #28
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ee:	2300      	movs	r3, #0
 80072f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072fa:	2b40      	cmp	r3, #64	@ 0x40
 80072fc:	d005      	beq.n	800730a <USBD_StdDevReq+0x26>
 80072fe:	2b40      	cmp	r3, #64	@ 0x40
 8007300:	d857      	bhi.n	80073b2 <USBD_StdDevReq+0xce>
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00f      	beq.n	8007326 <USBD_StdDevReq+0x42>
 8007306:	2b20      	cmp	r3, #32
 8007308:	d153      	bne.n	80073b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	32ae      	adds	r2, #174	@ 0xae
 8007314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	4798      	blx	r3
 8007320:	4603      	mov	r3, r0
 8007322:	73fb      	strb	r3, [r7, #15]
      break;
 8007324:	e04a      	b.n	80073bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	785b      	ldrb	r3, [r3, #1]
 800732a:	2b09      	cmp	r3, #9
 800732c:	d83b      	bhi.n	80073a6 <USBD_StdDevReq+0xc2>
 800732e:	a201      	add	r2, pc, #4	@ (adr r2, 8007334 <USBD_StdDevReq+0x50>)
 8007330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007334:	08007389 	.word	0x08007389
 8007338:	0800739d 	.word	0x0800739d
 800733c:	080073a7 	.word	0x080073a7
 8007340:	08007393 	.word	0x08007393
 8007344:	080073a7 	.word	0x080073a7
 8007348:	08007367 	.word	0x08007367
 800734c:	0800735d 	.word	0x0800735d
 8007350:	080073a7 	.word	0x080073a7
 8007354:	0800737f 	.word	0x0800737f
 8007358:	08007371 	.word	0x08007371
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fa3e 	bl	80077e0 <USBD_GetDescriptor>
          break;
 8007364:	e024      	b.n	80073b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fbcd 	bl	8007b08 <USBD_SetAddress>
          break;
 800736e:	e01f      	b.n	80073b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fc0c 	bl	8007b90 <USBD_SetConfig>
 8007378:	4603      	mov	r3, r0
 800737a:	73fb      	strb	r3, [r7, #15]
          break;
 800737c:	e018      	b.n	80073b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fcaf 	bl	8007ce4 <USBD_GetConfig>
          break;
 8007386:	e013      	b.n	80073b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fce0 	bl	8007d50 <USBD_GetStatus>
          break;
 8007390:	e00e      	b.n	80073b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fd0f 	bl	8007db8 <USBD_SetFeature>
          break;
 800739a:	e009      	b.n	80073b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800739c:	6839      	ldr	r1, [r7, #0]
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fd33 	bl	8007e0a <USBD_ClrFeature>
          break;
 80073a4:	e004      	b.n	80073b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fd8a 	bl	8007ec2 <USBD_CtlError>
          break;
 80073ae:	bf00      	nop
      }
      break;
 80073b0:	e004      	b.n	80073bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fd84 	bl	8007ec2 <USBD_CtlError>
      break;
 80073ba:	bf00      	nop
  }

  return ret;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop

080073c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073de:	2b40      	cmp	r3, #64	@ 0x40
 80073e0:	d005      	beq.n	80073ee <USBD_StdItfReq+0x26>
 80073e2:	2b40      	cmp	r3, #64	@ 0x40
 80073e4:	d852      	bhi.n	800748c <USBD_StdItfReq+0xc4>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <USBD_StdItfReq+0x26>
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	d14e      	bne.n	800748c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	3b01      	subs	r3, #1
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d840      	bhi.n	800747e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	889b      	ldrh	r3, [r3, #4]
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b01      	cmp	r3, #1
 8007404:	d836      	bhi.n	8007474 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	889b      	ldrh	r3, [r3, #4]
 800740a:	b2db      	uxtb	r3, r3
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7ff fedc 	bl	80071cc <USBD_CoreFindIF>
 8007414:	4603      	mov	r3, r0
 8007416:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	2bff      	cmp	r3, #255	@ 0xff
 800741c:	d01d      	beq.n	800745a <USBD_StdItfReq+0x92>
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d11a      	bne.n	800745a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007424:	7bba      	ldrb	r2, [r7, #14]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	32ae      	adds	r2, #174	@ 0xae
 800742a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00f      	beq.n	8007454 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007434:	7bba      	ldrb	r2, [r7, #14]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800743c:	7bba      	ldrb	r2, [r7, #14]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	32ae      	adds	r2, #174	@ 0xae
 8007442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	4798      	blx	r3
 800744e:	4603      	mov	r3, r0
 8007450:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007452:	e004      	b.n	800745e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007454:	2303      	movs	r3, #3
 8007456:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007458:	e001      	b.n	800745e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800745a:	2303      	movs	r3, #3
 800745c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	88db      	ldrh	r3, [r3, #6]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d110      	bne.n	8007488 <USBD_StdItfReq+0xc0>
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10d      	bne.n	8007488 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fe06 	bl	800807e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007472:	e009      	b.n	8007488 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fd23 	bl	8007ec2 <USBD_CtlError>
          break;
 800747c:	e004      	b.n	8007488 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fd1e 	bl	8007ec2 <USBD_CtlError>
          break;
 8007486:	e000      	b.n	800748a <USBD_StdItfReq+0xc2>
          break;
 8007488:	bf00      	nop
      }
      break;
 800748a:	e004      	b.n	8007496 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fd17 	bl	8007ec2 <USBD_CtlError>
      break;
 8007494:	bf00      	nop
  }

  return ret;
 8007496:	7bfb      	ldrb	r3, [r7, #15]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	889b      	ldrh	r3, [r3, #4]
 80074b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074bc:	2b40      	cmp	r3, #64	@ 0x40
 80074be:	d007      	beq.n	80074d0 <USBD_StdEPReq+0x30>
 80074c0:	2b40      	cmp	r3, #64	@ 0x40
 80074c2:	f200 8181 	bhi.w	80077c8 <USBD_StdEPReq+0x328>
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d02a      	beq.n	8007520 <USBD_StdEPReq+0x80>
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	f040 817c 	bne.w	80077c8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80074d0:	7bbb      	ldrb	r3, [r7, #14]
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7ff fe86 	bl	80071e6 <USBD_CoreFindEP>
 80074da:	4603      	mov	r3, r0
 80074dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074de:	7b7b      	ldrb	r3, [r7, #13]
 80074e0:	2bff      	cmp	r3, #255	@ 0xff
 80074e2:	f000 8176 	beq.w	80077d2 <USBD_StdEPReq+0x332>
 80074e6:	7b7b      	ldrb	r3, [r7, #13]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f040 8172 	bne.w	80077d2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80074ee:	7b7a      	ldrb	r2, [r7, #13]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80074f6:	7b7a      	ldrb	r2, [r7, #13]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	32ae      	adds	r2, #174	@ 0xae
 80074fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 8165 	beq.w	80077d2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007508:	7b7a      	ldrb	r2, [r7, #13]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	32ae      	adds	r2, #174	@ 0xae
 800750e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	4798      	blx	r3
 800751a:	4603      	mov	r3, r0
 800751c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800751e:	e158      	b.n	80077d2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	785b      	ldrb	r3, [r3, #1]
 8007524:	2b03      	cmp	r3, #3
 8007526:	d008      	beq.n	800753a <USBD_StdEPReq+0x9a>
 8007528:	2b03      	cmp	r3, #3
 800752a:	f300 8147 	bgt.w	80077bc <USBD_StdEPReq+0x31c>
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 809b 	beq.w	800766a <USBD_StdEPReq+0x1ca>
 8007534:	2b01      	cmp	r3, #1
 8007536:	d03c      	beq.n	80075b2 <USBD_StdEPReq+0x112>
 8007538:	e140      	b.n	80077bc <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b02      	cmp	r3, #2
 8007544:	d002      	beq.n	800754c <USBD_StdEPReq+0xac>
 8007546:	2b03      	cmp	r3, #3
 8007548:	d016      	beq.n	8007578 <USBD_StdEPReq+0xd8>
 800754a:	e02c      	b.n	80075a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00d      	beq.n	800756e <USBD_StdEPReq+0xce>
 8007552:	7bbb      	ldrb	r3, [r7, #14]
 8007554:	2b80      	cmp	r3, #128	@ 0x80
 8007556:	d00a      	beq.n	800756e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007558:	7bbb      	ldrb	r3, [r7, #14]
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f004 f835 	bl	800b5cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007562:	2180      	movs	r1, #128	@ 0x80
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f004 f831 	bl	800b5cc <USBD_LL_StallEP>
 800756a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800756c:	e020      	b.n	80075b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fca6 	bl	8007ec2 <USBD_CtlError>
              break;
 8007576:	e01b      	b.n	80075b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	885b      	ldrh	r3, [r3, #2]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10e      	bne.n	800759e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007580:	7bbb      	ldrb	r3, [r7, #14]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00b      	beq.n	800759e <USBD_StdEPReq+0xfe>
 8007586:	7bbb      	ldrb	r3, [r7, #14]
 8007588:	2b80      	cmp	r3, #128	@ 0x80
 800758a:	d008      	beq.n	800759e <USBD_StdEPReq+0xfe>
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	88db      	ldrh	r3, [r3, #6]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d104      	bne.n	800759e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	4619      	mov	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f004 f817 	bl	800b5cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fd6d 	bl	800807e <USBD_CtlSendStatus>

              break;
 80075a4:	e004      	b.n	80075b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fc8a 	bl	8007ec2 <USBD_CtlError>
              break;
 80075ae:	bf00      	nop
          }
          break;
 80075b0:	e109      	b.n	80077c6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d002      	beq.n	80075c4 <USBD_StdEPReq+0x124>
 80075be:	2b03      	cmp	r3, #3
 80075c0:	d016      	beq.n	80075f0 <USBD_StdEPReq+0x150>
 80075c2:	e04b      	b.n	800765c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00d      	beq.n	80075e6 <USBD_StdEPReq+0x146>
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	2b80      	cmp	r3, #128	@ 0x80
 80075ce:	d00a      	beq.n	80075e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075d0:	7bbb      	ldrb	r3, [r7, #14]
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f003 fff9 	bl	800b5cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075da:	2180      	movs	r1, #128	@ 0x80
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f003 fff5 	bl	800b5cc <USBD_LL_StallEP>
 80075e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075e4:	e040      	b.n	8007668 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fc6a 	bl	8007ec2 <USBD_CtlError>
              break;
 80075ee:	e03b      	b.n	8007668 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	885b      	ldrh	r3, [r3, #2]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d136      	bne.n	8007666 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d004      	beq.n	800760c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f003 ffff 	bl	800b60a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fd36 	bl	800807e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	4619      	mov	r1, r3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7ff fde5 	bl	80071e6 <USBD_CoreFindEP>
 800761c:	4603      	mov	r3, r0
 800761e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007620:	7b7b      	ldrb	r3, [r7, #13]
 8007622:	2bff      	cmp	r3, #255	@ 0xff
 8007624:	d01f      	beq.n	8007666 <USBD_StdEPReq+0x1c6>
 8007626:	7b7b      	ldrb	r3, [r7, #13]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d11c      	bne.n	8007666 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800762c:	7b7a      	ldrb	r2, [r7, #13]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007634:	7b7a      	ldrb	r2, [r7, #13]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	32ae      	adds	r2, #174	@ 0xae
 800763a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d010      	beq.n	8007666 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007644:	7b7a      	ldrb	r2, [r7, #13]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	32ae      	adds	r2, #174	@ 0xae
 800764a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	4798      	blx	r3
 8007656:	4603      	mov	r3, r0
 8007658:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800765a:	e004      	b.n	8007666 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fc2f 	bl	8007ec2 <USBD_CtlError>
              break;
 8007664:	e000      	b.n	8007668 <USBD_StdEPReq+0x1c8>
              break;
 8007666:	bf00      	nop
          }
          break;
 8007668:	e0ad      	b.n	80077c6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d002      	beq.n	800767c <USBD_StdEPReq+0x1dc>
 8007676:	2b03      	cmp	r3, #3
 8007678:	d033      	beq.n	80076e2 <USBD_StdEPReq+0x242>
 800767a:	e099      	b.n	80077b0 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800767c:	7bbb      	ldrb	r3, [r7, #14]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d007      	beq.n	8007692 <USBD_StdEPReq+0x1f2>
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	2b80      	cmp	r3, #128	@ 0x80
 8007686:	d004      	beq.n	8007692 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fc19 	bl	8007ec2 <USBD_CtlError>
                break;
 8007690:	e093      	b.n	80077ba <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007692:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007696:	2b00      	cmp	r3, #0
 8007698:	da0b      	bge.n	80076b2 <USBD_StdEPReq+0x212>
 800769a:	7bbb      	ldrb	r3, [r7, #14]
 800769c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076a0:	4613      	mov	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	3310      	adds	r3, #16
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	4413      	add	r3, r2
 80076ae:	3304      	adds	r3, #4
 80076b0:	e00b      	b.n	80076ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076b2:	7bbb      	ldrb	r3, [r7, #14]
 80076b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076b8:	4613      	mov	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	4413      	add	r3, r2
 80076c8:	3304      	adds	r3, #4
 80076ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2200      	movs	r2, #0
 80076d0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	330e      	adds	r3, #14
 80076d6:	2202      	movs	r2, #2
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fc6e 	bl	8007fbc <USBD_CtlSendData>
              break;
 80076e0:	e06b      	b.n	80077ba <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80076e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	da11      	bge.n	800770e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	f003 020f 	and.w	r2, r3, #15
 80076f0:	6879      	ldr	r1, [r7, #4]
 80076f2:	4613      	mov	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	440b      	add	r3, r1
 80076fc:	3323      	adds	r3, #35	@ 0x23
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d117      	bne.n	8007734 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fbdb 	bl	8007ec2 <USBD_CtlError>
                  break;
 800770c:	e055      	b.n	80077ba <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800770e:	7bbb      	ldrb	r3, [r7, #14]
 8007710:	f003 020f 	and.w	r2, r3, #15
 8007714:	6879      	ldr	r1, [r7, #4]
 8007716:	4613      	mov	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	440b      	add	r3, r1
 8007720:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d104      	bne.n	8007734 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fbc8 	bl	8007ec2 <USBD_CtlError>
                  break;
 8007732:	e042      	b.n	80077ba <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007734:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007738:	2b00      	cmp	r3, #0
 800773a:	da0b      	bge.n	8007754 <USBD_StdEPReq+0x2b4>
 800773c:	7bbb      	ldrb	r3, [r7, #14]
 800773e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007742:	4613      	mov	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	3310      	adds	r3, #16
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	4413      	add	r3, r2
 8007750:	3304      	adds	r3, #4
 8007752:	e00b      	b.n	800776c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800775a:	4613      	mov	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	4413      	add	r3, r2
 800776a:	3304      	adds	r3, #4
 800776c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800776e:	7bbb      	ldrb	r3, [r7, #14]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <USBD_StdEPReq+0x2da>
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	2b80      	cmp	r3, #128	@ 0x80
 8007778:	d103      	bne.n	8007782 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2200      	movs	r2, #0
 800777e:	739a      	strb	r2, [r3, #14]
 8007780:	e00e      	b.n	80077a0 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007782:	7bbb      	ldrb	r3, [r7, #14]
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f003 ff5e 	bl	800b648 <USBD_LL_IsStallEP>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2201      	movs	r2, #1
 8007796:	739a      	strb	r2, [r3, #14]
 8007798:	e002      	b.n	80077a0 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2200      	movs	r2, #0
 800779e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	330e      	adds	r3, #14
 80077a4:	2202      	movs	r2, #2
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fc07 	bl	8007fbc <USBD_CtlSendData>
              break;
 80077ae:	e004      	b.n	80077ba <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fb85 	bl	8007ec2 <USBD_CtlError>
              break;
 80077b8:	bf00      	nop
          }
          break;
 80077ba:	e004      	b.n	80077c6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fb7f 	bl	8007ec2 <USBD_CtlError>
          break;
 80077c4:	bf00      	nop
      }
      break;
 80077c6:	e005      	b.n	80077d4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fb79 	bl	8007ec2 <USBD_CtlError>
      break;
 80077d0:	e000      	b.n	80077d4 <USBD_StdEPReq+0x334>
      break;
 80077d2:	bf00      	nop
  }

  return ret;
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	885b      	ldrh	r3, [r3, #2]
 80077fa:	0a1b      	lsrs	r3, r3, #8
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	3b01      	subs	r3, #1
 8007800:	2b0e      	cmp	r3, #14
 8007802:	f200 8152 	bhi.w	8007aaa <USBD_GetDescriptor+0x2ca>
 8007806:	a201      	add	r2, pc, #4	@ (adr r2, 800780c <USBD_GetDescriptor+0x2c>)
 8007808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780c:	0800787d 	.word	0x0800787d
 8007810:	08007895 	.word	0x08007895
 8007814:	080078d5 	.word	0x080078d5
 8007818:	08007aab 	.word	0x08007aab
 800781c:	08007aab 	.word	0x08007aab
 8007820:	08007a4b 	.word	0x08007a4b
 8007824:	08007a77 	.word	0x08007a77
 8007828:	08007aab 	.word	0x08007aab
 800782c:	08007aab 	.word	0x08007aab
 8007830:	08007aab 	.word	0x08007aab
 8007834:	08007aab 	.word	0x08007aab
 8007838:	08007aab 	.word	0x08007aab
 800783c:	08007aab 	.word	0x08007aab
 8007840:	08007aab 	.word	0x08007aab
 8007844:	08007849 	.word	0x08007849
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800784e:	69db      	ldr	r3, [r3, #28]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00b      	beq.n	800786c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800785a:	69db      	ldr	r3, [r3, #28]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	7c12      	ldrb	r2, [r2, #16]
 8007860:	f107 0108 	add.w	r1, r7, #8
 8007864:	4610      	mov	r0, r2
 8007866:	4798      	blx	r3
 8007868:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800786a:	e126      	b.n	8007aba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800786c:	6839      	ldr	r1, [r7, #0]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fb27 	bl	8007ec2 <USBD_CtlError>
        err++;
 8007874:	7afb      	ldrb	r3, [r7, #11]
 8007876:	3301      	adds	r3, #1
 8007878:	72fb      	strb	r3, [r7, #11]
      break;
 800787a:	e11e      	b.n	8007aba <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	7c12      	ldrb	r2, [r2, #16]
 8007888:	f107 0108 	add.w	r1, r7, #8
 800788c:	4610      	mov	r0, r2
 800788e:	4798      	blx	r3
 8007890:	60f8      	str	r0, [r7, #12]
      break;
 8007892:	e112      	b.n	8007aba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	7c1b      	ldrb	r3, [r3, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10d      	bne.n	80078b8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a4:	f107 0208 	add.w	r2, r7, #8
 80078a8:	4610      	mov	r0, r2
 80078aa:	4798      	blx	r3
 80078ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3301      	adds	r3, #1
 80078b2:	2202      	movs	r2, #2
 80078b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80078b6:	e100      	b.n	8007aba <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c0:	f107 0208 	add.w	r2, r7, #8
 80078c4:	4610      	mov	r0, r2
 80078c6:	4798      	blx	r3
 80078c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3301      	adds	r3, #1
 80078ce:	2202      	movs	r2, #2
 80078d0:	701a      	strb	r2, [r3, #0]
      break;
 80078d2:	e0f2      	b.n	8007aba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	885b      	ldrh	r3, [r3, #2]
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b05      	cmp	r3, #5
 80078dc:	f200 80ac 	bhi.w	8007a38 <USBD_GetDescriptor+0x258>
 80078e0:	a201      	add	r2, pc, #4	@ (adr r2, 80078e8 <USBD_GetDescriptor+0x108>)
 80078e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e6:	bf00      	nop
 80078e8:	08007901 	.word	0x08007901
 80078ec:	08007935 	.word	0x08007935
 80078f0:	08007969 	.word	0x08007969
 80078f4:	0800799d 	.word	0x0800799d
 80078f8:	080079d1 	.word	0x080079d1
 80078fc:	08007a05 	.word	0x08007a05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00b      	beq.n	8007924 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	7c12      	ldrb	r2, [r2, #16]
 8007918:	f107 0108 	add.w	r1, r7, #8
 800791c:	4610      	mov	r0, r2
 800791e:	4798      	blx	r3
 8007920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007922:	e091      	b.n	8007a48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 facb 	bl	8007ec2 <USBD_CtlError>
            err++;
 800792c:	7afb      	ldrb	r3, [r7, #11]
 800792e:	3301      	adds	r3, #1
 8007930:	72fb      	strb	r3, [r7, #11]
          break;
 8007932:	e089      	b.n	8007a48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00b      	beq.n	8007958 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	7c12      	ldrb	r2, [r2, #16]
 800794c:	f107 0108 	add.w	r1, r7, #8
 8007950:	4610      	mov	r0, r2
 8007952:	4798      	blx	r3
 8007954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007956:	e077      	b.n	8007a48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007958:	6839      	ldr	r1, [r7, #0]
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fab1 	bl	8007ec2 <USBD_CtlError>
            err++;
 8007960:	7afb      	ldrb	r3, [r7, #11]
 8007962:	3301      	adds	r3, #1
 8007964:	72fb      	strb	r3, [r7, #11]
          break;
 8007966:	e06f      	b.n	8007a48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00b      	beq.n	800798c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	7c12      	ldrb	r2, [r2, #16]
 8007980:	f107 0108 	add.w	r1, r7, #8
 8007984:	4610      	mov	r0, r2
 8007986:	4798      	blx	r3
 8007988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800798a:	e05d      	b.n	8007a48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fa97 	bl	8007ec2 <USBD_CtlError>
            err++;
 8007994:	7afb      	ldrb	r3, [r7, #11]
 8007996:	3301      	adds	r3, #1
 8007998:	72fb      	strb	r3, [r7, #11]
          break;
 800799a:	e055      	b.n	8007a48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00b      	beq.n	80079c0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	7c12      	ldrb	r2, [r2, #16]
 80079b4:	f107 0108 	add.w	r1, r7, #8
 80079b8:	4610      	mov	r0, r2
 80079ba:	4798      	blx	r3
 80079bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079be:	e043      	b.n	8007a48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fa7d 	bl	8007ec2 <USBD_CtlError>
            err++;
 80079c8:	7afb      	ldrb	r3, [r7, #11]
 80079ca:	3301      	adds	r3, #1
 80079cc:	72fb      	strb	r3, [r7, #11]
          break;
 80079ce:	e03b      	b.n	8007a48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00b      	beq.n	80079f4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	7c12      	ldrb	r2, [r2, #16]
 80079e8:	f107 0108 	add.w	r1, r7, #8
 80079ec:	4610      	mov	r0, r2
 80079ee:	4798      	blx	r3
 80079f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079f2:	e029      	b.n	8007a48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fa63 	bl	8007ec2 <USBD_CtlError>
            err++;
 80079fc:	7afb      	ldrb	r3, [r7, #11]
 80079fe:	3301      	adds	r3, #1
 8007a00:	72fb      	strb	r3, [r7, #11]
          break;
 8007a02:	e021      	b.n	8007a48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00b      	beq.n	8007a28 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	7c12      	ldrb	r2, [r2, #16]
 8007a1c:	f107 0108 	add.w	r1, r7, #8
 8007a20:	4610      	mov	r0, r2
 8007a22:	4798      	blx	r3
 8007a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a26:	e00f      	b.n	8007a48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fa49 	bl	8007ec2 <USBD_CtlError>
            err++;
 8007a30:	7afb      	ldrb	r3, [r7, #11]
 8007a32:	3301      	adds	r3, #1
 8007a34:	72fb      	strb	r3, [r7, #11]
          break;
 8007a36:	e007      	b.n	8007a48 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fa41 	bl	8007ec2 <USBD_CtlError>
          err++;
 8007a40:	7afb      	ldrb	r3, [r7, #11]
 8007a42:	3301      	adds	r3, #1
 8007a44:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007a46:	bf00      	nop
      }
      break;
 8007a48:	e037      	b.n	8007aba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	7c1b      	ldrb	r3, [r3, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d109      	bne.n	8007a66 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a5a:	f107 0208 	add.w	r2, r7, #8
 8007a5e:	4610      	mov	r0, r2
 8007a60:	4798      	blx	r3
 8007a62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a64:	e029      	b.n	8007aba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fa2a 	bl	8007ec2 <USBD_CtlError>
        err++;
 8007a6e:	7afb      	ldrb	r3, [r7, #11]
 8007a70:	3301      	adds	r3, #1
 8007a72:	72fb      	strb	r3, [r7, #11]
      break;
 8007a74:	e021      	b.n	8007aba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	7c1b      	ldrb	r3, [r3, #16]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10d      	bne.n	8007a9a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a86:	f107 0208 	add.w	r2, r7, #8
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	4798      	blx	r3
 8007a8e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3301      	adds	r3, #1
 8007a94:	2207      	movs	r2, #7
 8007a96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a98:	e00f      	b.n	8007aba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fa10 	bl	8007ec2 <USBD_CtlError>
        err++;
 8007aa2:	7afb      	ldrb	r3, [r7, #11]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	72fb      	strb	r3, [r7, #11]
      break;
 8007aa8:	e007      	b.n	8007aba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fa08 	bl	8007ec2 <USBD_CtlError>
      err++;
 8007ab2:	7afb      	ldrb	r3, [r7, #11]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ab8:	bf00      	nop
  }

  if (err != 0U)
 8007aba:	7afb      	ldrb	r3, [r7, #11]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d11e      	bne.n	8007afe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	88db      	ldrh	r3, [r3, #6]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d016      	beq.n	8007af6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007ac8:	893b      	ldrh	r3, [r7, #8]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00e      	beq.n	8007aec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	88da      	ldrh	r2, [r3, #6]
 8007ad2:	893b      	ldrh	r3, [r7, #8]
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	bf28      	it	cs
 8007ad8:	4613      	movcs	r3, r2
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ade:	893b      	ldrh	r3, [r7, #8]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	68f9      	ldr	r1, [r7, #12]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fa69 	bl	8007fbc <USBD_CtlSendData>
 8007aea:	e009      	b.n	8007b00 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f9e7 	bl	8007ec2 <USBD_CtlError>
 8007af4:	e004      	b.n	8007b00 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fac1 	bl	800807e <USBD_CtlSendStatus>
 8007afc:	e000      	b.n	8007b00 <USBD_GetDescriptor+0x320>
    return;
 8007afe:	bf00      	nop
  }
}
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop

08007b08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	889b      	ldrh	r3, [r3, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d131      	bne.n	8007b7e <USBD_SetAddress+0x76>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	88db      	ldrh	r3, [r3, #6]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d12d      	bne.n	8007b7e <USBD_SetAddress+0x76>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	885b      	ldrh	r3, [r3, #2]
 8007b26:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b28:	d829      	bhi.n	8007b7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	885b      	ldrh	r3, [r3, #2]
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d104      	bne.n	8007b4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f9bc 	bl	8007ec2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b4a:	e01d      	b.n	8007b88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	7bfa      	ldrb	r2, [r7, #15]
 8007b50:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
 8007b56:	4619      	mov	r1, r3
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f003 fda1 	bl	800b6a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fa8d 	bl	800807e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d004      	beq.n	8007b74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b72:	e009      	b.n	8007b88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b7c:	e004      	b.n	8007b88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f99e 	bl	8007ec2 <USBD_CtlError>
  }
}
 8007b86:	bf00      	nop
 8007b88:	bf00      	nop
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	885b      	ldrh	r3, [r3, #2]
 8007ba2:	b2da      	uxtb	r2, r3
 8007ba4:	4b4e      	ldr	r3, [pc, #312]	@ (8007ce0 <USBD_SetConfig+0x150>)
 8007ba6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ba8:	4b4d      	ldr	r3, [pc, #308]	@ (8007ce0 <USBD_SetConfig+0x150>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d905      	bls.n	8007bbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f985 	bl	8007ec2 <USBD_CtlError>
    return USBD_FAIL;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e08c      	b.n	8007cd6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d002      	beq.n	8007bce <USBD_SetConfig+0x3e>
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d029      	beq.n	8007c20 <USBD_SetConfig+0x90>
 8007bcc:	e075      	b.n	8007cba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007bce:	4b44      	ldr	r3, [pc, #272]	@ (8007ce0 <USBD_SetConfig+0x150>)
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d020      	beq.n	8007c18 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007bd6:	4b42      	ldr	r3, [pc, #264]	@ (8007ce0 <USBD_SetConfig+0x150>)
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007be0:	4b3f      	ldr	r3, [pc, #252]	@ (8007ce0 <USBD_SetConfig+0x150>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7fe ffa5 	bl	8006b36 <USBD_SetClassConfig>
 8007bec:	4603      	mov	r3, r0
 8007bee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d008      	beq.n	8007c08 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f962 	bl	8007ec2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2202      	movs	r2, #2
 8007c02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c06:	e065      	b.n	8007cd4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fa38 	bl	800807e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2203      	movs	r2, #3
 8007c12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007c16:	e05d      	b.n	8007cd4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fa30 	bl	800807e <USBD_CtlSendStatus>
      break;
 8007c1e:	e059      	b.n	8007cd4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007c20:	4b2f      	ldr	r3, [pc, #188]	@ (8007ce0 <USBD_SetConfig+0x150>)
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d112      	bne.n	8007c4e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007c30:	4b2b      	ldr	r3, [pc, #172]	@ (8007ce0 <USBD_SetConfig+0x150>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	461a      	mov	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c3a:	4b29      	ldr	r3, [pc, #164]	@ (8007ce0 <USBD_SetConfig+0x150>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7fe ff94 	bl	8006b6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fa19 	bl	800807e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c4c:	e042      	b.n	8007cd4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007c4e:	4b24      	ldr	r3, [pc, #144]	@ (8007ce0 <USBD_SetConfig+0x150>)
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d02a      	beq.n	8007cb2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7fe ff82 	bl	8006b6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ce0 <USBD_SetConfig+0x150>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c74:	4b1a      	ldr	r3, [pc, #104]	@ (8007ce0 <USBD_SetConfig+0x150>)
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7fe ff5b 	bl	8006b36 <USBD_SetClassConfig>
 8007c80:	4603      	mov	r3, r0
 8007c82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00f      	beq.n	8007caa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f918 	bl	8007ec2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7fe ff67 	bl	8006b6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007ca8:	e014      	b.n	8007cd4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f9e7 	bl	800807e <USBD_CtlSendStatus>
      break;
 8007cb0:	e010      	b.n	8007cd4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f9e3 	bl	800807e <USBD_CtlSendStatus>
      break;
 8007cb8:	e00c      	b.n	8007cd4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f900 	bl	8007ec2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007cc2:	4b07      	ldr	r3, [pc, #28]	@ (8007ce0 <USBD_SetConfig+0x150>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7fe ff50 	bl	8006b6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd2:	bf00      	nop
  }

  return ret;
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20000218 	.word	0x20000218

08007ce4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	88db      	ldrh	r3, [r3, #6]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d004      	beq.n	8007d00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f8e2 	bl	8007ec2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007cfe:	e023      	b.n	8007d48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	dc02      	bgt.n	8007d12 <USBD_GetConfig+0x2e>
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	dc03      	bgt.n	8007d18 <USBD_GetConfig+0x34>
 8007d10:	e015      	b.n	8007d3e <USBD_GetConfig+0x5a>
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d00b      	beq.n	8007d2e <USBD_GetConfig+0x4a>
 8007d16:	e012      	b.n	8007d3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	3308      	adds	r3, #8
 8007d22:	2201      	movs	r2, #1
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f948 	bl	8007fbc <USBD_CtlSendData>
        break;
 8007d2c:	e00c      	b.n	8007d48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	3304      	adds	r3, #4
 8007d32:	2201      	movs	r2, #1
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f940 	bl	8007fbc <USBD_CtlSendData>
        break;
 8007d3c:	e004      	b.n	8007d48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f8be 	bl	8007ec2 <USBD_CtlError>
        break;
 8007d46:	bf00      	nop
}
 8007d48:	bf00      	nop
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	3b01      	subs	r3, #1
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d81e      	bhi.n	8007da6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	88db      	ldrh	r3, [r3, #6]
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d004      	beq.n	8007d7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f8a5 	bl	8007ec2 <USBD_CtlError>
        break;
 8007d78:	e01a      	b.n	8007db0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d005      	beq.n	8007d96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	f043 0202 	orr.w	r2, r3, #2
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	330c      	adds	r3, #12
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f90c 	bl	8007fbc <USBD_CtlSendData>
      break;
 8007da4:	e004      	b.n	8007db0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f88a 	bl	8007ec2 <USBD_CtlError>
      break;
 8007dae:	bf00      	nop
  }
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	885b      	ldrh	r3, [r3, #2]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d107      	bne.n	8007dda <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f953 	bl	800807e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007dd8:	e013      	b.n	8007e02 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	885b      	ldrh	r3, [r3, #2]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d10b      	bne.n	8007dfa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	889b      	ldrh	r3, [r3, #4]
 8007de6:	0a1b      	lsrs	r3, r3, #8
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f943 	bl	800807e <USBD_CtlSendStatus>
}
 8007df8:	e003      	b.n	8007e02 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f860 	bl	8007ec2 <USBD_CtlError>
}
 8007e02:	bf00      	nop
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b082      	sub	sp, #8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d80b      	bhi.n	8007e3a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	885b      	ldrh	r3, [r3, #2]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d10c      	bne.n	8007e44 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f923 	bl	800807e <USBD_CtlSendStatus>
      }
      break;
 8007e38:	e004      	b.n	8007e44 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f840 	bl	8007ec2 <USBD_CtlError>
      break;
 8007e42:	e000      	b.n	8007e46 <USBD_ClrFeature+0x3c>
      break;
 8007e44:	bf00      	nop
  }
}
 8007e46:	bf00      	nop
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	781a      	ldrb	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3301      	adds	r3, #1
 8007e68:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	781a      	ldrb	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3301      	adds	r3, #1
 8007e76:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f7ff fa15 	bl	80072a8 <SWAPBYTE>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	461a      	mov	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f7ff fa08 	bl	80072a8 <SWAPBYTE>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f7ff f9fb 	bl	80072a8 <SWAPBYTE>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	80da      	strh	r2, [r3, #6]
}
 8007eba:	bf00      	nop
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b082      	sub	sp, #8
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ecc:	2180      	movs	r1, #128	@ 0x80
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f003 fb7c 	bl	800b5cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f003 fb78 	bl	800b5cc <USBD_LL_StallEP>
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d042      	beq.n	8007f80 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007efe:	6938      	ldr	r0, [r7, #16]
 8007f00:	f000 f842 	bl	8007f88 <USBD_GetLen>
 8007f04:	4603      	mov	r3, r0
 8007f06:	3301      	adds	r3, #1
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f0e:	d808      	bhi.n	8007f22 <USBD_GetString+0x3e>
 8007f10:	6938      	ldr	r0, [r7, #16]
 8007f12:	f000 f839 	bl	8007f88 <USBD_GetLen>
 8007f16:	4603      	mov	r3, r0
 8007f18:	3301      	adds	r3, #1
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	e001      	b.n	8007f26 <USBD_GetString+0x42>
 8007f22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	4413      	add	r3, r2
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	7812      	ldrb	r2, [r2, #0]
 8007f34:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007f3c:	7dfb      	ldrb	r3, [r7, #23]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	4413      	add	r3, r2
 8007f42:	2203      	movs	r2, #3
 8007f44:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007f4c:	e013      	b.n	8007f76 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	4413      	add	r3, r2
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	7812      	ldrb	r2, [r2, #0]
 8007f58:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	613b      	str	r3, [r7, #16]
    idx++;
 8007f60:	7dfb      	ldrb	r3, [r7, #23]
 8007f62:	3301      	adds	r3, #1
 8007f64:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007f70:	7dfb      	ldrb	r3, [r7, #23]
 8007f72:	3301      	adds	r3, #1
 8007f74:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e7      	bne.n	8007f4e <USBD_GetString+0x6a>
 8007f7e:	e000      	b.n	8007f82 <USBD_GetString+0x9e>
    return;
 8007f80:	bf00      	nop
  }
}
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f98:	e005      	b.n	8007fa6 <USBD_GetLen+0x1e>
  {
    len++;
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1f5      	bne.n	8007f9a <USBD_GetLen+0x12>
  }

  return len;
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2202      	movs	r2, #2
 8007fcc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f003 fb78 	bl	800b6de <USBD_LL_Transmit>

  return USBD_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	2100      	movs	r1, #0
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f003 fb67 	bl	800b6de <USBD_LL_Transmit>

  return USBD_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	60b9      	str	r1, [r7, #8]
 8008024:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2203      	movs	r2, #3
 800802a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	2100      	movs	r1, #0
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f003 fb67 	bl	800b720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	2100      	movs	r1, #0
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f003 fb56 	bl	800b720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b082      	sub	sp, #8
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2204      	movs	r2, #4
 800808a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800808e:	2300      	movs	r3, #0
 8008090:	2200      	movs	r2, #0
 8008092:	2100      	movs	r1, #0
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f003 fb22 	bl	800b6de <USBD_LL_Transmit>

  return USBD_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2205      	movs	r2, #5
 80080b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080b4:	2300      	movs	r3, #0
 80080b6:	2200      	movs	r2, #0
 80080b8:	2100      	movs	r1, #0
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f003 fb30 	bl	800b720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
	...

080080cc <__NVIC_SetPriority>:
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	4603      	mov	r3, r0
 80080d4:	6039      	str	r1, [r7, #0]
 80080d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	db0a      	blt.n	80080f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	490c      	ldr	r1, [pc, #48]	@ (8008118 <__NVIC_SetPriority+0x4c>)
 80080e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080ea:	0112      	lsls	r2, r2, #4
 80080ec:	b2d2      	uxtb	r2, r2
 80080ee:	440b      	add	r3, r1
 80080f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80080f4:	e00a      	b.n	800810c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	4908      	ldr	r1, [pc, #32]	@ (800811c <__NVIC_SetPriority+0x50>)
 80080fc:	79fb      	ldrb	r3, [r7, #7]
 80080fe:	f003 030f 	and.w	r3, r3, #15
 8008102:	3b04      	subs	r3, #4
 8008104:	0112      	lsls	r2, r2, #4
 8008106:	b2d2      	uxtb	r2, r2
 8008108:	440b      	add	r3, r1
 800810a:	761a      	strb	r2, [r3, #24]
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr
 8008118:	e000e100 	.word	0xe000e100
 800811c:	e000ed00 	.word	0xe000ed00

08008120 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008120:	b580      	push	{r7, lr}
 8008122:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008124:	4b05      	ldr	r3, [pc, #20]	@ (800813c <SysTick_Handler+0x1c>)
 8008126:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008128:	f001 fd46 	bl	8009bb8 <xTaskGetSchedulerState>
 800812c:	4603      	mov	r3, r0
 800812e:	2b01      	cmp	r3, #1
 8008130:	d001      	beq.n	8008136 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008132:	f002 fbd1 	bl	800a8d8 <xPortSysTickHandler>
  }
}
 8008136:	bf00      	nop
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	e000e010 	.word	0xe000e010

08008140 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008144:	2100      	movs	r1, #0
 8008146:	f06f 0004 	mvn.w	r0, #4
 800814a:	f7ff ffbf 	bl	80080cc <__NVIC_SetPriority>
#endif
}
 800814e:	bf00      	nop
 8008150:	bd80      	pop	{r7, pc}
	...

08008154 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800815a:	f3ef 8305 	mrs	r3, IPSR
 800815e:	603b      	str	r3, [r7, #0]
  return(result);
 8008160:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008162:	2b00      	cmp	r3, #0
 8008164:	d003      	beq.n	800816e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008166:	f06f 0305 	mvn.w	r3, #5
 800816a:	607b      	str	r3, [r7, #4]
 800816c:	e00c      	b.n	8008188 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800816e:	4b0a      	ldr	r3, [pc, #40]	@ (8008198 <osKernelInitialize+0x44>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d105      	bne.n	8008182 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008176:	4b08      	ldr	r3, [pc, #32]	@ (8008198 <osKernelInitialize+0x44>)
 8008178:	2201      	movs	r2, #1
 800817a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800817c:	2300      	movs	r3, #0
 800817e:	607b      	str	r3, [r7, #4]
 8008180:	e002      	b.n	8008188 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008182:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008186:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008188:	687b      	ldr	r3, [r7, #4]
}
 800818a:	4618      	mov	r0, r3
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	2000021c 	.word	0x2000021c

0800819c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081a2:	f3ef 8305 	mrs	r3, IPSR
 80081a6:	603b      	str	r3, [r7, #0]
  return(result);
 80081a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80081ae:	f06f 0305 	mvn.w	r3, #5
 80081b2:	607b      	str	r3, [r7, #4]
 80081b4:	e010      	b.n	80081d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80081b6:	4b0b      	ldr	r3, [pc, #44]	@ (80081e4 <osKernelStart+0x48>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d109      	bne.n	80081d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80081be:	f7ff ffbf 	bl	8008140 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80081c2:	4b08      	ldr	r3, [pc, #32]	@ (80081e4 <osKernelStart+0x48>)
 80081c4:	2202      	movs	r2, #2
 80081c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80081c8:	f001 f892 	bl	80092f0 <vTaskStartScheduler>
      stat = osOK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	607b      	str	r3, [r7, #4]
 80081d0:	e002      	b.n	80081d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80081d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80081d8:	687b      	ldr	r3, [r7, #4]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	2000021c 	.word	0x2000021c

080081e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08e      	sub	sp, #56	@ 0x38
 80081ec:	af04      	add	r7, sp, #16
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80081f4:	2300      	movs	r3, #0
 80081f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081f8:	f3ef 8305 	mrs	r3, IPSR
 80081fc:	617b      	str	r3, [r7, #20]
  return(result);
 80081fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008200:	2b00      	cmp	r3, #0
 8008202:	d17e      	bne.n	8008302 <osThreadNew+0x11a>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d07b      	beq.n	8008302 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800820a:	2380      	movs	r3, #128	@ 0x80
 800820c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800820e:	2318      	movs	r3, #24
 8008210:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008212:	2300      	movs	r3, #0
 8008214:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008216:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800821a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d045      	beq.n	80082ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d002      	beq.n	8008230 <osThreadNew+0x48>
        name = attr->name;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d008      	beq.n	8008256 <osThreadNew+0x6e>
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	2b38      	cmp	r3, #56	@ 0x38
 8008248:	d805      	bhi.n	8008256 <osThreadNew+0x6e>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <osThreadNew+0x72>
        return (NULL);
 8008256:	2300      	movs	r3, #0
 8008258:	e054      	b.n	8008304 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	089b      	lsrs	r3, r3, #2
 8008268:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00e      	beq.n	8008290 <osThreadNew+0xa8>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	2ba7      	cmp	r3, #167	@ 0xa7
 8008278:	d90a      	bls.n	8008290 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800827e:	2b00      	cmp	r3, #0
 8008280:	d006      	beq.n	8008290 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <osThreadNew+0xa8>
        mem = 1;
 800828a:	2301      	movs	r3, #1
 800828c:	61bb      	str	r3, [r7, #24]
 800828e:	e010      	b.n	80082b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10c      	bne.n	80082b2 <osThreadNew+0xca>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d108      	bne.n	80082b2 <osThreadNew+0xca>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d104      	bne.n	80082b2 <osThreadNew+0xca>
          mem = 0;
 80082a8:	2300      	movs	r3, #0
 80082aa:	61bb      	str	r3, [r7, #24]
 80082ac:	e001      	b.n	80082b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d110      	bne.n	80082da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80082c0:	9202      	str	r2, [sp, #8]
 80082c2:	9301      	str	r3, [sp, #4]
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	6a3a      	ldr	r2, [r7, #32]
 80082cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f000 fe1a 	bl	8008f08 <xTaskCreateStatic>
 80082d4:	4603      	mov	r3, r0
 80082d6:	613b      	str	r3, [r7, #16]
 80082d8:	e013      	b.n	8008302 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d110      	bne.n	8008302 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	f107 0310 	add.w	r3, r7, #16
 80082e8:	9301      	str	r3, [sp, #4]
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 fe68 	bl	8008fc8 <xTaskCreate>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d001      	beq.n	8008302 <osThreadNew+0x11a>
            hTask = NULL;
 80082fe:	2300      	movs	r3, #0
 8008300:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008302:	693b      	ldr	r3, [r7, #16]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3728      	adds	r7, #40	@ 0x28
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008314:	f3ef 8305 	mrs	r3, IPSR
 8008318:	60bb      	str	r3, [r7, #8]
  return(result);
 800831a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800831c:	2b00      	cmp	r3, #0
 800831e:	d003      	beq.n	8008328 <osDelay+0x1c>
    stat = osErrorISR;
 8008320:	f06f 0305 	mvn.w	r3, #5
 8008324:	60fb      	str	r3, [r7, #12]
 8008326:	e007      	b.n	8008338 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008328:	2300      	movs	r3, #0
 800832a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d002      	beq.n	8008338 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 ffa6 	bl	8009284 <vTaskDelay>
    }
  }

  return (stat);
 8008338:	68fb      	ldr	r3, [r7, #12]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
	...

08008344 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	4a07      	ldr	r2, [pc, #28]	@ (8008370 <vApplicationGetIdleTaskMemory+0x2c>)
 8008354:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	4a06      	ldr	r2, [pc, #24]	@ (8008374 <vApplicationGetIdleTaskMemory+0x30>)
 800835a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2280      	movs	r2, #128	@ 0x80
 8008360:	601a      	str	r2, [r3, #0]
}
 8008362:	bf00      	nop
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	20000220 	.word	0x20000220
 8008374:	200002c8 	.word	0x200002c8

08008378 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	4a07      	ldr	r2, [pc, #28]	@ (80083a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8008388:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	4a06      	ldr	r2, [pc, #24]	@ (80083a8 <vApplicationGetTimerTaskMemory+0x30>)
 800838e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008396:	601a      	str	r2, [r3, #0]
}
 8008398:	bf00      	nop
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	200004c8 	.word	0x200004c8
 80083a8:	20000570 	.word	0x20000570

080083ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f103 0208 	add.w	r2, r3, #8
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f103 0208 	add.w	r2, r3, #8
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f103 0208 	add.w	r2, r3, #8
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083fa:	bf00      	nop
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008406:	b480      	push	{r7}
 8008408:	b085      	sub	sp, #20
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	689a      	ldr	r2, [r3, #8]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	683a      	ldr	r2, [r7, #0]
 8008430:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	1c5a      	adds	r2, r3, #1
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	601a      	str	r2, [r3, #0]
}
 8008442:	bf00      	nop
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800844e:	b480      	push	{r7}
 8008450:	b085      	sub	sp, #20
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008464:	d103      	bne.n	800846e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	e00c      	b.n	8008488 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	3308      	adds	r3, #8
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	e002      	b.n	800847c <vListInsert+0x2e>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	429a      	cmp	r2, r3
 8008486:	d2f6      	bcs.n	8008476 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	683a      	ldr	r2, [r7, #0]
 80084a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	1c5a      	adds	r2, r3, #1
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	601a      	str	r2, [r3, #0]
}
 80084b4:	bf00      	nop
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	6892      	ldr	r2, [r2, #8]
 80084d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	6852      	ldr	r2, [r2, #4]
 80084e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d103      	bne.n	80084f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689a      	ldr	r2, [r3, #8]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	1e5a      	subs	r2, r3, #1
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d10b      	bne.n	8008540 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800852c:	f383 8811 	msr	BASEPRI, r3
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800853a:	bf00      	nop
 800853c:	bf00      	nop
 800853e:	e7fd      	b.n	800853c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008540:	f002 f93a 	bl	800a7b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800854c:	68f9      	ldr	r1, [r7, #12]
 800854e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008550:	fb01 f303 	mul.w	r3, r1, r3
 8008554:	441a      	add	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008570:	3b01      	subs	r3, #1
 8008572:	68f9      	ldr	r1, [r7, #12]
 8008574:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008576:	fb01 f303 	mul.w	r3, r1, r3
 800857a:	441a      	add	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	22ff      	movs	r2, #255	@ 0xff
 8008584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	22ff      	movs	r2, #255	@ 0xff
 800858c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d114      	bne.n	80085c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d01a      	beq.n	80085d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3310      	adds	r3, #16
 80085a2:	4618      	mov	r0, r3
 80085a4:	f001 f942 	bl	800982c <xTaskRemoveFromEventList>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d012      	beq.n	80085d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80085ae:	4b0d      	ldr	r3, [pc, #52]	@ (80085e4 <xQueueGenericReset+0xd0>)
 80085b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	e009      	b.n	80085d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	3310      	adds	r3, #16
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7ff fef1 	bl	80083ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3324      	adds	r3, #36	@ 0x24
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7ff feec 	bl	80083ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80085d4:	f002 f922 	bl	800a81c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80085d8:	2301      	movs	r3, #1
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	e000ed04 	.word	0xe000ed04

080085e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08e      	sub	sp, #56	@ 0x38
 80085ec:	af02      	add	r7, sp, #8
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10b      	bne.n	8008614 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800860e:	bf00      	nop
 8008610:	bf00      	nop
 8008612:	e7fd      	b.n	8008610 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10b      	bne.n	8008632 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800862c:	bf00      	nop
 800862e:	bf00      	nop
 8008630:	e7fd      	b.n	800862e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <xQueueGenericCreateStatic+0x56>
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <xQueueGenericCreateStatic+0x5a>
 800863e:	2301      	movs	r3, #1
 8008640:	e000      	b.n	8008644 <xQueueGenericCreateStatic+0x5c>
 8008642:	2300      	movs	r3, #0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10b      	bne.n	8008660 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	623b      	str	r3, [r7, #32]
}
 800865a:	bf00      	nop
 800865c:	bf00      	nop
 800865e:	e7fd      	b.n	800865c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d102      	bne.n	800866c <xQueueGenericCreateStatic+0x84>
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d101      	bne.n	8008670 <xQueueGenericCreateStatic+0x88>
 800866c:	2301      	movs	r3, #1
 800866e:	e000      	b.n	8008672 <xQueueGenericCreateStatic+0x8a>
 8008670:	2300      	movs	r3, #0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10b      	bne.n	800868e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	61fb      	str	r3, [r7, #28]
}
 8008688:	bf00      	nop
 800868a:	bf00      	nop
 800868c:	e7fd      	b.n	800868a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800868e:	2350      	movs	r3, #80	@ 0x50
 8008690:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	2b50      	cmp	r3, #80	@ 0x50
 8008696:	d00b      	beq.n	80086b0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	61bb      	str	r3, [r7, #24]
}
 80086aa:	bf00      	nop
 80086ac:	bf00      	nop
 80086ae:	e7fd      	b.n	80086ac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80086b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80086b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00d      	beq.n	80086d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086c4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80086c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	4613      	mov	r3, r2
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	68b9      	ldr	r1, [r7, #8]
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f000 f805 	bl	80086e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80086da:	4618      	mov	r0, r3
 80086dc:	3730      	adds	r7, #48	@ 0x30
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	607a      	str	r2, [r7, #4]
 80086ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d103      	bne.n	80086fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	601a      	str	r2, [r3, #0]
 80086fc:	e002      	b.n	8008704 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008710:	2101      	movs	r1, #1
 8008712:	69b8      	ldr	r0, [r7, #24]
 8008714:	f7ff fefe 	bl	8008514 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	78fa      	ldrb	r2, [r7, #3]
 800871c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008720:	bf00      	nop
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08e      	sub	sp, #56	@ 0x38
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
 8008734:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008736:	2300      	movs	r3, #0
 8008738:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800873e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10b      	bne.n	800875c <xQueueGenericSend+0x34>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008756:	bf00      	nop
 8008758:	bf00      	nop
 800875a:	e7fd      	b.n	8008758 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d103      	bne.n	800876a <xQueueGenericSend+0x42>
 8008762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008766:	2b00      	cmp	r3, #0
 8008768:	d101      	bne.n	800876e <xQueueGenericSend+0x46>
 800876a:	2301      	movs	r3, #1
 800876c:	e000      	b.n	8008770 <xQueueGenericSend+0x48>
 800876e:	2300      	movs	r3, #0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10b      	bne.n	800878c <xQueueGenericSend+0x64>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008786:	bf00      	nop
 8008788:	bf00      	nop
 800878a:	e7fd      	b.n	8008788 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2b02      	cmp	r3, #2
 8008790:	d103      	bne.n	800879a <xQueueGenericSend+0x72>
 8008792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008796:	2b01      	cmp	r3, #1
 8008798:	d101      	bne.n	800879e <xQueueGenericSend+0x76>
 800879a:	2301      	movs	r3, #1
 800879c:	e000      	b.n	80087a0 <xQueueGenericSend+0x78>
 800879e:	2300      	movs	r3, #0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10b      	bne.n	80087bc <xQueueGenericSend+0x94>
	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	623b      	str	r3, [r7, #32]
}
 80087b6:	bf00      	nop
 80087b8:	bf00      	nop
 80087ba:	e7fd      	b.n	80087b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087bc:	f001 f9fc 	bl	8009bb8 <xTaskGetSchedulerState>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d102      	bne.n	80087cc <xQueueGenericSend+0xa4>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d101      	bne.n	80087d0 <xQueueGenericSend+0xa8>
 80087cc:	2301      	movs	r3, #1
 80087ce:	e000      	b.n	80087d2 <xQueueGenericSend+0xaa>
 80087d0:	2300      	movs	r3, #0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10b      	bne.n	80087ee <xQueueGenericSend+0xc6>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	61fb      	str	r3, [r7, #28]
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	e7fd      	b.n	80087ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087ee:	f001 ffe3 	bl	800a7b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d302      	bcc.n	8008804 <xQueueGenericSend+0xdc>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b02      	cmp	r3, #2
 8008802:	d129      	bne.n	8008858 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	68b9      	ldr	r1, [r7, #8]
 8008808:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800880a:	f000 fa0f 	bl	8008c2c <prvCopyDataToQueue>
 800880e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008814:	2b00      	cmp	r3, #0
 8008816:	d010      	beq.n	800883a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881a:	3324      	adds	r3, #36	@ 0x24
 800881c:	4618      	mov	r0, r3
 800881e:	f001 f805 	bl	800982c <xTaskRemoveFromEventList>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d013      	beq.n	8008850 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008828:	4b3f      	ldr	r3, [pc, #252]	@ (8008928 <xQueueGenericSend+0x200>)
 800882a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	e00a      	b.n	8008850 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800883a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800883c:	2b00      	cmp	r3, #0
 800883e:	d007      	beq.n	8008850 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008840:	4b39      	ldr	r3, [pc, #228]	@ (8008928 <xQueueGenericSend+0x200>)
 8008842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008850:	f001 ffe4 	bl	800a81c <vPortExitCritical>
				return pdPASS;
 8008854:	2301      	movs	r3, #1
 8008856:	e063      	b.n	8008920 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d103      	bne.n	8008866 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800885e:	f001 ffdd 	bl	800a81c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008862:	2300      	movs	r3, #0
 8008864:	e05c      	b.n	8008920 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008868:	2b00      	cmp	r3, #0
 800886a:	d106      	bne.n	800887a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800886c:	f107 0314 	add.w	r3, r7, #20
 8008870:	4618      	mov	r0, r3
 8008872:	f001 f83f 	bl	80098f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008876:	2301      	movs	r3, #1
 8008878:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800887a:	f001 ffcf 	bl	800a81c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800887e:	f000 fda7 	bl	80093d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008882:	f001 ff99 	bl	800a7b8 <vPortEnterCritical>
 8008886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008888:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800888c:	b25b      	sxtb	r3, r3
 800888e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008892:	d103      	bne.n	800889c <xQueueGenericSend+0x174>
 8008894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800889c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088a2:	b25b      	sxtb	r3, r3
 80088a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088a8:	d103      	bne.n	80088b2 <xQueueGenericSend+0x18a>
 80088aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088b2:	f001 ffb3 	bl	800a81c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088b6:	1d3a      	adds	r2, r7, #4
 80088b8:	f107 0314 	add.w	r3, r7, #20
 80088bc:	4611      	mov	r1, r2
 80088be:	4618      	mov	r0, r3
 80088c0:	f001 f82e 	bl	8009920 <xTaskCheckForTimeOut>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d124      	bne.n	8008914 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088cc:	f000 faa6 	bl	8008e1c <prvIsQueueFull>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d018      	beq.n	8008908 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	3310      	adds	r3, #16
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	4611      	mov	r1, r2
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 ff52 	bl	8009788 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80088e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088e6:	f000 fa31 	bl	8008d4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80088ea:	f000 fd7f 	bl	80093ec <xTaskResumeAll>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f47f af7c 	bne.w	80087ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80088f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008928 <xQueueGenericSend+0x200>)
 80088f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	e772      	b.n	80087ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008908:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800890a:	f000 fa1f 	bl	8008d4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800890e:	f000 fd6d 	bl	80093ec <xTaskResumeAll>
 8008912:	e76c      	b.n	80087ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008914:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008916:	f000 fa19 	bl	8008d4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800891a:	f000 fd67 	bl	80093ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800891e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008920:	4618      	mov	r0, r3
 8008922:	3738      	adds	r7, #56	@ 0x38
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	e000ed04 	.word	0xe000ed04

0800892c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b090      	sub	sp, #64	@ 0x40
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
 8008938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800893e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10b      	bne.n	800895c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008956:	bf00      	nop
 8008958:	bf00      	nop
 800895a:	e7fd      	b.n	8008958 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d103      	bne.n	800896a <xQueueGenericSendFromISR+0x3e>
 8008962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <xQueueGenericSendFromISR+0x42>
 800896a:	2301      	movs	r3, #1
 800896c:	e000      	b.n	8008970 <xQueueGenericSendFromISR+0x44>
 800896e:	2300      	movs	r3, #0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10b      	bne.n	800898c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008986:	bf00      	nop
 8008988:	bf00      	nop
 800898a:	e7fd      	b.n	8008988 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2b02      	cmp	r3, #2
 8008990:	d103      	bne.n	800899a <xQueueGenericSendFromISR+0x6e>
 8008992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008996:	2b01      	cmp	r3, #1
 8008998:	d101      	bne.n	800899e <xQueueGenericSendFromISR+0x72>
 800899a:	2301      	movs	r3, #1
 800899c:	e000      	b.n	80089a0 <xQueueGenericSendFromISR+0x74>
 800899e:	2300      	movs	r3, #0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10b      	bne.n	80089bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	623b      	str	r3, [r7, #32]
}
 80089b6:	bf00      	nop
 80089b8:	bf00      	nop
 80089ba:	e7fd      	b.n	80089b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089bc:	f001 ffdc 	bl	800a978 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089c0:	f3ef 8211 	mrs	r2, BASEPRI
 80089c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	61fa      	str	r2, [r7, #28]
 80089d6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d302      	bcc.n	80089ee <xQueueGenericSendFromISR+0xc2>
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d12f      	bne.n	8008a4e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	68b9      	ldr	r1, [r7, #8]
 8008a02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a04:	f000 f912 	bl	8008c2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a08:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a10:	d112      	bne.n	8008a38 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d016      	beq.n	8008a48 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1c:	3324      	adds	r3, #36	@ 0x24
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 ff04 	bl	800982c <xTaskRemoveFromEventList>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00e      	beq.n	8008a48 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00b      	beq.n	8008a48 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	e007      	b.n	8008a48 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	b25a      	sxtb	r2, r3
 8008a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008a4c:	e001      	b.n	8008a52 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a54:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3740      	adds	r7, #64	@ 0x40
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08c      	sub	sp, #48	@ 0x30
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a74:	2300      	movs	r3, #0
 8008a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10b      	bne.n	8008a9a <xQueueReceive+0x32>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	623b      	str	r3, [r7, #32]
}
 8008a94:	bf00      	nop
 8008a96:	bf00      	nop
 8008a98:	e7fd      	b.n	8008a96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d103      	bne.n	8008aa8 <xQueueReceive+0x40>
 8008aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d101      	bne.n	8008aac <xQueueReceive+0x44>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e000      	b.n	8008aae <xQueueReceive+0x46>
 8008aac:	2300      	movs	r3, #0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10b      	bne.n	8008aca <xQueueReceive+0x62>
	__asm volatile
 8008ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	61fb      	str	r3, [r7, #28]
}
 8008ac4:	bf00      	nop
 8008ac6:	bf00      	nop
 8008ac8:	e7fd      	b.n	8008ac6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008aca:	f001 f875 	bl	8009bb8 <xTaskGetSchedulerState>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d102      	bne.n	8008ada <xQueueReceive+0x72>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d101      	bne.n	8008ade <xQueueReceive+0x76>
 8008ada:	2301      	movs	r3, #1
 8008adc:	e000      	b.n	8008ae0 <xQueueReceive+0x78>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10b      	bne.n	8008afc <xQueueReceive+0x94>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	61bb      	str	r3, [r7, #24]
}
 8008af6:	bf00      	nop
 8008af8:	bf00      	nop
 8008afa:	e7fd      	b.n	8008af8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008afc:	f001 fe5c 	bl	800a7b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b04:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d01f      	beq.n	8008b4c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b0c:	68b9      	ldr	r1, [r7, #8]
 8008b0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b10:	f000 f8f6 	bl	8008d00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b16:	1e5a      	subs	r2, r3, #1
 8008b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00f      	beq.n	8008b44 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b26:	3310      	adds	r3, #16
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 fe7f 	bl	800982c <xTaskRemoveFromEventList>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d007      	beq.n	8008b44 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b34:	4b3c      	ldr	r3, [pc, #240]	@ (8008c28 <xQueueReceive+0x1c0>)
 8008b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b44:	f001 fe6a 	bl	800a81c <vPortExitCritical>
				return pdPASS;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e069      	b.n	8008c20 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d103      	bne.n	8008b5a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b52:	f001 fe63 	bl	800a81c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b56:	2300      	movs	r3, #0
 8008b58:	e062      	b.n	8008c20 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d106      	bne.n	8008b6e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b60:	f107 0310 	add.w	r3, r7, #16
 8008b64:	4618      	mov	r0, r3
 8008b66:	f000 fec5 	bl	80098f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b6e:	f001 fe55 	bl	800a81c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b72:	f000 fc2d 	bl	80093d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b76:	f001 fe1f 	bl	800a7b8 <vPortEnterCritical>
 8008b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b80:	b25b      	sxtb	r3, r3
 8008b82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b86:	d103      	bne.n	8008b90 <xQueueReceive+0x128>
 8008b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b96:	b25b      	sxtb	r3, r3
 8008b98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b9c:	d103      	bne.n	8008ba6 <xQueueReceive+0x13e>
 8008b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ba6:	f001 fe39 	bl	800a81c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008baa:	1d3a      	adds	r2, r7, #4
 8008bac:	f107 0310 	add.w	r3, r7, #16
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 feb4 	bl	8009920 <xTaskCheckForTimeOut>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d123      	bne.n	8008c06 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bc0:	f000 f916 	bl	8008df0 <prvIsQueueEmpty>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d017      	beq.n	8008bfa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bcc:	3324      	adds	r3, #36	@ 0x24
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 fdd8 	bl	8009788 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bda:	f000 f8b7 	bl	8008d4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bde:	f000 fc05 	bl	80093ec <xTaskResumeAll>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d189      	bne.n	8008afc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008be8:	4b0f      	ldr	r3, [pc, #60]	@ (8008c28 <xQueueReceive+0x1c0>)
 8008bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	e780      	b.n	8008afc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008bfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bfc:	f000 f8a6 	bl	8008d4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c00:	f000 fbf4 	bl	80093ec <xTaskResumeAll>
 8008c04:	e77a      	b.n	8008afc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c08:	f000 f8a0 	bl	8008d4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c0c:	f000 fbee 	bl	80093ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c12:	f000 f8ed 	bl	8008df0 <prvIsQueueEmpty>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f43f af6f 	beq.w	8008afc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3730      	adds	r7, #48	@ 0x30
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	e000ed04 	.word	0xe000ed04

08008c2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b086      	sub	sp, #24
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10d      	bne.n	8008c66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d14d      	bne.n	8008cee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 ffcc 	bl	8009bf4 <xTaskPriorityDisinherit>
 8008c5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	609a      	str	r2, [r3, #8]
 8008c64:	e043      	b.n	8008cee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d119      	bne.n	8008ca0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6858      	ldr	r0, [r3, #4]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c74:	461a      	mov	r2, r3
 8008c76:	68b9      	ldr	r1, [r7, #8]
 8008c78:	f002 fe9c 	bl	800b9b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	685a      	ldr	r2, [r3, #4]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c84:	441a      	add	r2, r3
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d32b      	bcc.n	8008cee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	605a      	str	r2, [r3, #4]
 8008c9e:	e026      	b.n	8008cee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	68d8      	ldr	r0, [r3, #12]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca8:	461a      	mov	r2, r3
 8008caa:	68b9      	ldr	r1, [r7, #8]
 8008cac:	f002 fe82 	bl	800b9b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	68da      	ldr	r2, [r3, #12]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cb8:	425b      	negs	r3, r3
 8008cba:	441a      	add	r2, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	68da      	ldr	r2, [r3, #12]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d207      	bcs.n	8008cdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	689a      	ldr	r2, [r3, #8]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cd4:	425b      	negs	r3, r3
 8008cd6:	441a      	add	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d105      	bne.n	8008cee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d002      	beq.n	8008cee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	1c5a      	adds	r2, r3, #1
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008cf6:	697b      	ldr	r3, [r7, #20]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3718      	adds	r7, #24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d018      	beq.n	8008d44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68da      	ldr	r2, [r3, #12]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d1a:	441a      	add	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68da      	ldr	r2, [r3, #12]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d303      	bcc.n	8008d34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	68d9      	ldr	r1, [r3, #12]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	6838      	ldr	r0, [r7, #0]
 8008d40:	f002 fe38 	bl	800b9b4 <memcpy>
	}
}
 8008d44:	bf00      	nop
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d54:	f001 fd30 	bl	800a7b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d60:	e011      	b.n	8008d86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d012      	beq.n	8008d90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3324      	adds	r3, #36	@ 0x24
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 fd5c 	bl	800982c <xTaskRemoveFromEventList>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d7a:	f000 fe35 	bl	80099e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	dce9      	bgt.n	8008d62 <prvUnlockQueue+0x16>
 8008d8e:	e000      	b.n	8008d92 <prvUnlockQueue+0x46>
					break;
 8008d90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	22ff      	movs	r2, #255	@ 0xff
 8008d96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008d9a:	f001 fd3f 	bl	800a81c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d9e:	f001 fd0b 	bl	800a7b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008da8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008daa:	e011      	b.n	8008dd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d012      	beq.n	8008dda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	3310      	adds	r3, #16
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 fd37 	bl	800982c <xTaskRemoveFromEventList>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008dc4:	f000 fe10 	bl	80099e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	dce9      	bgt.n	8008dac <prvUnlockQueue+0x60>
 8008dd8:	e000      	b.n	8008ddc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008dda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	22ff      	movs	r2, #255	@ 0xff
 8008de0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008de4:	f001 fd1a 	bl	800a81c <vPortExitCritical>
}
 8008de8:	bf00      	nop
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008df8:	f001 fcde 	bl	800a7b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d102      	bne.n	8008e0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e04:	2301      	movs	r3, #1
 8008e06:	60fb      	str	r3, [r7, #12]
 8008e08:	e001      	b.n	8008e0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e0e:	f001 fd05 	bl	800a81c <vPortExitCritical>

	return xReturn;
 8008e12:	68fb      	ldr	r3, [r7, #12]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e24:	f001 fcc8 	bl	800a7b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d102      	bne.n	8008e3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e34:	2301      	movs	r3, #1
 8008e36:	60fb      	str	r3, [r7, #12]
 8008e38:	e001      	b.n	8008e3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e3e:	f001 fced 	bl	800a81c <vPortExitCritical>

	return xReturn;
 8008e42:	68fb      	ldr	r3, [r7, #12]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e56:	2300      	movs	r3, #0
 8008e58:	60fb      	str	r3, [r7, #12]
 8008e5a:	e014      	b.n	8008e86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e5c:	4a0f      	ldr	r2, [pc, #60]	@ (8008e9c <vQueueAddToRegistry+0x50>)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10b      	bne.n	8008e80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e68:	490c      	ldr	r1, [pc, #48]	@ (8008e9c <vQueueAddToRegistry+0x50>)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e72:	4a0a      	ldr	r2, [pc, #40]	@ (8008e9c <vQueueAddToRegistry+0x50>)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	00db      	lsls	r3, r3, #3
 8008e78:	4413      	add	r3, r2
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008e7e:	e006      	b.n	8008e8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	3301      	adds	r3, #1
 8008e84:	60fb      	str	r3, [r7, #12]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2b07      	cmp	r3, #7
 8008e8a:	d9e7      	bls.n	8008e5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e8c:	bf00      	nop
 8008e8e:	bf00      	nop
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	20000970 	.word	0x20000970

08008ea0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008eb0:	f001 fc82 	bl	800a7b8 <vPortEnterCritical>
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008eba:	b25b      	sxtb	r3, r3
 8008ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ec0:	d103      	bne.n	8008eca <vQueueWaitForMessageRestricted+0x2a>
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ed0:	b25b      	sxtb	r3, r3
 8008ed2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ed6:	d103      	bne.n	8008ee0 <vQueueWaitForMessageRestricted+0x40>
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ee0:	f001 fc9c 	bl	800a81c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d106      	bne.n	8008efa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	3324      	adds	r3, #36	@ 0x24
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	68b9      	ldr	r1, [r7, #8]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 fc6d 	bl	80097d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008efa:	6978      	ldr	r0, [r7, #20]
 8008efc:	f7ff ff26 	bl	8008d4c <prvUnlockQueue>
	}
 8008f00:	bf00      	nop
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b08e      	sub	sp, #56	@ 0x38
 8008f0c:	af04      	add	r7, sp, #16
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
 8008f14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10b      	bne.n	8008f34 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	623b      	str	r3, [r7, #32]
}
 8008f2e:	bf00      	nop
 8008f30:	bf00      	nop
 8008f32:	e7fd      	b.n	8008f30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10b      	bne.n	8008f52 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f3e:	f383 8811 	msr	BASEPRI, r3
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	61fb      	str	r3, [r7, #28]
}
 8008f4c:	bf00      	nop
 8008f4e:	bf00      	nop
 8008f50:	e7fd      	b.n	8008f4e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f52:	23a8      	movs	r3, #168	@ 0xa8
 8008f54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	2ba8      	cmp	r3, #168	@ 0xa8
 8008f5a:	d00b      	beq.n	8008f74 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f60:	f383 8811 	msr	BASEPRI, r3
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	61bb      	str	r3, [r7, #24]
}
 8008f6e:	bf00      	nop
 8008f70:	bf00      	nop
 8008f72:	e7fd      	b.n	8008f70 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f74:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d01e      	beq.n	8008fba <xTaskCreateStatic+0xb2>
 8008f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d01b      	beq.n	8008fba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f84:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f8a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8e:	2202      	movs	r2, #2
 8008f90:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f94:	2300      	movs	r3, #0
 8008f96:	9303      	str	r3, [sp, #12]
 8008f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9a:	9302      	str	r3, [sp, #8]
 8008f9c:	f107 0314 	add.w	r3, r7, #20
 8008fa0:	9301      	str	r3, [sp, #4]
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	68b9      	ldr	r1, [r7, #8]
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f000 f851 	bl	8009054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008fb4:	f000 f8f6 	bl	80091a4 <prvAddNewTaskToReadyList>
 8008fb8:	e001      	b.n	8008fbe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008fbe:	697b      	ldr	r3, [r7, #20]
	}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3728      	adds	r7, #40	@ 0x28
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08c      	sub	sp, #48	@ 0x30
 8008fcc:	af04      	add	r7, sp, #16
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008fd8:	88fb      	ldrh	r3, [r7, #6]
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f001 fd0d 	bl	800a9fc <pvPortMalloc>
 8008fe2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00e      	beq.n	8009008 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008fea:	20a8      	movs	r0, #168	@ 0xa8
 8008fec:	f001 fd06 	bl	800a9fc <pvPortMalloc>
 8008ff0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d003      	beq.n	8009000 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	697a      	ldr	r2, [r7, #20]
 8008ffc:	631a      	str	r2, [r3, #48]	@ 0x30
 8008ffe:	e005      	b.n	800900c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009000:	6978      	ldr	r0, [r7, #20]
 8009002:	f001 fdc9 	bl	800ab98 <vPortFree>
 8009006:	e001      	b.n	800900c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009008:	2300      	movs	r3, #0
 800900a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d017      	beq.n	8009042 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	2200      	movs	r2, #0
 8009016:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800901a:	88fa      	ldrh	r2, [r7, #6]
 800901c:	2300      	movs	r3, #0
 800901e:	9303      	str	r3, [sp, #12]
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	9302      	str	r3, [sp, #8]
 8009024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009026:	9301      	str	r3, [sp, #4]
 8009028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	68b9      	ldr	r1, [r7, #8]
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 f80f 	bl	8009054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009036:	69f8      	ldr	r0, [r7, #28]
 8009038:	f000 f8b4 	bl	80091a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800903c:	2301      	movs	r3, #1
 800903e:	61bb      	str	r3, [r7, #24]
 8009040:	e002      	b.n	8009048 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009042:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009046:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009048:	69bb      	ldr	r3, [r7, #24]
	}
 800904a:	4618      	mov	r0, r3
 800904c:	3720      	adds	r7, #32
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
	...

08009054 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b088      	sub	sp, #32
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
 8009060:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009064:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	461a      	mov	r2, r3
 800906c:	21a5      	movs	r1, #165	@ 0xa5
 800906e:	f002 fc1d 	bl	800b8ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009074:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800907c:	3b01      	subs	r3, #1
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	f023 0307 	bic.w	r3, r3, #7
 800908a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	f003 0307 	and.w	r3, r3, #7
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00b      	beq.n	80090ae <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	617b      	str	r3, [r7, #20]
}
 80090a8:	bf00      	nop
 80090aa:	bf00      	nop
 80090ac:	e7fd      	b.n	80090aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d01f      	beq.n	80090f4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090b4:	2300      	movs	r3, #0
 80090b6:	61fb      	str	r3, [r7, #28]
 80090b8:	e012      	b.n	80090e0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	4413      	add	r3, r2
 80090c0:	7819      	ldrb	r1, [r3, #0]
 80090c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	4413      	add	r3, r2
 80090c8:	3334      	adds	r3, #52	@ 0x34
 80090ca:	460a      	mov	r2, r1
 80090cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	4413      	add	r3, r2
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d006      	beq.n	80090e8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	3301      	adds	r3, #1
 80090de:	61fb      	str	r3, [r7, #28]
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	2b0f      	cmp	r3, #15
 80090e4:	d9e9      	bls.n	80090ba <prvInitialiseNewTask+0x66>
 80090e6:	e000      	b.n	80090ea <prvInitialiseNewTask+0x96>
			{
				break;
 80090e8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80090ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80090f2:	e003      	b.n	80090fc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80090f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80090fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090fe:	2b37      	cmp	r3, #55	@ 0x37
 8009100:	d901      	bls.n	8009106 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009102:	2337      	movs	r3, #55	@ 0x37
 8009104:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009108:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800910a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800910c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009110:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009114:	2200      	movs	r2, #0
 8009116:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911a:	3304      	adds	r3, #4
 800911c:	4618      	mov	r0, r3
 800911e:	f7ff f965 	bl	80083ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009124:	3318      	adds	r3, #24
 8009126:	4618      	mov	r0, r3
 8009128:	f7ff f960 	bl	80083ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800912c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009130:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009134:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800913c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009140:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009144:	2200      	movs	r2, #0
 8009146:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800914a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914c:	2200      	movs	r2, #0
 800914e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009154:	3354      	adds	r3, #84	@ 0x54
 8009156:	224c      	movs	r2, #76	@ 0x4c
 8009158:	2100      	movs	r1, #0
 800915a:	4618      	mov	r0, r3
 800915c:	f002 fba6 	bl	800b8ac <memset>
 8009160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009162:	4a0d      	ldr	r2, [pc, #52]	@ (8009198 <prvInitialiseNewTask+0x144>)
 8009164:	659a      	str	r2, [r3, #88]	@ 0x58
 8009166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009168:	4a0c      	ldr	r2, [pc, #48]	@ (800919c <prvInitialiseNewTask+0x148>)
 800916a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800916c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916e:	4a0c      	ldr	r2, [pc, #48]	@ (80091a0 <prvInitialiseNewTask+0x14c>)
 8009170:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	68f9      	ldr	r1, [r7, #12]
 8009176:	69b8      	ldr	r0, [r7, #24]
 8009178:	f001 f9f0 	bl	800a55c <pxPortInitialiseStack>
 800917c:	4602      	mov	r2, r0
 800917e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009180:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009184:	2b00      	cmp	r3, #0
 8009186:	d002      	beq.n	800918e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800918a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800918c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800918e:	bf00      	nop
 8009190:	3720      	adds	r7, #32
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	20005864 	.word	0x20005864
 800919c:	200058cc 	.word	0x200058cc
 80091a0:	20005934 	.word	0x20005934

080091a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091ac:	f001 fb04 	bl	800a7b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091b0:	4b2d      	ldr	r3, [pc, #180]	@ (8009268 <prvAddNewTaskToReadyList+0xc4>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3301      	adds	r3, #1
 80091b6:	4a2c      	ldr	r2, [pc, #176]	@ (8009268 <prvAddNewTaskToReadyList+0xc4>)
 80091b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091ba:	4b2c      	ldr	r3, [pc, #176]	@ (800926c <prvAddNewTaskToReadyList+0xc8>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d109      	bne.n	80091d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091c2:	4a2a      	ldr	r2, [pc, #168]	@ (800926c <prvAddNewTaskToReadyList+0xc8>)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091c8:	4b27      	ldr	r3, [pc, #156]	@ (8009268 <prvAddNewTaskToReadyList+0xc4>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d110      	bne.n	80091f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80091d0:	f000 fc2e 	bl	8009a30 <prvInitialiseTaskLists>
 80091d4:	e00d      	b.n	80091f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80091d6:	4b26      	ldr	r3, [pc, #152]	@ (8009270 <prvAddNewTaskToReadyList+0xcc>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d109      	bne.n	80091f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80091de:	4b23      	ldr	r3, [pc, #140]	@ (800926c <prvAddNewTaskToReadyList+0xc8>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d802      	bhi.n	80091f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80091ec:	4a1f      	ldr	r2, [pc, #124]	@ (800926c <prvAddNewTaskToReadyList+0xc8>)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80091f2:	4b20      	ldr	r3, [pc, #128]	@ (8009274 <prvAddNewTaskToReadyList+0xd0>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3301      	adds	r3, #1
 80091f8:	4a1e      	ldr	r2, [pc, #120]	@ (8009274 <prvAddNewTaskToReadyList+0xd0>)
 80091fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80091fc:	4b1d      	ldr	r3, [pc, #116]	@ (8009274 <prvAddNewTaskToReadyList+0xd0>)
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009208:	4b1b      	ldr	r3, [pc, #108]	@ (8009278 <prvAddNewTaskToReadyList+0xd4>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	429a      	cmp	r2, r3
 800920e:	d903      	bls.n	8009218 <prvAddNewTaskToReadyList+0x74>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009214:	4a18      	ldr	r2, [pc, #96]	@ (8009278 <prvAddNewTaskToReadyList+0xd4>)
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800921c:	4613      	mov	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	4a15      	ldr	r2, [pc, #84]	@ (800927c <prvAddNewTaskToReadyList+0xd8>)
 8009226:	441a      	add	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	3304      	adds	r3, #4
 800922c:	4619      	mov	r1, r3
 800922e:	4610      	mov	r0, r2
 8009230:	f7ff f8e9 	bl	8008406 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009234:	f001 faf2 	bl	800a81c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009238:	4b0d      	ldr	r3, [pc, #52]	@ (8009270 <prvAddNewTaskToReadyList+0xcc>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00e      	beq.n	800925e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009240:	4b0a      	ldr	r3, [pc, #40]	@ (800926c <prvAddNewTaskToReadyList+0xc8>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800924a:	429a      	cmp	r2, r3
 800924c:	d207      	bcs.n	800925e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800924e:	4b0c      	ldr	r3, [pc, #48]	@ (8009280 <prvAddNewTaskToReadyList+0xdc>)
 8009250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800925e:	bf00      	nop
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20000e84 	.word	0x20000e84
 800926c:	200009b0 	.word	0x200009b0
 8009270:	20000e90 	.word	0x20000e90
 8009274:	20000ea0 	.word	0x20000ea0
 8009278:	20000e8c 	.word	0x20000e8c
 800927c:	200009b4 	.word	0x200009b4
 8009280:	e000ed04 	.word	0xe000ed04

08009284 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800928c:	2300      	movs	r3, #0
 800928e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d018      	beq.n	80092c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009296:	4b14      	ldr	r3, [pc, #80]	@ (80092e8 <vTaskDelay+0x64>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00b      	beq.n	80092b6 <vTaskDelay+0x32>
	__asm volatile
 800929e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	60bb      	str	r3, [r7, #8]
}
 80092b0:	bf00      	nop
 80092b2:	bf00      	nop
 80092b4:	e7fd      	b.n	80092b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80092b6:	f000 f88b 	bl	80093d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092ba:	2100      	movs	r1, #0
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fd9f 	bl	8009e00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092c2:	f000 f893 	bl	80093ec <xTaskResumeAll>
 80092c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d107      	bne.n	80092de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80092ce:	4b07      	ldr	r3, [pc, #28]	@ (80092ec <vTaskDelay+0x68>)
 80092d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092de:	bf00      	nop
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20000eac 	.word	0x20000eac
 80092ec:	e000ed04 	.word	0xe000ed04

080092f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b08a      	sub	sp, #40	@ 0x28
 80092f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80092f6:	2300      	movs	r3, #0
 80092f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80092fa:	2300      	movs	r3, #0
 80092fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092fe:	463a      	mov	r2, r7
 8009300:	1d39      	adds	r1, r7, #4
 8009302:	f107 0308 	add.w	r3, r7, #8
 8009306:	4618      	mov	r0, r3
 8009308:	f7ff f81c 	bl	8008344 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	9202      	str	r2, [sp, #8]
 8009314:	9301      	str	r3, [sp, #4]
 8009316:	2300      	movs	r3, #0
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	2300      	movs	r3, #0
 800931c:	460a      	mov	r2, r1
 800931e:	4924      	ldr	r1, [pc, #144]	@ (80093b0 <vTaskStartScheduler+0xc0>)
 8009320:	4824      	ldr	r0, [pc, #144]	@ (80093b4 <vTaskStartScheduler+0xc4>)
 8009322:	f7ff fdf1 	bl	8008f08 <xTaskCreateStatic>
 8009326:	4603      	mov	r3, r0
 8009328:	4a23      	ldr	r2, [pc, #140]	@ (80093b8 <vTaskStartScheduler+0xc8>)
 800932a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800932c:	4b22      	ldr	r3, [pc, #136]	@ (80093b8 <vTaskStartScheduler+0xc8>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d002      	beq.n	800933a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009334:	2301      	movs	r3, #1
 8009336:	617b      	str	r3, [r7, #20]
 8009338:	e001      	b.n	800933e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800933a:	2300      	movs	r3, #0
 800933c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d102      	bne.n	800934a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009344:	f000 fdb0 	bl	8009ea8 <xTimerCreateTimerTask>
 8009348:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d11b      	bne.n	8009388 <vTaskStartScheduler+0x98>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	613b      	str	r3, [r7, #16]
}
 8009362:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009364:	4b15      	ldr	r3, [pc, #84]	@ (80093bc <vTaskStartScheduler+0xcc>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3354      	adds	r3, #84	@ 0x54
 800936a:	4a15      	ldr	r2, [pc, #84]	@ (80093c0 <vTaskStartScheduler+0xd0>)
 800936c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800936e:	4b15      	ldr	r3, [pc, #84]	@ (80093c4 <vTaskStartScheduler+0xd4>)
 8009370:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009374:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009376:	4b14      	ldr	r3, [pc, #80]	@ (80093c8 <vTaskStartScheduler+0xd8>)
 8009378:	2201      	movs	r2, #1
 800937a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800937c:	4b13      	ldr	r3, [pc, #76]	@ (80093cc <vTaskStartScheduler+0xdc>)
 800937e:	2200      	movs	r2, #0
 8009380:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009382:	f001 f975 	bl	800a670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009386:	e00f      	b.n	80093a8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800938e:	d10b      	bne.n	80093a8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	60fb      	str	r3, [r7, #12]
}
 80093a2:	bf00      	nop
 80093a4:	bf00      	nop
 80093a6:	e7fd      	b.n	80093a4 <vTaskStartScheduler+0xb4>
}
 80093a8:	bf00      	nop
 80093aa:	3718      	adds	r7, #24
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	0800bab0 	.word	0x0800bab0
 80093b4:	08009a01 	.word	0x08009a01
 80093b8:	20000ea8 	.word	0x20000ea8
 80093bc:	200009b0 	.word	0x200009b0
 80093c0:	20000110 	.word	0x20000110
 80093c4:	20000ea4 	.word	0x20000ea4
 80093c8:	20000e90 	.word	0x20000e90
 80093cc:	20000e88 	.word	0x20000e88

080093d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093d0:	b480      	push	{r7}
 80093d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80093d4:	4b04      	ldr	r3, [pc, #16]	@ (80093e8 <vTaskSuspendAll+0x18>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3301      	adds	r3, #1
 80093da:	4a03      	ldr	r2, [pc, #12]	@ (80093e8 <vTaskSuspendAll+0x18>)
 80093dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80093de:	bf00      	nop
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr
 80093e8:	20000eac 	.word	0x20000eac

080093ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093f2:	2300      	movs	r3, #0
 80093f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80093f6:	2300      	movs	r3, #0
 80093f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80093fa:	4b42      	ldr	r3, [pc, #264]	@ (8009504 <xTaskResumeAll+0x118>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10b      	bne.n	800941a <xTaskResumeAll+0x2e>
	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	603b      	str	r3, [r7, #0]
}
 8009414:	bf00      	nop
 8009416:	bf00      	nop
 8009418:	e7fd      	b.n	8009416 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800941a:	f001 f9cd 	bl	800a7b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800941e:	4b39      	ldr	r3, [pc, #228]	@ (8009504 <xTaskResumeAll+0x118>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3b01      	subs	r3, #1
 8009424:	4a37      	ldr	r2, [pc, #220]	@ (8009504 <xTaskResumeAll+0x118>)
 8009426:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009428:	4b36      	ldr	r3, [pc, #216]	@ (8009504 <xTaskResumeAll+0x118>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d162      	bne.n	80094f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009430:	4b35      	ldr	r3, [pc, #212]	@ (8009508 <xTaskResumeAll+0x11c>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d05e      	beq.n	80094f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009438:	e02f      	b.n	800949a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800943a:	4b34      	ldr	r3, [pc, #208]	@ (800950c <xTaskResumeAll+0x120>)
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	3318      	adds	r3, #24
 8009446:	4618      	mov	r0, r3
 8009448:	f7ff f83a 	bl	80084c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	3304      	adds	r3, #4
 8009450:	4618      	mov	r0, r3
 8009452:	f7ff f835 	bl	80084c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800945a:	4b2d      	ldr	r3, [pc, #180]	@ (8009510 <xTaskResumeAll+0x124>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	429a      	cmp	r2, r3
 8009460:	d903      	bls.n	800946a <xTaskResumeAll+0x7e>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009466:	4a2a      	ldr	r2, [pc, #168]	@ (8009510 <xTaskResumeAll+0x124>)
 8009468:	6013      	str	r3, [r2, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800946e:	4613      	mov	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	4413      	add	r3, r2
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4a27      	ldr	r2, [pc, #156]	@ (8009514 <xTaskResumeAll+0x128>)
 8009478:	441a      	add	r2, r3
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	3304      	adds	r3, #4
 800947e:	4619      	mov	r1, r3
 8009480:	4610      	mov	r0, r2
 8009482:	f7fe ffc0 	bl	8008406 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800948a:	4b23      	ldr	r3, [pc, #140]	@ (8009518 <xTaskResumeAll+0x12c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009490:	429a      	cmp	r2, r3
 8009492:	d302      	bcc.n	800949a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009494:	4b21      	ldr	r3, [pc, #132]	@ (800951c <xTaskResumeAll+0x130>)
 8009496:	2201      	movs	r2, #1
 8009498:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800949a:	4b1c      	ldr	r3, [pc, #112]	@ (800950c <xTaskResumeAll+0x120>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1cb      	bne.n	800943a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094a8:	f000 fb66 	bl	8009b78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80094ac:	4b1c      	ldr	r3, [pc, #112]	@ (8009520 <xTaskResumeAll+0x134>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d010      	beq.n	80094da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094b8:	f000 f846 	bl	8009548 <xTaskIncrementTick>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d002      	beq.n	80094c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80094c2:	4b16      	ldr	r3, [pc, #88]	@ (800951c <xTaskResumeAll+0x130>)
 80094c4:	2201      	movs	r2, #1
 80094c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	3b01      	subs	r3, #1
 80094cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1f1      	bne.n	80094b8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80094d4:	4b12      	ldr	r3, [pc, #72]	@ (8009520 <xTaskResumeAll+0x134>)
 80094d6:	2200      	movs	r2, #0
 80094d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094da:	4b10      	ldr	r3, [pc, #64]	@ (800951c <xTaskResumeAll+0x130>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d009      	beq.n	80094f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80094e2:	2301      	movs	r3, #1
 80094e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80094e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009524 <xTaskResumeAll+0x138>)
 80094e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094ec:	601a      	str	r2, [r3, #0]
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094f6:	f001 f991 	bl	800a81c <vPortExitCritical>

	return xAlreadyYielded;
 80094fa:	68bb      	ldr	r3, [r7, #8]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	20000eac 	.word	0x20000eac
 8009508:	20000e84 	.word	0x20000e84
 800950c:	20000e44 	.word	0x20000e44
 8009510:	20000e8c 	.word	0x20000e8c
 8009514:	200009b4 	.word	0x200009b4
 8009518:	200009b0 	.word	0x200009b0
 800951c:	20000e98 	.word	0x20000e98
 8009520:	20000e94 	.word	0x20000e94
 8009524:	e000ed04 	.word	0xe000ed04

08009528 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800952e:	4b05      	ldr	r3, [pc, #20]	@ (8009544 <xTaskGetTickCount+0x1c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009534:	687b      	ldr	r3, [r7, #4]
}
 8009536:	4618      	mov	r0, r3
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	20000e88 	.word	0x20000e88

08009548 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800954e:	2300      	movs	r3, #0
 8009550:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009552:	4b4f      	ldr	r3, [pc, #316]	@ (8009690 <xTaskIncrementTick+0x148>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	f040 8090 	bne.w	800967c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800955c:	4b4d      	ldr	r3, [pc, #308]	@ (8009694 <xTaskIncrementTick+0x14c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	3301      	adds	r3, #1
 8009562:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009564:	4a4b      	ldr	r2, [pc, #300]	@ (8009694 <xTaskIncrementTick+0x14c>)
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d121      	bne.n	80095b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009570:	4b49      	ldr	r3, [pc, #292]	@ (8009698 <xTaskIncrementTick+0x150>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00b      	beq.n	8009592 <xTaskIncrementTick+0x4a>
	__asm volatile
 800957a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	603b      	str	r3, [r7, #0]
}
 800958c:	bf00      	nop
 800958e:	bf00      	nop
 8009590:	e7fd      	b.n	800958e <xTaskIncrementTick+0x46>
 8009592:	4b41      	ldr	r3, [pc, #260]	@ (8009698 <xTaskIncrementTick+0x150>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	60fb      	str	r3, [r7, #12]
 8009598:	4b40      	ldr	r3, [pc, #256]	@ (800969c <xTaskIncrementTick+0x154>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a3e      	ldr	r2, [pc, #248]	@ (8009698 <xTaskIncrementTick+0x150>)
 800959e:	6013      	str	r3, [r2, #0]
 80095a0:	4a3e      	ldr	r2, [pc, #248]	@ (800969c <xTaskIncrementTick+0x154>)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	4b3e      	ldr	r3, [pc, #248]	@ (80096a0 <xTaskIncrementTick+0x158>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3301      	adds	r3, #1
 80095ac:	4a3c      	ldr	r2, [pc, #240]	@ (80096a0 <xTaskIncrementTick+0x158>)
 80095ae:	6013      	str	r3, [r2, #0]
 80095b0:	f000 fae2 	bl	8009b78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095b4:	4b3b      	ldr	r3, [pc, #236]	@ (80096a4 <xTaskIncrementTick+0x15c>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d349      	bcc.n	8009652 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095be:	4b36      	ldr	r3, [pc, #216]	@ (8009698 <xTaskIncrementTick+0x150>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d104      	bne.n	80095d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095c8:	4b36      	ldr	r3, [pc, #216]	@ (80096a4 <xTaskIncrementTick+0x15c>)
 80095ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095ce:	601a      	str	r2, [r3, #0]
					break;
 80095d0:	e03f      	b.n	8009652 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095d2:	4b31      	ldr	r3, [pc, #196]	@ (8009698 <xTaskIncrementTick+0x150>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d203      	bcs.n	80095f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095ea:	4a2e      	ldr	r2, [pc, #184]	@ (80096a4 <xTaskIncrementTick+0x15c>)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80095f0:	e02f      	b.n	8009652 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	3304      	adds	r3, #4
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fe ff62 	bl	80084c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009600:	2b00      	cmp	r3, #0
 8009602:	d004      	beq.n	800960e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	3318      	adds	r3, #24
 8009608:	4618      	mov	r0, r3
 800960a:	f7fe ff59 	bl	80084c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009612:	4b25      	ldr	r3, [pc, #148]	@ (80096a8 <xTaskIncrementTick+0x160>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	429a      	cmp	r2, r3
 8009618:	d903      	bls.n	8009622 <xTaskIncrementTick+0xda>
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961e:	4a22      	ldr	r2, [pc, #136]	@ (80096a8 <xTaskIncrementTick+0x160>)
 8009620:	6013      	str	r3, [r2, #0]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009626:	4613      	mov	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	4413      	add	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4a1f      	ldr	r2, [pc, #124]	@ (80096ac <xTaskIncrementTick+0x164>)
 8009630:	441a      	add	r2, r3
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	3304      	adds	r3, #4
 8009636:	4619      	mov	r1, r3
 8009638:	4610      	mov	r0, r2
 800963a:	f7fe fee4 	bl	8008406 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009642:	4b1b      	ldr	r3, [pc, #108]	@ (80096b0 <xTaskIncrementTick+0x168>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009648:	429a      	cmp	r2, r3
 800964a:	d3b8      	bcc.n	80095be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800964c:	2301      	movs	r3, #1
 800964e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009650:	e7b5      	b.n	80095be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009652:	4b17      	ldr	r3, [pc, #92]	@ (80096b0 <xTaskIncrementTick+0x168>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009658:	4914      	ldr	r1, [pc, #80]	@ (80096ac <xTaskIncrementTick+0x164>)
 800965a:	4613      	mov	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4413      	add	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	440b      	add	r3, r1
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d901      	bls.n	800966e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800966a:	2301      	movs	r3, #1
 800966c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800966e:	4b11      	ldr	r3, [pc, #68]	@ (80096b4 <xTaskIncrementTick+0x16c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d007      	beq.n	8009686 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009676:	2301      	movs	r3, #1
 8009678:	617b      	str	r3, [r7, #20]
 800967a:	e004      	b.n	8009686 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800967c:	4b0e      	ldr	r3, [pc, #56]	@ (80096b8 <xTaskIncrementTick+0x170>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3301      	adds	r3, #1
 8009682:	4a0d      	ldr	r2, [pc, #52]	@ (80096b8 <xTaskIncrementTick+0x170>)
 8009684:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009686:	697b      	ldr	r3, [r7, #20]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3718      	adds	r7, #24
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	20000eac 	.word	0x20000eac
 8009694:	20000e88 	.word	0x20000e88
 8009698:	20000e3c 	.word	0x20000e3c
 800969c:	20000e40 	.word	0x20000e40
 80096a0:	20000e9c 	.word	0x20000e9c
 80096a4:	20000ea4 	.word	0x20000ea4
 80096a8:	20000e8c 	.word	0x20000e8c
 80096ac:	200009b4 	.word	0x200009b4
 80096b0:	200009b0 	.word	0x200009b0
 80096b4:	20000e98 	.word	0x20000e98
 80096b8:	20000e94 	.word	0x20000e94

080096bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096c2:	4b2b      	ldr	r3, [pc, #172]	@ (8009770 <vTaskSwitchContext+0xb4>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096ca:	4b2a      	ldr	r3, [pc, #168]	@ (8009774 <vTaskSwitchContext+0xb8>)
 80096cc:	2201      	movs	r2, #1
 80096ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096d0:	e047      	b.n	8009762 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80096d2:	4b28      	ldr	r3, [pc, #160]	@ (8009774 <vTaskSwitchContext+0xb8>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096d8:	4b27      	ldr	r3, [pc, #156]	@ (8009778 <vTaskSwitchContext+0xbc>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	60fb      	str	r3, [r7, #12]
 80096de:	e011      	b.n	8009704 <vTaskSwitchContext+0x48>
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10b      	bne.n	80096fe <vTaskSwitchContext+0x42>
	__asm volatile
 80096e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	607b      	str	r3, [r7, #4]
}
 80096f8:	bf00      	nop
 80096fa:	bf00      	nop
 80096fc:	e7fd      	b.n	80096fa <vTaskSwitchContext+0x3e>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	3b01      	subs	r3, #1
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	491d      	ldr	r1, [pc, #116]	@ (800977c <vTaskSwitchContext+0xc0>)
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	4613      	mov	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	4413      	add	r3, r2
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	440b      	add	r3, r1
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d0e3      	beq.n	80096e0 <vTaskSwitchContext+0x24>
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	4613      	mov	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4a16      	ldr	r2, [pc, #88]	@ (800977c <vTaskSwitchContext+0xc0>)
 8009724:	4413      	add	r3, r2
 8009726:	60bb      	str	r3, [r7, #8]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	605a      	str	r2, [r3, #4]
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	685a      	ldr	r2, [r3, #4]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	3308      	adds	r3, #8
 800973a:	429a      	cmp	r2, r3
 800973c:	d104      	bne.n	8009748 <vTaskSwitchContext+0x8c>
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	685a      	ldr	r2, [r3, #4]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	605a      	str	r2, [r3, #4]
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	4a0c      	ldr	r2, [pc, #48]	@ (8009780 <vTaskSwitchContext+0xc4>)
 8009750:	6013      	str	r3, [r2, #0]
 8009752:	4a09      	ldr	r2, [pc, #36]	@ (8009778 <vTaskSwitchContext+0xbc>)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009758:	4b09      	ldr	r3, [pc, #36]	@ (8009780 <vTaskSwitchContext+0xc4>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	3354      	adds	r3, #84	@ 0x54
 800975e:	4a09      	ldr	r2, [pc, #36]	@ (8009784 <vTaskSwitchContext+0xc8>)
 8009760:	6013      	str	r3, [r2, #0]
}
 8009762:	bf00      	nop
 8009764:	3714      	adds	r7, #20
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	20000eac 	.word	0x20000eac
 8009774:	20000e98 	.word	0x20000e98
 8009778:	20000e8c 	.word	0x20000e8c
 800977c:	200009b4 	.word	0x200009b4
 8009780:	200009b0 	.word	0x200009b0
 8009784:	20000110 	.word	0x20000110

08009788 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10b      	bne.n	80097b0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800979c:	f383 8811 	msr	BASEPRI, r3
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	60fb      	str	r3, [r7, #12]
}
 80097aa:	bf00      	nop
 80097ac:	bf00      	nop
 80097ae:	e7fd      	b.n	80097ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097b0:	4b07      	ldr	r3, [pc, #28]	@ (80097d0 <vTaskPlaceOnEventList+0x48>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3318      	adds	r3, #24
 80097b6:	4619      	mov	r1, r3
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f7fe fe48 	bl	800844e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80097be:	2101      	movs	r1, #1
 80097c0:	6838      	ldr	r0, [r7, #0]
 80097c2:	f000 fb1d 	bl	8009e00 <prvAddCurrentTaskToDelayedList>
}
 80097c6:	bf00      	nop
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	200009b0 	.word	0x200009b0

080097d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b086      	sub	sp, #24
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10b      	bne.n	80097fe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80097e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	617b      	str	r3, [r7, #20]
}
 80097f8:	bf00      	nop
 80097fa:	bf00      	nop
 80097fc:	e7fd      	b.n	80097fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009828 <vTaskPlaceOnEventListRestricted+0x54>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3318      	adds	r3, #24
 8009804:	4619      	mov	r1, r3
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f7fe fdfd 	bl	8008406 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d002      	beq.n	8009818 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009812:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009816:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009818:	6879      	ldr	r1, [r7, #4]
 800981a:	68b8      	ldr	r0, [r7, #8]
 800981c:	f000 faf0 	bl	8009e00 <prvAddCurrentTaskToDelayedList>
	}
 8009820:	bf00      	nop
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	200009b0 	.word	0x200009b0

0800982c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10b      	bne.n	800985a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009846:	f383 8811 	msr	BASEPRI, r3
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	60fb      	str	r3, [r7, #12]
}
 8009854:	bf00      	nop
 8009856:	bf00      	nop
 8009858:	e7fd      	b.n	8009856 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	3318      	adds	r3, #24
 800985e:	4618      	mov	r0, r3
 8009860:	f7fe fe2e 	bl	80084c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009864:	4b1d      	ldr	r3, [pc, #116]	@ (80098dc <xTaskRemoveFromEventList+0xb0>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d11d      	bne.n	80098a8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	3304      	adds	r3, #4
 8009870:	4618      	mov	r0, r3
 8009872:	f7fe fe25 	bl	80084c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800987a:	4b19      	ldr	r3, [pc, #100]	@ (80098e0 <xTaskRemoveFromEventList+0xb4>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	429a      	cmp	r2, r3
 8009880:	d903      	bls.n	800988a <xTaskRemoveFromEventList+0x5e>
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009886:	4a16      	ldr	r2, [pc, #88]	@ (80098e0 <xTaskRemoveFromEventList+0xb4>)
 8009888:	6013      	str	r3, [r2, #0]
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800988e:	4613      	mov	r3, r2
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4413      	add	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	4a13      	ldr	r2, [pc, #76]	@ (80098e4 <xTaskRemoveFromEventList+0xb8>)
 8009898:	441a      	add	r2, r3
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	3304      	adds	r3, #4
 800989e:	4619      	mov	r1, r3
 80098a0:	4610      	mov	r0, r2
 80098a2:	f7fe fdb0 	bl	8008406 <vListInsertEnd>
 80098a6:	e005      	b.n	80098b4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	3318      	adds	r3, #24
 80098ac:	4619      	mov	r1, r3
 80098ae:	480e      	ldr	r0, [pc, #56]	@ (80098e8 <xTaskRemoveFromEventList+0xbc>)
 80098b0:	f7fe fda9 	bl	8008406 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098b8:	4b0c      	ldr	r3, [pc, #48]	@ (80098ec <xTaskRemoveFromEventList+0xc0>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098be:	429a      	cmp	r2, r3
 80098c0:	d905      	bls.n	80098ce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80098c2:	2301      	movs	r3, #1
 80098c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80098c6:	4b0a      	ldr	r3, [pc, #40]	@ (80098f0 <xTaskRemoveFromEventList+0xc4>)
 80098c8:	2201      	movs	r2, #1
 80098ca:	601a      	str	r2, [r3, #0]
 80098cc:	e001      	b.n	80098d2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80098ce:	2300      	movs	r3, #0
 80098d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80098d2:	697b      	ldr	r3, [r7, #20]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3718      	adds	r7, #24
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	20000eac 	.word	0x20000eac
 80098e0:	20000e8c 	.word	0x20000e8c
 80098e4:	200009b4 	.word	0x200009b4
 80098e8:	20000e44 	.word	0x20000e44
 80098ec:	200009b0 	.word	0x200009b0
 80098f0:	20000e98 	.word	0x20000e98

080098f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098fc:	4b06      	ldr	r3, [pc, #24]	@ (8009918 <vTaskInternalSetTimeOutState+0x24>)
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009904:	4b05      	ldr	r3, [pc, #20]	@ (800991c <vTaskInternalSetTimeOutState+0x28>)
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	605a      	str	r2, [r3, #4]
}
 800990c:	bf00      	nop
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	20000e9c 	.word	0x20000e9c
 800991c:	20000e88 	.word	0x20000e88

08009920 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b088      	sub	sp, #32
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d10b      	bne.n	8009948 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009934:	f383 8811 	msr	BASEPRI, r3
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	613b      	str	r3, [r7, #16]
}
 8009942:	bf00      	nop
 8009944:	bf00      	nop
 8009946:	e7fd      	b.n	8009944 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10b      	bne.n	8009966 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	60fb      	str	r3, [r7, #12]
}
 8009960:	bf00      	nop
 8009962:	bf00      	nop
 8009964:	e7fd      	b.n	8009962 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009966:	f000 ff27 	bl	800a7b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800996a:	4b1d      	ldr	r3, [pc, #116]	@ (80099e0 <xTaskCheckForTimeOut+0xc0>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	69ba      	ldr	r2, [r7, #24]
 8009976:	1ad3      	subs	r3, r2, r3
 8009978:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009982:	d102      	bne.n	800998a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009984:	2300      	movs	r3, #0
 8009986:	61fb      	str	r3, [r7, #28]
 8009988:	e023      	b.n	80099d2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	4b15      	ldr	r3, [pc, #84]	@ (80099e4 <xTaskCheckForTimeOut+0xc4>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	429a      	cmp	r2, r3
 8009994:	d007      	beq.n	80099a6 <xTaskCheckForTimeOut+0x86>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	69ba      	ldr	r2, [r7, #24]
 800999c:	429a      	cmp	r2, r3
 800999e:	d302      	bcc.n	80099a6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80099a0:	2301      	movs	r3, #1
 80099a2:	61fb      	str	r3, [r7, #28]
 80099a4:	e015      	b.n	80099d2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d20b      	bcs.n	80099c8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	1ad2      	subs	r2, r2, r3
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7ff ff99 	bl	80098f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80099c2:	2300      	movs	r3, #0
 80099c4:	61fb      	str	r3, [r7, #28]
 80099c6:	e004      	b.n	80099d2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	2200      	movs	r2, #0
 80099cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80099ce:	2301      	movs	r3, #1
 80099d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80099d2:	f000 ff23 	bl	800a81c <vPortExitCritical>

	return xReturn;
 80099d6:	69fb      	ldr	r3, [r7, #28]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3720      	adds	r7, #32
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	20000e88 	.word	0x20000e88
 80099e4:	20000e9c 	.word	0x20000e9c

080099e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80099e8:	b480      	push	{r7}
 80099ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80099ec:	4b03      	ldr	r3, [pc, #12]	@ (80099fc <vTaskMissedYield+0x14>)
 80099ee:	2201      	movs	r2, #1
 80099f0:	601a      	str	r2, [r3, #0]
}
 80099f2:	bf00      	nop
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	20000e98 	.word	0x20000e98

08009a00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a08:	f000 f852 	bl	8009ab0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a0c:	4b06      	ldr	r3, [pc, #24]	@ (8009a28 <prvIdleTask+0x28>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d9f9      	bls.n	8009a08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a14:	4b05      	ldr	r3, [pc, #20]	@ (8009a2c <prvIdleTask+0x2c>)
 8009a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a1a:	601a      	str	r2, [r3, #0]
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a24:	e7f0      	b.n	8009a08 <prvIdleTask+0x8>
 8009a26:	bf00      	nop
 8009a28:	200009b4 	.word	0x200009b4
 8009a2c:	e000ed04 	.word	0xe000ed04

08009a30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a36:	2300      	movs	r3, #0
 8009a38:	607b      	str	r3, [r7, #4]
 8009a3a:	e00c      	b.n	8009a56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	4613      	mov	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4413      	add	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4a12      	ldr	r2, [pc, #72]	@ (8009a90 <prvInitialiseTaskLists+0x60>)
 8009a48:	4413      	add	r3, r2
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fe fcae 	bl	80083ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	3301      	adds	r3, #1
 8009a54:	607b      	str	r3, [r7, #4]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b37      	cmp	r3, #55	@ 0x37
 8009a5a:	d9ef      	bls.n	8009a3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a5c:	480d      	ldr	r0, [pc, #52]	@ (8009a94 <prvInitialiseTaskLists+0x64>)
 8009a5e:	f7fe fca5 	bl	80083ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a62:	480d      	ldr	r0, [pc, #52]	@ (8009a98 <prvInitialiseTaskLists+0x68>)
 8009a64:	f7fe fca2 	bl	80083ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a68:	480c      	ldr	r0, [pc, #48]	@ (8009a9c <prvInitialiseTaskLists+0x6c>)
 8009a6a:	f7fe fc9f 	bl	80083ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a6e:	480c      	ldr	r0, [pc, #48]	@ (8009aa0 <prvInitialiseTaskLists+0x70>)
 8009a70:	f7fe fc9c 	bl	80083ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a74:	480b      	ldr	r0, [pc, #44]	@ (8009aa4 <prvInitialiseTaskLists+0x74>)
 8009a76:	f7fe fc99 	bl	80083ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa8 <prvInitialiseTaskLists+0x78>)
 8009a7c:	4a05      	ldr	r2, [pc, #20]	@ (8009a94 <prvInitialiseTaskLists+0x64>)
 8009a7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a80:	4b0a      	ldr	r3, [pc, #40]	@ (8009aac <prvInitialiseTaskLists+0x7c>)
 8009a82:	4a05      	ldr	r2, [pc, #20]	@ (8009a98 <prvInitialiseTaskLists+0x68>)
 8009a84:	601a      	str	r2, [r3, #0]
}
 8009a86:	bf00      	nop
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	200009b4 	.word	0x200009b4
 8009a94:	20000e14 	.word	0x20000e14
 8009a98:	20000e28 	.word	0x20000e28
 8009a9c:	20000e44 	.word	0x20000e44
 8009aa0:	20000e58 	.word	0x20000e58
 8009aa4:	20000e70 	.word	0x20000e70
 8009aa8:	20000e3c 	.word	0x20000e3c
 8009aac:	20000e40 	.word	0x20000e40

08009ab0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ab6:	e019      	b.n	8009aec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ab8:	f000 fe7e 	bl	800a7b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009abc:	4b10      	ldr	r3, [pc, #64]	@ (8009b00 <prvCheckTasksWaitingTermination+0x50>)
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	3304      	adds	r3, #4
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fe fcf9 	bl	80084c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009ace:	4b0d      	ldr	r3, [pc, #52]	@ (8009b04 <prvCheckTasksWaitingTermination+0x54>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	4a0b      	ldr	r2, [pc, #44]	@ (8009b04 <prvCheckTasksWaitingTermination+0x54>)
 8009ad6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8009b08 <prvCheckTasksWaitingTermination+0x58>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	3b01      	subs	r3, #1
 8009ade:	4a0a      	ldr	r2, [pc, #40]	@ (8009b08 <prvCheckTasksWaitingTermination+0x58>)
 8009ae0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ae2:	f000 fe9b 	bl	800a81c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f810 	bl	8009b0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009aec:	4b06      	ldr	r3, [pc, #24]	@ (8009b08 <prvCheckTasksWaitingTermination+0x58>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1e1      	bne.n	8009ab8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	20000e58 	.word	0x20000e58
 8009b04:	20000e84 	.word	0x20000e84
 8009b08:	20000e6c 	.word	0x20000e6c

08009b0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	3354      	adds	r3, #84	@ 0x54
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f001 fecf 	bl	800b8bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d108      	bne.n	8009b3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f001 f833 	bl	800ab98 <vPortFree>
				vPortFree( pxTCB );
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f001 f830 	bl	800ab98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b38:	e019      	b.n	8009b6e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d103      	bne.n	8009b4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f001 f827 	bl	800ab98 <vPortFree>
	}
 8009b4a:	e010      	b.n	8009b6e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d00b      	beq.n	8009b6e <prvDeleteTCB+0x62>
	__asm volatile
 8009b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b5a:	f383 8811 	msr	BASEPRI, r3
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	60fb      	str	r3, [r7, #12]
}
 8009b68:	bf00      	nop
 8009b6a:	bf00      	nop
 8009b6c:	e7fd      	b.n	8009b6a <prvDeleteTCB+0x5e>
	}
 8009b6e:	bf00      	nop
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
	...

08009b78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8009bb0 <prvResetNextTaskUnblockTime+0x38>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d104      	bne.n	8009b92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b88:	4b0a      	ldr	r3, [pc, #40]	@ (8009bb4 <prvResetNextTaskUnblockTime+0x3c>)
 8009b8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b90:	e008      	b.n	8009ba4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b92:	4b07      	ldr	r3, [pc, #28]	@ (8009bb0 <prvResetNextTaskUnblockTime+0x38>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	4a04      	ldr	r2, [pc, #16]	@ (8009bb4 <prvResetNextTaskUnblockTime+0x3c>)
 8009ba2:	6013      	str	r3, [r2, #0]
}
 8009ba4:	bf00      	nop
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	20000e3c 	.word	0x20000e3c
 8009bb4:	20000ea4 	.word	0x20000ea4

08009bb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8009bec <xTaskGetSchedulerState+0x34>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d102      	bne.n	8009bcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	607b      	str	r3, [r7, #4]
 8009bca:	e008      	b.n	8009bde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bcc:	4b08      	ldr	r3, [pc, #32]	@ (8009bf0 <xTaskGetSchedulerState+0x38>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d102      	bne.n	8009bda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	607b      	str	r3, [r7, #4]
 8009bd8:	e001      	b.n	8009bde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009bde:	687b      	ldr	r3, [r7, #4]
	}
 8009be0:	4618      	mov	r0, r3
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	20000e90 	.word	0x20000e90
 8009bf0:	20000eac 	.word	0x20000eac

08009bf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c00:	2300      	movs	r3, #0
 8009c02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d058      	beq.n	8009cbc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8009cc8 <xTaskPriorityDisinherit+0xd4>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d00b      	beq.n	8009c2c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c18:	f383 8811 	msr	BASEPRI, r3
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	60fb      	str	r3, [r7, #12]
}
 8009c26:	bf00      	nop
 8009c28:	bf00      	nop
 8009c2a:	e7fd      	b.n	8009c28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10b      	bne.n	8009c4c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c38:	f383 8811 	msr	BASEPRI, r3
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	60bb      	str	r3, [r7, #8]
}
 8009c46:	bf00      	nop
 8009c48:	bf00      	nop
 8009c4a:	e7fd      	b.n	8009c48 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c50:	1e5a      	subs	r2, r3, #1
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d02c      	beq.n	8009cbc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d128      	bne.n	8009cbc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fe fc26 	bl	80084c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8009ccc <xTaskPriorityDisinherit+0xd8>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d903      	bls.n	8009c9c <xTaskPriorityDisinherit+0xa8>
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c98:	4a0c      	ldr	r2, [pc, #48]	@ (8009ccc <xTaskPriorityDisinherit+0xd8>)
 8009c9a:	6013      	str	r3, [r2, #0]
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4a09      	ldr	r2, [pc, #36]	@ (8009cd0 <xTaskPriorityDisinherit+0xdc>)
 8009caa:	441a      	add	r2, r3
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	3304      	adds	r3, #4
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	f7fe fba7 	bl	8008406 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cbc:	697b      	ldr	r3, [r7, #20]
	}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3718      	adds	r7, #24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	200009b0 	.word	0x200009b0
 8009ccc:	20000e8c 	.word	0x20000e8c
 8009cd0:	200009b4 	.word	0x200009b4

08009cd4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b08a      	sub	sp, #40	@ 0x28
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10b      	bne.n	8009cfc <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	61bb      	str	r3, [r7, #24]
}
 8009cf6:	bf00      	nop
 8009cf8:	bf00      	nop
 8009cfa:	e7fd      	b.n	8009cf8 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009cfc:	f000 fe3c 	bl	800a978 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8009d04:	f3ef 8211 	mrs	r2, BASEPRI
 8009d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d0c:	f383 8811 	msr	BASEPRI, r3
 8009d10:	f3bf 8f6f 	isb	sy
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	617a      	str	r2, [r7, #20]
 8009d1a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009d1c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d1e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d22:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8009d26:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8009d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009d36:	1c5a      	adds	r2, r3, #1
 8009d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009d3e:	7ffb      	ldrb	r3, [r7, #31]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d147      	bne.n	8009dd4 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00b      	beq.n	8009d64 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8009d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d50:	f383 8811 	msr	BASEPRI, r3
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	60fb      	str	r3, [r7, #12]
}
 8009d5e:	bf00      	nop
 8009d60:	bf00      	nop
 8009d62:	e7fd      	b.n	8009d60 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d64:	4b20      	ldr	r3, [pc, #128]	@ (8009de8 <vTaskNotifyGiveFromISR+0x114>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d11d      	bne.n	8009da8 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6e:	3304      	adds	r3, #4
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7fe fba5 	bl	80084c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8009dec <vTaskNotifyGiveFromISR+0x118>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d903      	bls.n	8009d8a <vTaskNotifyGiveFromISR+0xb6>
 8009d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d86:	4a19      	ldr	r2, [pc, #100]	@ (8009dec <vTaskNotifyGiveFromISR+0x118>)
 8009d88:	6013      	str	r3, [r2, #0]
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d8e:	4613      	mov	r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	4413      	add	r3, r2
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4a16      	ldr	r2, [pc, #88]	@ (8009df0 <vTaskNotifyGiveFromISR+0x11c>)
 8009d98:	441a      	add	r2, r3
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9c:	3304      	adds	r3, #4
 8009d9e:	4619      	mov	r1, r3
 8009da0:	4610      	mov	r0, r2
 8009da2:	f7fe fb30 	bl	8008406 <vListInsertEnd>
 8009da6:	e005      	b.n	8009db4 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009daa:	3318      	adds	r3, #24
 8009dac:	4619      	mov	r1, r3
 8009dae:	4811      	ldr	r0, [pc, #68]	@ (8009df4 <vTaskNotifyGiveFromISR+0x120>)
 8009db0:	f7fe fb29 	bl	8008406 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009db8:	4b0f      	ldr	r3, [pc, #60]	@ (8009df8 <vTaskNotifyGiveFromISR+0x124>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d908      	bls.n	8009dd4 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d002      	beq.n	8009dce <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009dce:	4b0b      	ldr	r3, [pc, #44]	@ (8009dfc <vTaskNotifyGiveFromISR+0x128>)
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	601a      	str	r2, [r3, #0]
 8009dd4:	6a3b      	ldr	r3, [r7, #32]
 8009dd6:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	f383 8811 	msr	BASEPRI, r3
}
 8009dde:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8009de0:	bf00      	nop
 8009de2:	3728      	adds	r7, #40	@ 0x28
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20000eac 	.word	0x20000eac
 8009dec:	20000e8c 	.word	0x20000e8c
 8009df0:	200009b4 	.word	0x200009b4
 8009df4:	20000e44 	.word	0x20000e44
 8009df8:	200009b0 	.word	0x200009b0
 8009dfc:	20000e98 	.word	0x20000e98

08009e00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e0a:	4b21      	ldr	r3, [pc, #132]	@ (8009e90 <prvAddCurrentTaskToDelayedList+0x90>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e10:	4b20      	ldr	r3, [pc, #128]	@ (8009e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3304      	adds	r3, #4
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fe fb52 	bl	80084c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e22:	d10a      	bne.n	8009e3a <prvAddCurrentTaskToDelayedList+0x3a>
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d007      	beq.n	8009e3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8009e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	3304      	adds	r3, #4
 8009e30:	4619      	mov	r1, r3
 8009e32:	4819      	ldr	r0, [pc, #100]	@ (8009e98 <prvAddCurrentTaskToDelayedList+0x98>)
 8009e34:	f7fe fae7 	bl	8008406 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e38:	e026      	b.n	8009e88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4413      	add	r3, r2
 8009e40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e42:	4b14      	ldr	r3, [pc, #80]	@ (8009e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d209      	bcs.n	8009e66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e52:	4b12      	ldr	r3, [pc, #72]	@ (8009e9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	4b0f      	ldr	r3, [pc, #60]	@ (8009e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	4610      	mov	r0, r2
 8009e60:	f7fe faf5 	bl	800844e <vListInsert>
}
 8009e64:	e010      	b.n	8009e88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e66:	4b0e      	ldr	r3, [pc, #56]	@ (8009ea0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8009e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	3304      	adds	r3, #4
 8009e70:	4619      	mov	r1, r3
 8009e72:	4610      	mov	r0, r2
 8009e74:	f7fe faeb 	bl	800844e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e78:	4b0a      	ldr	r3, [pc, #40]	@ (8009ea4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d202      	bcs.n	8009e88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009e82:	4a08      	ldr	r2, [pc, #32]	@ (8009ea4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	6013      	str	r3, [r2, #0]
}
 8009e88:	bf00      	nop
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	20000e88 	.word	0x20000e88
 8009e94:	200009b0 	.word	0x200009b0
 8009e98:	20000e70 	.word	0x20000e70
 8009e9c:	20000e40 	.word	0x20000e40
 8009ea0:	20000e3c 	.word	0x20000e3c
 8009ea4:	20000ea4 	.word	0x20000ea4

08009ea8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b08a      	sub	sp, #40	@ 0x28
 8009eac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009eb2:	f000 fb13 	bl	800a4dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8009f2c <xTimerCreateTimerTask+0x84>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d021      	beq.n	8009f02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009ec6:	1d3a      	adds	r2, r7, #4
 8009ec8:	f107 0108 	add.w	r1, r7, #8
 8009ecc:	f107 030c 	add.w	r3, r7, #12
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7fe fa51 	bl	8008378 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ed6:	6879      	ldr	r1, [r7, #4]
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	9202      	str	r2, [sp, #8]
 8009ede:	9301      	str	r3, [sp, #4]
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	460a      	mov	r2, r1
 8009ee8:	4911      	ldr	r1, [pc, #68]	@ (8009f30 <xTimerCreateTimerTask+0x88>)
 8009eea:	4812      	ldr	r0, [pc, #72]	@ (8009f34 <xTimerCreateTimerTask+0x8c>)
 8009eec:	f7ff f80c 	bl	8008f08 <xTaskCreateStatic>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	4a11      	ldr	r2, [pc, #68]	@ (8009f38 <xTimerCreateTimerTask+0x90>)
 8009ef4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009ef6:	4b10      	ldr	r3, [pc, #64]	@ (8009f38 <xTimerCreateTimerTask+0x90>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009efe:	2301      	movs	r3, #1
 8009f00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10b      	bne.n	8009f20 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f0c:	f383 8811 	msr	BASEPRI, r3
 8009f10:	f3bf 8f6f 	isb	sy
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	613b      	str	r3, [r7, #16]
}
 8009f1a:	bf00      	nop
 8009f1c:	bf00      	nop
 8009f1e:	e7fd      	b.n	8009f1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009f20:	697b      	ldr	r3, [r7, #20]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3718      	adds	r7, #24
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	20000ee0 	.word	0x20000ee0
 8009f30:	0800bab8 	.word	0x0800bab8
 8009f34:	0800a075 	.word	0x0800a075
 8009f38:	20000ee4 	.word	0x20000ee4

08009f3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08a      	sub	sp, #40	@ 0x28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10b      	bne.n	8009f6c <xTimerGenericCommand+0x30>
	__asm volatile
 8009f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	623b      	str	r3, [r7, #32]
}
 8009f66:	bf00      	nop
 8009f68:	bf00      	nop
 8009f6a:	e7fd      	b.n	8009f68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009f6c:	4b19      	ldr	r3, [pc, #100]	@ (8009fd4 <xTimerGenericCommand+0x98>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d02a      	beq.n	8009fca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	2b05      	cmp	r3, #5
 8009f84:	dc18      	bgt.n	8009fb8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009f86:	f7ff fe17 	bl	8009bb8 <xTaskGetSchedulerState>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	d109      	bne.n	8009fa4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009f90:	4b10      	ldr	r3, [pc, #64]	@ (8009fd4 <xTimerGenericCommand+0x98>)
 8009f92:	6818      	ldr	r0, [r3, #0]
 8009f94:	f107 0110 	add.w	r1, r7, #16
 8009f98:	2300      	movs	r3, #0
 8009f9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f9c:	f7fe fbc4 	bl	8008728 <xQueueGenericSend>
 8009fa0:	6278      	str	r0, [r7, #36]	@ 0x24
 8009fa2:	e012      	b.n	8009fca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8009fd4 <xTimerGenericCommand+0x98>)
 8009fa6:	6818      	ldr	r0, [r3, #0]
 8009fa8:	f107 0110 	add.w	r1, r7, #16
 8009fac:	2300      	movs	r3, #0
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f7fe fbba 	bl	8008728 <xQueueGenericSend>
 8009fb4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009fb6:	e008      	b.n	8009fca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009fb8:	4b06      	ldr	r3, [pc, #24]	@ (8009fd4 <xTimerGenericCommand+0x98>)
 8009fba:	6818      	ldr	r0, [r3, #0]
 8009fbc:	f107 0110 	add.w	r1, r7, #16
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	f7fe fcb2 	bl	800892c <xQueueGenericSendFromISR>
 8009fc8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3728      	adds	r7, #40	@ 0x28
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	20000ee0 	.word	0x20000ee0

08009fd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b088      	sub	sp, #32
 8009fdc:	af02      	add	r7, sp, #8
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fe2:	4b23      	ldr	r3, [pc, #140]	@ (800a070 <prvProcessExpiredTimer+0x98>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	3304      	adds	r3, #4
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7fe fa65 	bl	80084c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ffc:	f003 0304 	and.w	r3, r3, #4
 800a000:	2b00      	cmp	r3, #0
 800a002:	d023      	beq.n	800a04c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	699a      	ldr	r2, [r3, #24]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	18d1      	adds	r1, r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	6978      	ldr	r0, [r7, #20]
 800a012:	f000 f8d5 	bl	800a1c0 <prvInsertTimerInActiveList>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d020      	beq.n	800a05e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a01c:	2300      	movs	r3, #0
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	2300      	movs	r3, #0
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	2100      	movs	r1, #0
 800a026:	6978      	ldr	r0, [r7, #20]
 800a028:	f7ff ff88 	bl	8009f3c <xTimerGenericCommand>
 800a02c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d114      	bne.n	800a05e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	60fb      	str	r3, [r7, #12]
}
 800a046:	bf00      	nop
 800a048:	bf00      	nop
 800a04a:	e7fd      	b.n	800a048 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a052:	f023 0301 	bic.w	r3, r3, #1
 800a056:	b2da      	uxtb	r2, r3
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	6978      	ldr	r0, [r7, #20]
 800a064:	4798      	blx	r3
}
 800a066:	bf00      	nop
 800a068:	3718      	adds	r7, #24
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	20000ed8 	.word	0x20000ed8

0800a074 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a07c:	f107 0308 	add.w	r3, r7, #8
 800a080:	4618      	mov	r0, r3
 800a082:	f000 f859 	bl	800a138 <prvGetNextExpireTime>
 800a086:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	4619      	mov	r1, r3
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f000 f805 	bl	800a09c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a092:	f000 f8d7 	bl	800a244 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a096:	bf00      	nop
 800a098:	e7f0      	b.n	800a07c <prvTimerTask+0x8>
	...

0800a09c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a0a6:	f7ff f993 	bl	80093d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0aa:	f107 0308 	add.w	r3, r7, #8
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 f866 	bl	800a180 <prvSampleTimeNow>
 800a0b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d130      	bne.n	800a11e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10a      	bne.n	800a0d8 <prvProcessTimerOrBlockTask+0x3c>
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d806      	bhi.n	800a0d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a0ca:	f7ff f98f 	bl	80093ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a0ce:	68f9      	ldr	r1, [r7, #12]
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f7ff ff81 	bl	8009fd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a0d6:	e024      	b.n	800a122 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d008      	beq.n	800a0f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a0de:	4b13      	ldr	r3, [pc, #76]	@ (800a12c <prvProcessTimerOrBlockTask+0x90>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d101      	bne.n	800a0ec <prvProcessTimerOrBlockTask+0x50>
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e000      	b.n	800a0ee <prvProcessTimerOrBlockTask+0x52>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a0f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a130 <prvProcessTimerOrBlockTask+0x94>)
 800a0f2:	6818      	ldr	r0, [r3, #0]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	f7fe fecf 	bl	8008ea0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a102:	f7ff f973 	bl	80093ec <xTaskResumeAll>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d10a      	bne.n	800a122 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a10c:	4b09      	ldr	r3, [pc, #36]	@ (800a134 <prvProcessTimerOrBlockTask+0x98>)
 800a10e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	f3bf 8f6f 	isb	sy
}
 800a11c:	e001      	b.n	800a122 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a11e:	f7ff f965 	bl	80093ec <xTaskResumeAll>
}
 800a122:	bf00      	nop
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20000edc 	.word	0x20000edc
 800a130:	20000ee0 	.word	0x20000ee0
 800a134:	e000ed04 	.word	0xe000ed04

0800a138 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a140:	4b0e      	ldr	r3, [pc, #56]	@ (800a17c <prvGetNextExpireTime+0x44>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d101      	bne.n	800a14e <prvGetNextExpireTime+0x16>
 800a14a:	2201      	movs	r2, #1
 800a14c:	e000      	b.n	800a150 <prvGetNextExpireTime+0x18>
 800a14e:	2200      	movs	r2, #0
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d105      	bne.n	800a168 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a15c:	4b07      	ldr	r3, [pc, #28]	@ (800a17c <prvGetNextExpireTime+0x44>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	60fb      	str	r3, [r7, #12]
 800a166:	e001      	b.n	800a16c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a168:	2300      	movs	r3, #0
 800a16a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a16c:	68fb      	ldr	r3, [r7, #12]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3714      	adds	r7, #20
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	20000ed8 	.word	0x20000ed8

0800a180 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a188:	f7ff f9ce 	bl	8009528 <xTaskGetTickCount>
 800a18c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a18e:	4b0b      	ldr	r3, [pc, #44]	@ (800a1bc <prvSampleTimeNow+0x3c>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	429a      	cmp	r2, r3
 800a196:	d205      	bcs.n	800a1a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a198:	f000 f93a 	bl	800a410 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	601a      	str	r2, [r3, #0]
 800a1a2:	e002      	b.n	800a1aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a1aa:	4a04      	ldr	r2, [pc, #16]	@ (800a1bc <prvSampleTimeNow+0x3c>)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20000ee8 	.word	0x20000ee8

0800a1c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
 800a1cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d812      	bhi.n	800a20c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	1ad2      	subs	r2, r2, r3
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d302      	bcc.n	800a1fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	617b      	str	r3, [r7, #20]
 800a1f8:	e01b      	b.n	800a232 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a1fa:	4b10      	ldr	r3, [pc, #64]	@ (800a23c <prvInsertTimerInActiveList+0x7c>)
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3304      	adds	r3, #4
 800a202:	4619      	mov	r1, r3
 800a204:	4610      	mov	r0, r2
 800a206:	f7fe f922 	bl	800844e <vListInsert>
 800a20a:	e012      	b.n	800a232 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	429a      	cmp	r2, r3
 800a212:	d206      	bcs.n	800a222 <prvInsertTimerInActiveList+0x62>
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d302      	bcc.n	800a222 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a21c:	2301      	movs	r3, #1
 800a21e:	617b      	str	r3, [r7, #20]
 800a220:	e007      	b.n	800a232 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a222:	4b07      	ldr	r3, [pc, #28]	@ (800a240 <prvInsertTimerInActiveList+0x80>)
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	3304      	adds	r3, #4
 800a22a:	4619      	mov	r1, r3
 800a22c:	4610      	mov	r0, r2
 800a22e:	f7fe f90e 	bl	800844e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a232:	697b      	ldr	r3, [r7, #20]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3718      	adds	r7, #24
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	20000edc 	.word	0x20000edc
 800a240:	20000ed8 	.word	0x20000ed8

0800a244 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b08e      	sub	sp, #56	@ 0x38
 800a248:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a24a:	e0ce      	b.n	800a3ea <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	da19      	bge.n	800a286 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a252:	1d3b      	adds	r3, r7, #4
 800a254:	3304      	adds	r3, #4
 800a256:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10b      	bne.n	800a276 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	61fb      	str	r3, [r7, #28]
}
 800a270:	bf00      	nop
 800a272:	bf00      	nop
 800a274:	e7fd      	b.n	800a272 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a27c:	6850      	ldr	r0, [r2, #4]
 800a27e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a280:	6892      	ldr	r2, [r2, #8]
 800a282:	4611      	mov	r1, r2
 800a284:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f2c0 80ae 	blt.w	800a3ea <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a294:	695b      	ldr	r3, [r3, #20]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d004      	beq.n	800a2a4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29c:	3304      	adds	r3, #4
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fe f90e 	bl	80084c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2a4:	463b      	mov	r3, r7
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7ff ff6a 	bl	800a180 <prvSampleTimeNow>
 800a2ac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b09      	cmp	r3, #9
 800a2b2:	f200 8097 	bhi.w	800a3e4 <prvProcessReceivedCommands+0x1a0>
 800a2b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a2bc <prvProcessReceivedCommands+0x78>)
 800a2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2bc:	0800a2e5 	.word	0x0800a2e5
 800a2c0:	0800a2e5 	.word	0x0800a2e5
 800a2c4:	0800a2e5 	.word	0x0800a2e5
 800a2c8:	0800a35b 	.word	0x0800a35b
 800a2cc:	0800a36f 	.word	0x0800a36f
 800a2d0:	0800a3bb 	.word	0x0800a3bb
 800a2d4:	0800a2e5 	.word	0x0800a2e5
 800a2d8:	0800a2e5 	.word	0x0800a2e5
 800a2dc:	0800a35b 	.word	0x0800a35b
 800a2e0:	0800a36f 	.word	0x0800a36f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2ea:	f043 0301 	orr.w	r3, r3, #1
 800a2ee:	b2da      	uxtb	r2, r3
 800a2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	18d1      	adds	r1, r2, r3
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a304:	f7ff ff5c 	bl	800a1c0 <prvInsertTimerInActiveList>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d06c      	beq.n	800a3e8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a314:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a318:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a31c:	f003 0304 	and.w	r3, r3, #4
 800a320:	2b00      	cmp	r3, #0
 800a322:	d061      	beq.n	800a3e8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a324:	68ba      	ldr	r2, [r7, #8]
 800a326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	441a      	add	r2, r3
 800a32c:	2300      	movs	r3, #0
 800a32e:	9300      	str	r3, [sp, #0]
 800a330:	2300      	movs	r3, #0
 800a332:	2100      	movs	r1, #0
 800a334:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a336:	f7ff fe01 	bl	8009f3c <xTimerGenericCommand>
 800a33a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a33c:	6a3b      	ldr	r3, [r7, #32]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d152      	bne.n	800a3e8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	61bb      	str	r3, [r7, #24]
}
 800a354:	bf00      	nop
 800a356:	bf00      	nop
 800a358:	e7fd      	b.n	800a356 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a35c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a360:	f023 0301 	bic.w	r3, r3, #1
 800a364:	b2da      	uxtb	r2, r3
 800a366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a368:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a36c:	e03d      	b.n	800a3ea <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a370:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a374:	f043 0301 	orr.w	r3, r3, #1
 800a378:	b2da      	uxtb	r2, r3
 800a37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a37c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a384:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a388:	699b      	ldr	r3, [r3, #24]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d10b      	bne.n	800a3a6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	617b      	str	r3, [r7, #20]
}
 800a3a0:	bf00      	nop
 800a3a2:	bf00      	nop
 800a3a4:	e7fd      	b.n	800a3a2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a8:	699a      	ldr	r2, [r3, #24]
 800a3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ac:	18d1      	adds	r1, r2, r3
 800a3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3b4:	f7ff ff04 	bl	800a1c0 <prvInsertTimerInActiveList>
					break;
 800a3b8:	e017      	b.n	800a3ea <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3c0:	f003 0302 	and.w	r3, r3, #2
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d103      	bne.n	800a3d0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a3c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3ca:	f000 fbe5 	bl	800ab98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a3ce:	e00c      	b.n	800a3ea <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3d6:	f023 0301 	bic.w	r3, r3, #1
 800a3da:	b2da      	uxtb	r2, r3
 800a3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a3e2:	e002      	b.n	800a3ea <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a3e4:	bf00      	nop
 800a3e6:	e000      	b.n	800a3ea <prvProcessReceivedCommands+0x1a6>
					break;
 800a3e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3ea:	4b08      	ldr	r3, [pc, #32]	@ (800a40c <prvProcessReceivedCommands+0x1c8>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	1d39      	adds	r1, r7, #4
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe fb38 	bl	8008a68 <xQueueReceive>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f47f af26 	bne.w	800a24c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a400:	bf00      	nop
 800a402:	bf00      	nop
 800a404:	3730      	adds	r7, #48	@ 0x30
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	20000ee0 	.word	0x20000ee0

0800a410 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b088      	sub	sp, #32
 800a414:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a416:	e049      	b.n	800a4ac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a418:	4b2e      	ldr	r3, [pc, #184]	@ (800a4d4 <prvSwitchTimerLists+0xc4>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a422:	4b2c      	ldr	r3, [pc, #176]	@ (800a4d4 <prvSwitchTimerLists+0xc4>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	3304      	adds	r3, #4
 800a430:	4618      	mov	r0, r3
 800a432:	f7fe f845 	bl	80084c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6a1b      	ldr	r3, [r3, #32]
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a444:	f003 0304 	and.w	r3, r3, #4
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d02f      	beq.n	800a4ac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	693a      	ldr	r2, [r7, #16]
 800a452:	4413      	add	r3, r2
 800a454:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d90e      	bls.n	800a47c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a46a:	4b1a      	ldr	r3, [pc, #104]	@ (800a4d4 <prvSwitchTimerLists+0xc4>)
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3304      	adds	r3, #4
 800a472:	4619      	mov	r1, r3
 800a474:	4610      	mov	r0, r2
 800a476:	f7fd ffea 	bl	800844e <vListInsert>
 800a47a:	e017      	b.n	800a4ac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a47c:	2300      	movs	r3, #0
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	2300      	movs	r3, #0
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	2100      	movs	r1, #0
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f7ff fd58 	bl	8009f3c <xTimerGenericCommand>
 800a48c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10b      	bne.n	800a4ac <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	603b      	str	r3, [r7, #0]
}
 800a4a6:	bf00      	nop
 800a4a8:	bf00      	nop
 800a4aa:	e7fd      	b.n	800a4a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4ac:	4b09      	ldr	r3, [pc, #36]	@ (800a4d4 <prvSwitchTimerLists+0xc4>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1b0      	bne.n	800a418 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a4b6:	4b07      	ldr	r3, [pc, #28]	@ (800a4d4 <prvSwitchTimerLists+0xc4>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a4bc:	4b06      	ldr	r3, [pc, #24]	@ (800a4d8 <prvSwitchTimerLists+0xc8>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a04      	ldr	r2, [pc, #16]	@ (800a4d4 <prvSwitchTimerLists+0xc4>)
 800a4c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a4c4:	4a04      	ldr	r2, [pc, #16]	@ (800a4d8 <prvSwitchTimerLists+0xc8>)
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	6013      	str	r3, [r2, #0]
}
 800a4ca:	bf00      	nop
 800a4cc:	3718      	adds	r7, #24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20000ed8 	.word	0x20000ed8
 800a4d8:	20000edc 	.word	0x20000edc

0800a4dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a4e2:	f000 f969 	bl	800a7b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a4e6:	4b15      	ldr	r3, [pc, #84]	@ (800a53c <prvCheckForValidListAndQueue+0x60>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d120      	bne.n	800a530 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a4ee:	4814      	ldr	r0, [pc, #80]	@ (800a540 <prvCheckForValidListAndQueue+0x64>)
 800a4f0:	f7fd ff5c 	bl	80083ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a4f4:	4813      	ldr	r0, [pc, #76]	@ (800a544 <prvCheckForValidListAndQueue+0x68>)
 800a4f6:	f7fd ff59 	bl	80083ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a4fa:	4b13      	ldr	r3, [pc, #76]	@ (800a548 <prvCheckForValidListAndQueue+0x6c>)
 800a4fc:	4a10      	ldr	r2, [pc, #64]	@ (800a540 <prvCheckForValidListAndQueue+0x64>)
 800a4fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a500:	4b12      	ldr	r3, [pc, #72]	@ (800a54c <prvCheckForValidListAndQueue+0x70>)
 800a502:	4a10      	ldr	r2, [pc, #64]	@ (800a544 <prvCheckForValidListAndQueue+0x68>)
 800a504:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a506:	2300      	movs	r3, #0
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	4b11      	ldr	r3, [pc, #68]	@ (800a550 <prvCheckForValidListAndQueue+0x74>)
 800a50c:	4a11      	ldr	r2, [pc, #68]	@ (800a554 <prvCheckForValidListAndQueue+0x78>)
 800a50e:	2110      	movs	r1, #16
 800a510:	200a      	movs	r0, #10
 800a512:	f7fe f869 	bl	80085e8 <xQueueGenericCreateStatic>
 800a516:	4603      	mov	r3, r0
 800a518:	4a08      	ldr	r2, [pc, #32]	@ (800a53c <prvCheckForValidListAndQueue+0x60>)
 800a51a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a51c:	4b07      	ldr	r3, [pc, #28]	@ (800a53c <prvCheckForValidListAndQueue+0x60>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d005      	beq.n	800a530 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a524:	4b05      	ldr	r3, [pc, #20]	@ (800a53c <prvCheckForValidListAndQueue+0x60>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	490b      	ldr	r1, [pc, #44]	@ (800a558 <prvCheckForValidListAndQueue+0x7c>)
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fe fc8e 	bl	8008e4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a530:	f000 f974 	bl	800a81c <vPortExitCritical>
}
 800a534:	bf00      	nop
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	20000ee0 	.word	0x20000ee0
 800a540:	20000eb0 	.word	0x20000eb0
 800a544:	20000ec4 	.word	0x20000ec4
 800a548:	20000ed8 	.word	0x20000ed8
 800a54c:	20000edc 	.word	0x20000edc
 800a550:	20000f8c 	.word	0x20000f8c
 800a554:	20000eec 	.word	0x20000eec
 800a558:	0800bac0 	.word	0x0800bac0

0800a55c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	3b04      	subs	r3, #4
 800a56c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	3b04      	subs	r3, #4
 800a57a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	f023 0201 	bic.w	r2, r3, #1
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	3b04      	subs	r3, #4
 800a58a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a58c:	4a0c      	ldr	r2, [pc, #48]	@ (800a5c0 <pxPortInitialiseStack+0x64>)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	3b14      	subs	r3, #20
 800a596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	3b04      	subs	r3, #4
 800a5a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f06f 0202 	mvn.w	r2, #2
 800a5aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	3b20      	subs	r3, #32
 800a5b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3714      	adds	r7, #20
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	0800a5c5 	.word	0x0800a5c5

0800a5c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a5ce:	4b13      	ldr	r3, [pc, #76]	@ (800a61c <prvTaskExitError+0x58>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a5d6:	d00b      	beq.n	800a5f0 <prvTaskExitError+0x2c>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	60fb      	str	r3, [r7, #12]
}
 800a5ea:	bf00      	nop
 800a5ec:	bf00      	nop
 800a5ee:	e7fd      	b.n	800a5ec <prvTaskExitError+0x28>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f4:	f383 8811 	msr	BASEPRI, r3
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	60bb      	str	r3, [r7, #8]
}
 800a602:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a604:	bf00      	nop
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d0fc      	beq.n	800a606 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a60c:	bf00      	nop
 800a60e:	bf00      	nop
 800a610:	3714      	adds	r7, #20
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	20000098 	.word	0x20000098

0800a620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a620:	4b07      	ldr	r3, [pc, #28]	@ (800a640 <pxCurrentTCBConst2>)
 800a622:	6819      	ldr	r1, [r3, #0]
 800a624:	6808      	ldr	r0, [r1, #0]
 800a626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62a:	f380 8809 	msr	PSP, r0
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f04f 0000 	mov.w	r0, #0
 800a636:	f380 8811 	msr	BASEPRI, r0
 800a63a:	4770      	bx	lr
 800a63c:	f3af 8000 	nop.w

0800a640 <pxCurrentTCBConst2>:
 800a640:	200009b0 	.word	0x200009b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a644:	bf00      	nop
 800a646:	bf00      	nop

0800a648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a648:	4808      	ldr	r0, [pc, #32]	@ (800a66c <prvPortStartFirstTask+0x24>)
 800a64a:	6800      	ldr	r0, [r0, #0]
 800a64c:	6800      	ldr	r0, [r0, #0]
 800a64e:	f380 8808 	msr	MSP, r0
 800a652:	f04f 0000 	mov.w	r0, #0
 800a656:	f380 8814 	msr	CONTROL, r0
 800a65a:	b662      	cpsie	i
 800a65c:	b661      	cpsie	f
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	df00      	svc	0
 800a668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a66a:	bf00      	nop
 800a66c:	e000ed08 	.word	0xe000ed08

0800a670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a676:	4b47      	ldr	r3, [pc, #284]	@ (800a794 <xPortStartScheduler+0x124>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a47      	ldr	r2, [pc, #284]	@ (800a798 <xPortStartScheduler+0x128>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d10b      	bne.n	800a698 <xPortStartScheduler+0x28>
	__asm volatile
 800a680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a684:	f383 8811 	msr	BASEPRI, r3
 800a688:	f3bf 8f6f 	isb	sy
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	613b      	str	r3, [r7, #16]
}
 800a692:	bf00      	nop
 800a694:	bf00      	nop
 800a696:	e7fd      	b.n	800a694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a698:	4b3e      	ldr	r3, [pc, #248]	@ (800a794 <xPortStartScheduler+0x124>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a3f      	ldr	r2, [pc, #252]	@ (800a79c <xPortStartScheduler+0x12c>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d10b      	bne.n	800a6ba <xPortStartScheduler+0x4a>
	__asm volatile
 800a6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a6:	f383 8811 	msr	BASEPRI, r3
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	60fb      	str	r3, [r7, #12]
}
 800a6b4:	bf00      	nop
 800a6b6:	bf00      	nop
 800a6b8:	e7fd      	b.n	800a6b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6ba:	4b39      	ldr	r3, [pc, #228]	@ (800a7a0 <xPortStartScheduler+0x130>)
 800a6bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	22ff      	movs	r2, #255	@ 0xff
 800a6ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6d4:	78fb      	ldrb	r3, [r7, #3]
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a6dc:	b2da      	uxtb	r2, r3
 800a6de:	4b31      	ldr	r3, [pc, #196]	@ (800a7a4 <xPortStartScheduler+0x134>)
 800a6e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6e2:	4b31      	ldr	r3, [pc, #196]	@ (800a7a8 <xPortStartScheduler+0x138>)
 800a6e4:	2207      	movs	r2, #7
 800a6e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6e8:	e009      	b.n	800a6fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a6ea:	4b2f      	ldr	r3, [pc, #188]	@ (800a7a8 <xPortStartScheduler+0x138>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	4a2d      	ldr	r2, [pc, #180]	@ (800a7a8 <xPortStartScheduler+0x138>)
 800a6f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a6f4:	78fb      	ldrb	r3, [r7, #3]
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	005b      	lsls	r3, r3, #1
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6fe:	78fb      	ldrb	r3, [r7, #3]
 800a700:	b2db      	uxtb	r3, r3
 800a702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a706:	2b80      	cmp	r3, #128	@ 0x80
 800a708:	d0ef      	beq.n	800a6ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a70a:	4b27      	ldr	r3, [pc, #156]	@ (800a7a8 <xPortStartScheduler+0x138>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f1c3 0307 	rsb	r3, r3, #7
 800a712:	2b04      	cmp	r3, #4
 800a714:	d00b      	beq.n	800a72e <xPortStartScheduler+0xbe>
	__asm volatile
 800a716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a71a:	f383 8811 	msr	BASEPRI, r3
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	60bb      	str	r3, [r7, #8]
}
 800a728:	bf00      	nop
 800a72a:	bf00      	nop
 800a72c:	e7fd      	b.n	800a72a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a72e:	4b1e      	ldr	r3, [pc, #120]	@ (800a7a8 <xPortStartScheduler+0x138>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	021b      	lsls	r3, r3, #8
 800a734:	4a1c      	ldr	r2, [pc, #112]	@ (800a7a8 <xPortStartScheduler+0x138>)
 800a736:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a738:	4b1b      	ldr	r3, [pc, #108]	@ (800a7a8 <xPortStartScheduler+0x138>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a740:	4a19      	ldr	r2, [pc, #100]	@ (800a7a8 <xPortStartScheduler+0x138>)
 800a742:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	b2da      	uxtb	r2, r3
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a74c:	4b17      	ldr	r3, [pc, #92]	@ (800a7ac <xPortStartScheduler+0x13c>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a16      	ldr	r2, [pc, #88]	@ (800a7ac <xPortStartScheduler+0x13c>)
 800a752:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a756:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a758:	4b14      	ldr	r3, [pc, #80]	@ (800a7ac <xPortStartScheduler+0x13c>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a13      	ldr	r2, [pc, #76]	@ (800a7ac <xPortStartScheduler+0x13c>)
 800a75e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a762:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a764:	f000 f8da 	bl	800a91c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a768:	4b11      	ldr	r3, [pc, #68]	@ (800a7b0 <xPortStartScheduler+0x140>)
 800a76a:	2200      	movs	r2, #0
 800a76c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a76e:	f000 f8f9 	bl	800a964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a772:	4b10      	ldr	r3, [pc, #64]	@ (800a7b4 <xPortStartScheduler+0x144>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a0f      	ldr	r2, [pc, #60]	@ (800a7b4 <xPortStartScheduler+0x144>)
 800a778:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a77c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a77e:	f7ff ff63 	bl	800a648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a782:	f7fe ff9b 	bl	80096bc <vTaskSwitchContext>
	prvTaskExitError();
 800a786:	f7ff ff1d 	bl	800a5c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3718      	adds	r7, #24
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	e000ed00 	.word	0xe000ed00
 800a798:	410fc271 	.word	0x410fc271
 800a79c:	410fc270 	.word	0x410fc270
 800a7a0:	e000e400 	.word	0xe000e400
 800a7a4:	20000fdc 	.word	0x20000fdc
 800a7a8:	20000fe0 	.word	0x20000fe0
 800a7ac:	e000ed20 	.word	0xe000ed20
 800a7b0:	20000098 	.word	0x20000098
 800a7b4:	e000ef34 	.word	0xe000ef34

0800a7b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	607b      	str	r3, [r7, #4]
}
 800a7d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7d2:	4b10      	ldr	r3, [pc, #64]	@ (800a814 <vPortEnterCritical+0x5c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	4a0e      	ldr	r2, [pc, #56]	@ (800a814 <vPortEnterCritical+0x5c>)
 800a7da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7dc:	4b0d      	ldr	r3, [pc, #52]	@ (800a814 <vPortEnterCritical+0x5c>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d110      	bne.n	800a806 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a7e4:	4b0c      	ldr	r3, [pc, #48]	@ (800a818 <vPortEnterCritical+0x60>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00b      	beq.n	800a806 <vPortEnterCritical+0x4e>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	603b      	str	r3, [r7, #0]
}
 800a800:	bf00      	nop
 800a802:	bf00      	nop
 800a804:	e7fd      	b.n	800a802 <vPortEnterCritical+0x4a>
	}
}
 800a806:	bf00      	nop
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	20000098 	.word	0x20000098
 800a818:	e000ed04 	.word	0xe000ed04

0800a81c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a822:	4b12      	ldr	r3, [pc, #72]	@ (800a86c <vPortExitCritical+0x50>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10b      	bne.n	800a842 <vPortExitCritical+0x26>
	__asm volatile
 800a82a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82e:	f383 8811 	msr	BASEPRI, r3
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	f3bf 8f4f 	dsb	sy
 800a83a:	607b      	str	r3, [r7, #4]
}
 800a83c:	bf00      	nop
 800a83e:	bf00      	nop
 800a840:	e7fd      	b.n	800a83e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a842:	4b0a      	ldr	r3, [pc, #40]	@ (800a86c <vPortExitCritical+0x50>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	3b01      	subs	r3, #1
 800a848:	4a08      	ldr	r2, [pc, #32]	@ (800a86c <vPortExitCritical+0x50>)
 800a84a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a84c:	4b07      	ldr	r3, [pc, #28]	@ (800a86c <vPortExitCritical+0x50>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d105      	bne.n	800a860 <vPortExitCritical+0x44>
 800a854:	2300      	movs	r3, #0
 800a856:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	f383 8811 	msr	BASEPRI, r3
}
 800a85e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr
 800a86c:	20000098 	.word	0x20000098

0800a870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a870:	f3ef 8009 	mrs	r0, PSP
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	4b15      	ldr	r3, [pc, #84]	@ (800a8d0 <pxCurrentTCBConst>)
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	f01e 0f10 	tst.w	lr, #16
 800a880:	bf08      	it	eq
 800a882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88a:	6010      	str	r0, [r2, #0]
 800a88c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a890:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a894:	f380 8811 	msr	BASEPRI, r0
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f7fe ff0c 	bl	80096bc <vTaskSwitchContext>
 800a8a4:	f04f 0000 	mov.w	r0, #0
 800a8a8:	f380 8811 	msr	BASEPRI, r0
 800a8ac:	bc09      	pop	{r0, r3}
 800a8ae:	6819      	ldr	r1, [r3, #0]
 800a8b0:	6808      	ldr	r0, [r1, #0]
 800a8b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b6:	f01e 0f10 	tst.w	lr, #16
 800a8ba:	bf08      	it	eq
 800a8bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8c0:	f380 8809 	msr	PSP, r0
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	f3af 8000 	nop.w

0800a8d0 <pxCurrentTCBConst>:
 800a8d0:	200009b0 	.word	0x200009b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a8d4:	bf00      	nop
 800a8d6:	bf00      	nop

0800a8d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	607b      	str	r3, [r7, #4]
}
 800a8f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a8f2:	f7fe fe29 	bl	8009548 <xTaskIncrementTick>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d003      	beq.n	800a904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a8fc:	4b06      	ldr	r3, [pc, #24]	@ (800a918 <xPortSysTickHandler+0x40>)
 800a8fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	2300      	movs	r3, #0
 800a906:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	f383 8811 	msr	BASEPRI, r3
}
 800a90e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a910:	bf00      	nop
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	e000ed04 	.word	0xe000ed04

0800a91c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a91c:	b480      	push	{r7}
 800a91e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a920:	4b0b      	ldr	r3, [pc, #44]	@ (800a950 <vPortSetupTimerInterrupt+0x34>)
 800a922:	2200      	movs	r2, #0
 800a924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a926:	4b0b      	ldr	r3, [pc, #44]	@ (800a954 <vPortSetupTimerInterrupt+0x38>)
 800a928:	2200      	movs	r2, #0
 800a92a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a92c:	4b0a      	ldr	r3, [pc, #40]	@ (800a958 <vPortSetupTimerInterrupt+0x3c>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a0a      	ldr	r2, [pc, #40]	@ (800a95c <vPortSetupTimerInterrupt+0x40>)
 800a932:	fba2 2303 	umull	r2, r3, r2, r3
 800a936:	099b      	lsrs	r3, r3, #6
 800a938:	4a09      	ldr	r2, [pc, #36]	@ (800a960 <vPortSetupTimerInterrupt+0x44>)
 800a93a:	3b01      	subs	r3, #1
 800a93c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a93e:	4b04      	ldr	r3, [pc, #16]	@ (800a950 <vPortSetupTimerInterrupt+0x34>)
 800a940:	2207      	movs	r2, #7
 800a942:	601a      	str	r2, [r3, #0]
}
 800a944:	bf00      	nop
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	e000e010 	.word	0xe000e010
 800a954:	e000e018 	.word	0xe000e018
 800a958:	20000000 	.word	0x20000000
 800a95c:	10624dd3 	.word	0x10624dd3
 800a960:	e000e014 	.word	0xe000e014

0800a964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a964:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a974 <vPortEnableVFP+0x10>
 800a968:	6801      	ldr	r1, [r0, #0]
 800a96a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a96e:	6001      	str	r1, [r0, #0]
 800a970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a972:	bf00      	nop
 800a974:	e000ed88 	.word	0xe000ed88

0800a978 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a97e:	f3ef 8305 	mrs	r3, IPSR
 800a982:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2b0f      	cmp	r3, #15
 800a988:	d915      	bls.n	800a9b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a98a:	4a18      	ldr	r2, [pc, #96]	@ (800a9ec <vPortValidateInterruptPriority+0x74>)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	4413      	add	r3, r2
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a994:	4b16      	ldr	r3, [pc, #88]	@ (800a9f0 <vPortValidateInterruptPriority+0x78>)
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	7afa      	ldrb	r2, [r7, #11]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d20b      	bcs.n	800a9b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	607b      	str	r3, [r7, #4]
}
 800a9b0:	bf00      	nop
 800a9b2:	bf00      	nop
 800a9b4:	e7fd      	b.n	800a9b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a9f4 <vPortValidateInterruptPriority+0x7c>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a9be:	4b0e      	ldr	r3, [pc, #56]	@ (800a9f8 <vPortValidateInterruptPriority+0x80>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d90b      	bls.n	800a9de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ca:	f383 8811 	msr	BASEPRI, r3
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	603b      	str	r3, [r7, #0]
}
 800a9d8:	bf00      	nop
 800a9da:	bf00      	nop
 800a9dc:	e7fd      	b.n	800a9da <vPortValidateInterruptPriority+0x62>
	}
 800a9de:	bf00      	nop
 800a9e0:	3714      	adds	r7, #20
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	e000e3f0 	.word	0xe000e3f0
 800a9f0:	20000fdc 	.word	0x20000fdc
 800a9f4:	e000ed0c 	.word	0xe000ed0c
 800a9f8:	20000fe0 	.word	0x20000fe0

0800a9fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b08a      	sub	sp, #40	@ 0x28
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa04:	2300      	movs	r3, #0
 800aa06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa08:	f7fe fce2 	bl	80093d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa0c:	4b5c      	ldr	r3, [pc, #368]	@ (800ab80 <pvPortMalloc+0x184>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d101      	bne.n	800aa18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa14:	f000 f924 	bl	800ac60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa18:	4b5a      	ldr	r3, [pc, #360]	@ (800ab84 <pvPortMalloc+0x188>)
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4013      	ands	r3, r2
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f040 8095 	bne.w	800ab50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d01e      	beq.n	800aa6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800aa2c:	2208      	movs	r2, #8
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4413      	add	r3, r2
 800aa32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f003 0307 	and.w	r3, r3, #7
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d015      	beq.n	800aa6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f023 0307 	bic.w	r3, r3, #7
 800aa44:	3308      	adds	r3, #8
 800aa46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f003 0307 	and.w	r3, r3, #7
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00b      	beq.n	800aa6a <pvPortMalloc+0x6e>
	__asm volatile
 800aa52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	617b      	str	r3, [r7, #20]
}
 800aa64:	bf00      	nop
 800aa66:	bf00      	nop
 800aa68:	e7fd      	b.n	800aa66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d06f      	beq.n	800ab50 <pvPortMalloc+0x154>
 800aa70:	4b45      	ldr	r3, [pc, #276]	@ (800ab88 <pvPortMalloc+0x18c>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d86a      	bhi.n	800ab50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa7a:	4b44      	ldr	r3, [pc, #272]	@ (800ab8c <pvPortMalloc+0x190>)
 800aa7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa7e:	4b43      	ldr	r3, [pc, #268]	@ (800ab8c <pvPortMalloc+0x190>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa84:	e004      	b.n	800aa90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800aa86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d903      	bls.n	800aaa2 <pvPortMalloc+0xa6>
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1f1      	bne.n	800aa86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aaa2:	4b37      	ldr	r3, [pc, #220]	@ (800ab80 <pvPortMalloc+0x184>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d051      	beq.n	800ab50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aaac:	6a3b      	ldr	r3, [r7, #32]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2208      	movs	r2, #8
 800aab2:	4413      	add	r3, r2
 800aab4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac0:	685a      	ldr	r2, [r3, #4]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	1ad2      	subs	r2, r2, r3
 800aac6:	2308      	movs	r3, #8
 800aac8:	005b      	lsls	r3, r3, #1
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d920      	bls.n	800ab10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4413      	add	r3, r2
 800aad4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	f003 0307 	and.w	r3, r3, #7
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00b      	beq.n	800aaf8 <pvPortMalloc+0xfc>
	__asm volatile
 800aae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae4:	f383 8811 	msr	BASEPRI, r3
 800aae8:	f3bf 8f6f 	isb	sy
 800aaec:	f3bf 8f4f 	dsb	sy
 800aaf0:	613b      	str	r3, [r7, #16]
}
 800aaf2:	bf00      	nop
 800aaf4:	bf00      	nop
 800aaf6:	e7fd      	b.n	800aaf4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aaf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafa:	685a      	ldr	r2, [r3, #4]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	1ad2      	subs	r2, r2, r3
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab0a:	69b8      	ldr	r0, [r7, #24]
 800ab0c:	f000 f90a 	bl	800ad24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab10:	4b1d      	ldr	r3, [pc, #116]	@ (800ab88 <pvPortMalloc+0x18c>)
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	4a1b      	ldr	r2, [pc, #108]	@ (800ab88 <pvPortMalloc+0x18c>)
 800ab1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab1e:	4b1a      	ldr	r3, [pc, #104]	@ (800ab88 <pvPortMalloc+0x18c>)
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	4b1b      	ldr	r3, [pc, #108]	@ (800ab90 <pvPortMalloc+0x194>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d203      	bcs.n	800ab32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab2a:	4b17      	ldr	r3, [pc, #92]	@ (800ab88 <pvPortMalloc+0x18c>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a18      	ldr	r2, [pc, #96]	@ (800ab90 <pvPortMalloc+0x194>)
 800ab30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab34:	685a      	ldr	r2, [r3, #4]
 800ab36:	4b13      	ldr	r3, [pc, #76]	@ (800ab84 <pvPortMalloc+0x188>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	431a      	orrs	r2, r3
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab42:	2200      	movs	r2, #0
 800ab44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ab46:	4b13      	ldr	r3, [pc, #76]	@ (800ab94 <pvPortMalloc+0x198>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	4a11      	ldr	r2, [pc, #68]	@ (800ab94 <pvPortMalloc+0x198>)
 800ab4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab50:	f7fe fc4c 	bl	80093ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	f003 0307 	and.w	r3, r3, #7
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00b      	beq.n	800ab76 <pvPortMalloc+0x17a>
	__asm volatile
 800ab5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	60fb      	str	r3, [r7, #12]
}
 800ab70:	bf00      	nop
 800ab72:	bf00      	nop
 800ab74:	e7fd      	b.n	800ab72 <pvPortMalloc+0x176>
	return pvReturn;
 800ab76:	69fb      	ldr	r3, [r7, #28]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3728      	adds	r7, #40	@ 0x28
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	20004bec 	.word	0x20004bec
 800ab84:	20004c00 	.word	0x20004c00
 800ab88:	20004bf0 	.word	0x20004bf0
 800ab8c:	20004be4 	.word	0x20004be4
 800ab90:	20004bf4 	.word	0x20004bf4
 800ab94:	20004bf8 	.word	0x20004bf8

0800ab98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d04f      	beq.n	800ac4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800abaa:	2308      	movs	r3, #8
 800abac:	425b      	negs	r3, r3
 800abae:	697a      	ldr	r2, [r7, #20]
 800abb0:	4413      	add	r3, r2
 800abb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	4b25      	ldr	r3, [pc, #148]	@ (800ac54 <vPortFree+0xbc>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4013      	ands	r3, r2
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d10b      	bne.n	800abde <vPortFree+0x46>
	__asm volatile
 800abc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abca:	f383 8811 	msr	BASEPRI, r3
 800abce:	f3bf 8f6f 	isb	sy
 800abd2:	f3bf 8f4f 	dsb	sy
 800abd6:	60fb      	str	r3, [r7, #12]
}
 800abd8:	bf00      	nop
 800abda:	bf00      	nop
 800abdc:	e7fd      	b.n	800abda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00b      	beq.n	800abfe <vPortFree+0x66>
	__asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	60bb      	str	r3, [r7, #8]
}
 800abf8:	bf00      	nop
 800abfa:	bf00      	nop
 800abfc:	e7fd      	b.n	800abfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	4b14      	ldr	r3, [pc, #80]	@ (800ac54 <vPortFree+0xbc>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4013      	ands	r3, r2
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d01e      	beq.n	800ac4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d11a      	bne.n	800ac4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	685a      	ldr	r2, [r3, #4]
 800ac18:	4b0e      	ldr	r3, [pc, #56]	@ (800ac54 <vPortFree+0xbc>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	43db      	mvns	r3, r3
 800ac1e:	401a      	ands	r2, r3
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac24:	f7fe fbd4 	bl	80093d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	685a      	ldr	r2, [r3, #4]
 800ac2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac58 <vPortFree+0xc0>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4413      	add	r3, r2
 800ac32:	4a09      	ldr	r2, [pc, #36]	@ (800ac58 <vPortFree+0xc0>)
 800ac34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac36:	6938      	ldr	r0, [r7, #16]
 800ac38:	f000 f874 	bl	800ad24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ac3c:	4b07      	ldr	r3, [pc, #28]	@ (800ac5c <vPortFree+0xc4>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	3301      	adds	r3, #1
 800ac42:	4a06      	ldr	r2, [pc, #24]	@ (800ac5c <vPortFree+0xc4>)
 800ac44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ac46:	f7fe fbd1 	bl	80093ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac4a:	bf00      	nop
 800ac4c:	3718      	adds	r7, #24
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	20004c00 	.word	0x20004c00
 800ac58:	20004bf0 	.word	0x20004bf0
 800ac5c:	20004bfc 	.word	0x20004bfc

0800ac60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac60:	b480      	push	{r7}
 800ac62:	b085      	sub	sp, #20
 800ac64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ac6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac6c:	4b27      	ldr	r3, [pc, #156]	@ (800ad0c <prvHeapInit+0xac>)
 800ac6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f003 0307 	and.w	r3, r3, #7
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00c      	beq.n	800ac94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	3307      	adds	r3, #7
 800ac7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f023 0307 	bic.w	r3, r3, #7
 800ac86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	4a1f      	ldr	r2, [pc, #124]	@ (800ad0c <prvHeapInit+0xac>)
 800ac90:	4413      	add	r3, r2
 800ac92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac98:	4a1d      	ldr	r2, [pc, #116]	@ (800ad10 <prvHeapInit+0xb0>)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac9e:	4b1c      	ldr	r3, [pc, #112]	@ (800ad10 <prvHeapInit+0xb0>)
 800aca0:	2200      	movs	r2, #0
 800aca2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	4413      	add	r3, r2
 800acaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800acac:	2208      	movs	r2, #8
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	1a9b      	subs	r3, r3, r2
 800acb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f023 0307 	bic.w	r3, r3, #7
 800acba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	4a15      	ldr	r2, [pc, #84]	@ (800ad14 <prvHeapInit+0xb4>)
 800acc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800acc2:	4b14      	ldr	r3, [pc, #80]	@ (800ad14 <prvHeapInit+0xb4>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2200      	movs	r2, #0
 800acc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800acca:	4b12      	ldr	r3, [pc, #72]	@ (800ad14 <prvHeapInit+0xb4>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2200      	movs	r2, #0
 800acd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	1ad2      	subs	r2, r2, r3
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ace0:	4b0c      	ldr	r3, [pc, #48]	@ (800ad14 <prvHeapInit+0xb4>)
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	4a0a      	ldr	r2, [pc, #40]	@ (800ad18 <prvHeapInit+0xb8>)
 800acee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	4a09      	ldr	r2, [pc, #36]	@ (800ad1c <prvHeapInit+0xbc>)
 800acf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800acf8:	4b09      	ldr	r3, [pc, #36]	@ (800ad20 <prvHeapInit+0xc0>)
 800acfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800acfe:	601a      	str	r2, [r3, #0]
}
 800ad00:	bf00      	nop
 800ad02:	3714      	adds	r7, #20
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr
 800ad0c:	20000fe4 	.word	0x20000fe4
 800ad10:	20004be4 	.word	0x20004be4
 800ad14:	20004bec 	.word	0x20004bec
 800ad18:	20004bf4 	.word	0x20004bf4
 800ad1c:	20004bf0 	.word	0x20004bf0
 800ad20:	20004c00 	.word	0x20004c00

0800ad24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad24:	b480      	push	{r7}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad2c:	4b28      	ldr	r3, [pc, #160]	@ (800add0 <prvInsertBlockIntoFreeList+0xac>)
 800ad2e:	60fb      	str	r3, [r7, #12]
 800ad30:	e002      	b.n	800ad38 <prvInsertBlockIntoFreeList+0x14>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	60fb      	str	r3, [r7, #12]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d8f7      	bhi.n	800ad32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d108      	bne.n	800ad66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	685a      	ldr	r2, [r3, #4]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	441a      	add	r2, r3
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	441a      	add	r2, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d118      	bne.n	800adac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	4b15      	ldr	r3, [pc, #84]	@ (800add4 <prvInsertBlockIntoFreeList+0xb0>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d00d      	beq.n	800ada2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	685a      	ldr	r2, [r3, #4]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	441a      	add	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	601a      	str	r2, [r3, #0]
 800ada0:	e008      	b.n	800adb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ada2:	4b0c      	ldr	r3, [pc, #48]	@ (800add4 <prvInsertBlockIntoFreeList+0xb0>)
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	601a      	str	r2, [r3, #0]
 800adaa:	e003      	b.n	800adb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d002      	beq.n	800adc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adc2:	bf00      	nop
 800adc4:	3714      	adds	r7, #20
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	20004be4 	.word	0x20004be4
 800add4:	20004bec 	.word	0x20004bec

0800add8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800addc:	2200      	movs	r2, #0
 800adde:	4912      	ldr	r1, [pc, #72]	@ (800ae28 <MX_USB_DEVICE_Init+0x50>)
 800ade0:	4812      	ldr	r0, [pc, #72]	@ (800ae2c <MX_USB_DEVICE_Init+0x54>)
 800ade2:	f7fb fe2b 	bl	8006a3c <USBD_Init>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800adec:	f7f5 fdeb 	bl	80009c6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800adf0:	490f      	ldr	r1, [pc, #60]	@ (800ae30 <MX_USB_DEVICE_Init+0x58>)
 800adf2:	480e      	ldr	r0, [pc, #56]	@ (800ae2c <MX_USB_DEVICE_Init+0x54>)
 800adf4:	f7fb fe52 	bl	8006a9c <USBD_RegisterClass>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d001      	beq.n	800ae02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800adfe:	f7f5 fde2 	bl	80009c6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ae02:	490c      	ldr	r1, [pc, #48]	@ (800ae34 <MX_USB_DEVICE_Init+0x5c>)
 800ae04:	4809      	ldr	r0, [pc, #36]	@ (800ae2c <MX_USB_DEVICE_Init+0x54>)
 800ae06:	f7fb fd89 	bl	800691c <USBD_CDC_RegisterInterface>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d001      	beq.n	800ae14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ae10:	f7f5 fdd9 	bl	80009c6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ae14:	4805      	ldr	r0, [pc, #20]	@ (800ae2c <MX_USB_DEVICE_Init+0x54>)
 800ae16:	f7fb fe77 	bl	8006b08 <USBD_Start>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d001      	beq.n	800ae24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ae20:	f7f5 fdd1 	bl	80009c6 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ae24:	bf00      	nop
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	200000b0 	.word	0x200000b0
 800ae2c:	20004c04 	.word	0x20004c04
 800ae30:	20000018 	.word	0x20000018
 800ae34:	2000009c 	.word	0x2000009c

0800ae38 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	4905      	ldr	r1, [pc, #20]	@ (800ae54 <CDC_Init_FS+0x1c>)
 800ae40:	4805      	ldr	r0, [pc, #20]	@ (800ae58 <CDC_Init_FS+0x20>)
 800ae42:	f7fb fd85 	bl	8006950 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ae46:	4905      	ldr	r1, [pc, #20]	@ (800ae5c <CDC_Init_FS+0x24>)
 800ae48:	4803      	ldr	r0, [pc, #12]	@ (800ae58 <CDC_Init_FS+0x20>)
 800ae4a:	f7fb fda3 	bl	8006994 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ae4e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	20004f20 	.word	0x20004f20
 800ae58:	20004c04 	.word	0x20004c04
 800ae5c:	20004ee0 	.word	0x20004ee0

0800ae60 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ae60:	b480      	push	{r7}
 800ae62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ae64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	4603      	mov	r3, r0
 800ae78:	6039      	str	r1, [r7, #0]
 800ae7a:	71fb      	strb	r3, [r7, #7]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ae80:	79fb      	ldrb	r3, [r7, #7]
 800ae82:	2b23      	cmp	r3, #35	@ 0x23
 800ae84:	d84a      	bhi.n	800af1c <CDC_Control_FS+0xac>
 800ae86:	a201      	add	r2, pc, #4	@ (adr r2, 800ae8c <CDC_Control_FS+0x1c>)
 800ae88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae8c:	0800af1d 	.word	0x0800af1d
 800ae90:	0800af1d 	.word	0x0800af1d
 800ae94:	0800af1d 	.word	0x0800af1d
 800ae98:	0800af1d 	.word	0x0800af1d
 800ae9c:	0800af1d 	.word	0x0800af1d
 800aea0:	0800af1d 	.word	0x0800af1d
 800aea4:	0800af1d 	.word	0x0800af1d
 800aea8:	0800af1d 	.word	0x0800af1d
 800aeac:	0800af1d 	.word	0x0800af1d
 800aeb0:	0800af1d 	.word	0x0800af1d
 800aeb4:	0800af1d 	.word	0x0800af1d
 800aeb8:	0800af1d 	.word	0x0800af1d
 800aebc:	0800af1d 	.word	0x0800af1d
 800aec0:	0800af1d 	.word	0x0800af1d
 800aec4:	0800af1d 	.word	0x0800af1d
 800aec8:	0800af1d 	.word	0x0800af1d
 800aecc:	0800af1d 	.word	0x0800af1d
 800aed0:	0800af1d 	.word	0x0800af1d
 800aed4:	0800af1d 	.word	0x0800af1d
 800aed8:	0800af1d 	.word	0x0800af1d
 800aedc:	0800af1d 	.word	0x0800af1d
 800aee0:	0800af1d 	.word	0x0800af1d
 800aee4:	0800af1d 	.word	0x0800af1d
 800aee8:	0800af1d 	.word	0x0800af1d
 800aeec:	0800af1d 	.word	0x0800af1d
 800aef0:	0800af1d 	.word	0x0800af1d
 800aef4:	0800af1d 	.word	0x0800af1d
 800aef8:	0800af1d 	.word	0x0800af1d
 800aefc:	0800af1d 	.word	0x0800af1d
 800af00:	0800af1d 	.word	0x0800af1d
 800af04:	0800af1d 	.word	0x0800af1d
 800af08:	0800af1d 	.word	0x0800af1d
 800af0c:	0800af1d 	.word	0x0800af1d
 800af10:	0800af1d 	.word	0x0800af1d
 800af14:	0800af1d 	.word	0x0800af1d
 800af18:	0800af1d 	.word	0x0800af1d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800af1c:	bf00      	nop
  }

  return (USBD_OK);
 800af1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800af20:	4618      	mov	r0, r3
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800af36:	6879      	ldr	r1, [r7, #4]
 800af38:	4805      	ldr	r0, [pc, #20]	@ (800af50 <CDC_Receive_FS+0x24>)
 800af3a:	f7fb fd2b 	bl	8006994 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800af3e:	4804      	ldr	r0, [pc, #16]	@ (800af50 <CDC_Receive_FS+0x24>)
 800af40:	f7fb fd46 	bl	80069d0 <USBD_CDC_ReceivePacket>

  // memcpy
  // give notify

  return (USBD_OK);
 800af44:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800af46:	4618      	mov	r0, r3
 800af48:	3708      	adds	r7, #8
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	20004c04 	.word	0x20004c04

0800af54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800af54:	b480      	push	{r7}
 800af56:	b087      	sub	sp, #28
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	4613      	mov	r3, r2
 800af60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800af62:	2300      	movs	r3, #0
 800af64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800af66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	371c      	adds	r7, #28
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
	...

0800af78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	4603      	mov	r3, r0
 800af80:	6039      	str	r1, [r7, #0]
 800af82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	2212      	movs	r2, #18
 800af88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800af8a:	4b03      	ldr	r3, [pc, #12]	@ (800af98 <USBD_FS_DeviceDescriptor+0x20>)
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr
 800af98:	200000d0 	.word	0x200000d0

0800af9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	4603      	mov	r3, r0
 800afa4:	6039      	str	r1, [r7, #0]
 800afa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	2204      	movs	r2, #4
 800afac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800afae:	4b03      	ldr	r3, [pc, #12]	@ (800afbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr
 800afbc:	200000f0 	.word	0x200000f0

0800afc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	4603      	mov	r3, r0
 800afc8:	6039      	str	r1, [r7, #0]
 800afca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800afcc:	79fb      	ldrb	r3, [r7, #7]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d105      	bne.n	800afde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800afd2:	683a      	ldr	r2, [r7, #0]
 800afd4:	4907      	ldr	r1, [pc, #28]	@ (800aff4 <USBD_FS_ProductStrDescriptor+0x34>)
 800afd6:	4808      	ldr	r0, [pc, #32]	@ (800aff8 <USBD_FS_ProductStrDescriptor+0x38>)
 800afd8:	f7fc ff84 	bl	8007ee4 <USBD_GetString>
 800afdc:	e004      	b.n	800afe8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	4904      	ldr	r1, [pc, #16]	@ (800aff4 <USBD_FS_ProductStrDescriptor+0x34>)
 800afe2:	4805      	ldr	r0, [pc, #20]	@ (800aff8 <USBD_FS_ProductStrDescriptor+0x38>)
 800afe4:	f7fc ff7e 	bl	8007ee4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800afe8:	4b02      	ldr	r3, [pc, #8]	@ (800aff4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800afea:	4618      	mov	r0, r3
 800afec:	3708      	adds	r7, #8
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	20004f60 	.word	0x20004f60
 800aff8:	0800bac8 	.word	0x0800bac8

0800affc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	4603      	mov	r3, r0
 800b004:	6039      	str	r1, [r7, #0]
 800b006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b008:	683a      	ldr	r2, [r7, #0]
 800b00a:	4904      	ldr	r1, [pc, #16]	@ (800b01c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b00c:	4804      	ldr	r0, [pc, #16]	@ (800b020 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b00e:	f7fc ff69 	bl	8007ee4 <USBD_GetString>
  return USBD_StrDesc;
 800b012:	4b02      	ldr	r3, [pc, #8]	@ (800b01c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b014:	4618      	mov	r0, r3
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	20004f60 	.word	0x20004f60
 800b020:	0800bae0 	.word	0x0800bae0

0800b024 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	4603      	mov	r3, r0
 800b02c:	6039      	str	r1, [r7, #0]
 800b02e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	221a      	movs	r2, #26
 800b034:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b036:	f000 f855 	bl	800b0e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b03a:	4b02      	ldr	r3, [pc, #8]	@ (800b044 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	200000f4 	.word	0x200000f4

0800b048 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	4603      	mov	r3, r0
 800b050:	6039      	str	r1, [r7, #0]
 800b052:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b054:	79fb      	ldrb	r3, [r7, #7]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d105      	bne.n	800b066 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	4907      	ldr	r1, [pc, #28]	@ (800b07c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b05e:	4808      	ldr	r0, [pc, #32]	@ (800b080 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b060:	f7fc ff40 	bl	8007ee4 <USBD_GetString>
 800b064:	e004      	b.n	800b070 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b066:	683a      	ldr	r2, [r7, #0]
 800b068:	4904      	ldr	r1, [pc, #16]	@ (800b07c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b06a:	4805      	ldr	r0, [pc, #20]	@ (800b080 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b06c:	f7fc ff3a 	bl	8007ee4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b070:	4b02      	ldr	r3, [pc, #8]	@ (800b07c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b072:	4618      	mov	r0, r3
 800b074:	3708      	adds	r7, #8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	20004f60 	.word	0x20004f60
 800b080:	0800baf4 	.word	0x0800baf4

0800b084 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	4603      	mov	r3, r0
 800b08c:	6039      	str	r1, [r7, #0]
 800b08e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b090:	79fb      	ldrb	r3, [r7, #7]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d105      	bne.n	800b0a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	4907      	ldr	r1, [pc, #28]	@ (800b0b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b09a:	4808      	ldr	r0, [pc, #32]	@ (800b0bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b09c:	f7fc ff22 	bl	8007ee4 <USBD_GetString>
 800b0a0:	e004      	b.n	800b0ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b0a2:	683a      	ldr	r2, [r7, #0]
 800b0a4:	4904      	ldr	r1, [pc, #16]	@ (800b0b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b0a6:	4805      	ldr	r0, [pc, #20]	@ (800b0bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b0a8:	f7fc ff1c 	bl	8007ee4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0ac:	4b02      	ldr	r3, [pc, #8]	@ (800b0b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	20004f60 	.word	0x20004f60
 800b0bc:	0800bb00 	.word	0x0800bb00

0800b0c0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	6039      	str	r1, [r7, #0]
 800b0ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	220c      	movs	r2, #12
 800b0d0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b0d2:	4b03      	ldr	r3, [pc, #12]	@ (800b0e0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	200000e4 	.word	0x200000e4

0800b0e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b0ea:	4b0f      	ldr	r3, [pc, #60]	@ (800b128 <Get_SerialNum+0x44>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b0f0:	4b0e      	ldr	r3, [pc, #56]	@ (800b12c <Get_SerialNum+0x48>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b0f6:	4b0e      	ldr	r3, [pc, #56]	@ (800b130 <Get_SerialNum+0x4c>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4413      	add	r3, r2
 800b102:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d009      	beq.n	800b11e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b10a:	2208      	movs	r2, #8
 800b10c:	4909      	ldr	r1, [pc, #36]	@ (800b134 <Get_SerialNum+0x50>)
 800b10e:	68f8      	ldr	r0, [r7, #12]
 800b110:	f000 f814 	bl	800b13c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b114:	2204      	movs	r2, #4
 800b116:	4908      	ldr	r1, [pc, #32]	@ (800b138 <Get_SerialNum+0x54>)
 800b118:	68b8      	ldr	r0, [r7, #8]
 800b11a:	f000 f80f 	bl	800b13c <IntToUnicode>
  }
}
 800b11e:	bf00      	nop
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	1fff7a10 	.word	0x1fff7a10
 800b12c:	1fff7a14 	.word	0x1fff7a14
 800b130:	1fff7a18 	.word	0x1fff7a18
 800b134:	200000f6 	.word	0x200000f6
 800b138:	20000106 	.word	0x20000106

0800b13c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b087      	sub	sp, #28
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	4613      	mov	r3, r2
 800b148:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b14a:	2300      	movs	r3, #0
 800b14c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b14e:	2300      	movs	r3, #0
 800b150:	75fb      	strb	r3, [r7, #23]
 800b152:	e027      	b.n	800b1a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	0f1b      	lsrs	r3, r3, #28
 800b158:	2b09      	cmp	r3, #9
 800b15a:	d80b      	bhi.n	800b174 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	0f1b      	lsrs	r3, r3, #28
 800b160:	b2da      	uxtb	r2, r3
 800b162:	7dfb      	ldrb	r3, [r7, #23]
 800b164:	005b      	lsls	r3, r3, #1
 800b166:	4619      	mov	r1, r3
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	440b      	add	r3, r1
 800b16c:	3230      	adds	r2, #48	@ 0x30
 800b16e:	b2d2      	uxtb	r2, r2
 800b170:	701a      	strb	r2, [r3, #0]
 800b172:	e00a      	b.n	800b18a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	0f1b      	lsrs	r3, r3, #28
 800b178:	b2da      	uxtb	r2, r3
 800b17a:	7dfb      	ldrb	r3, [r7, #23]
 800b17c:	005b      	lsls	r3, r3, #1
 800b17e:	4619      	mov	r1, r3
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	440b      	add	r3, r1
 800b184:	3237      	adds	r2, #55	@ 0x37
 800b186:	b2d2      	uxtb	r2, r2
 800b188:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	011b      	lsls	r3, r3, #4
 800b18e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b190:	7dfb      	ldrb	r3, [r7, #23]
 800b192:	005b      	lsls	r3, r3, #1
 800b194:	3301      	adds	r3, #1
 800b196:	68ba      	ldr	r2, [r7, #8]
 800b198:	4413      	add	r3, r2
 800b19a:	2200      	movs	r2, #0
 800b19c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b19e:	7dfb      	ldrb	r3, [r7, #23]
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	75fb      	strb	r3, [r7, #23]
 800b1a4:	7dfa      	ldrb	r2, [r7, #23]
 800b1a6:	79fb      	ldrb	r3, [r7, #7]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d3d3      	bcc.n	800b154 <IntToUnicode+0x18>
  }
}
 800b1ac:	bf00      	nop
 800b1ae:	bf00      	nop
 800b1b0:	371c      	adds	r7, #28
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
	...

0800b1bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b0a0      	sub	sp, #128	@ 0x80
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1c4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	601a      	str	r2, [r3, #0]
 800b1cc:	605a      	str	r2, [r3, #4]
 800b1ce:	609a      	str	r2, [r3, #8]
 800b1d0:	60da      	str	r2, [r3, #12]
 800b1d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b1d4:	f107 0310 	add.w	r3, r7, #16
 800b1d8:	225c      	movs	r2, #92	@ 0x5c
 800b1da:	2100      	movs	r1, #0
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f000 fb65 	bl	800b8ac <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b1ea:	d149      	bne.n	800b280 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b1ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b1f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b1f6:	f107 0310 	add.w	r3, r7, #16
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7f8 f9b2 	bl	8003564 <HAL_RCCEx_PeriphCLKConfig>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d001      	beq.n	800b20a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800b206:	f7f5 fbde 	bl	80009c6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b20a:	2300      	movs	r3, #0
 800b20c:	60fb      	str	r3, [r7, #12]
 800b20e:	4b1e      	ldr	r3, [pc, #120]	@ (800b288 <HAL_PCD_MspInit+0xcc>)
 800b210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b212:	4a1d      	ldr	r2, [pc, #116]	@ (800b288 <HAL_PCD_MspInit+0xcc>)
 800b214:	f043 0301 	orr.w	r3, r3, #1
 800b218:	6313      	str	r3, [r2, #48]	@ 0x30
 800b21a:	4b1b      	ldr	r3, [pc, #108]	@ (800b288 <HAL_PCD_MspInit+0xcc>)
 800b21c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b21e:	f003 0301 	and.w	r3, r3, #1
 800b222:	60fb      	str	r3, [r7, #12]
 800b224:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b226:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b22a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b22c:	2302      	movs	r3, #2
 800b22e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b230:	2300      	movs	r3, #0
 800b232:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b234:	2303      	movs	r3, #3
 800b236:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b238:	230a      	movs	r3, #10
 800b23a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b23c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800b240:	4619      	mov	r1, r3
 800b242:	4812      	ldr	r0, [pc, #72]	@ (800b28c <HAL_PCD_MspInit+0xd0>)
 800b244:	f7f6 fc24 	bl	8001a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b248:	4b0f      	ldr	r3, [pc, #60]	@ (800b288 <HAL_PCD_MspInit+0xcc>)
 800b24a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b24c:	4a0e      	ldr	r2, [pc, #56]	@ (800b288 <HAL_PCD_MspInit+0xcc>)
 800b24e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b252:	6353      	str	r3, [r2, #52]	@ 0x34
 800b254:	2300      	movs	r3, #0
 800b256:	60bb      	str	r3, [r7, #8]
 800b258:	4b0b      	ldr	r3, [pc, #44]	@ (800b288 <HAL_PCD_MspInit+0xcc>)
 800b25a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b25c:	4a0a      	ldr	r2, [pc, #40]	@ (800b288 <HAL_PCD_MspInit+0xcc>)
 800b25e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b262:	6453      	str	r3, [r2, #68]	@ 0x44
 800b264:	4b08      	ldr	r3, [pc, #32]	@ (800b288 <HAL_PCD_MspInit+0xcc>)
 800b266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b268:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b26c:	60bb      	str	r3, [r7, #8]
 800b26e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b270:	2200      	movs	r2, #0
 800b272:	2105      	movs	r1, #5
 800b274:	2043      	movs	r0, #67	@ 0x43
 800b276:	f7f6 fbe1 	bl	8001a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b27a:	2043      	movs	r0, #67	@ 0x43
 800b27c:	f7f6 fbfa 	bl	8001a74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b280:	bf00      	nop
 800b282:	3780      	adds	r7, #128	@ 0x80
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	40023800 	.word	0x40023800
 800b28c:	40020000 	.word	0x40020000

0800b290 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4610      	mov	r0, r2
 800b2a8:	f7fb fc7b 	bl	8006ba2 <USBD_LL_SetupStage>
}
 800b2ac:	bf00      	nop
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b2c6:	78fa      	ldrb	r2, [r7, #3]
 800b2c8:	6879      	ldr	r1, [r7, #4]
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	00db      	lsls	r3, r3, #3
 800b2ce:	4413      	add	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	440b      	add	r3, r1
 800b2d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	78fb      	ldrb	r3, [r7, #3]
 800b2dc:	4619      	mov	r1, r3
 800b2de:	f7fb fcb5 	bl	8006c4c <USBD_LL_DataOutStage>
}
 800b2e2:	bf00      	nop
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b082      	sub	sp, #8
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b2fc:	78fa      	ldrb	r2, [r7, #3]
 800b2fe:	6879      	ldr	r1, [r7, #4]
 800b300:	4613      	mov	r3, r2
 800b302:	00db      	lsls	r3, r3, #3
 800b304:	4413      	add	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	440b      	add	r3, r1
 800b30a:	3320      	adds	r3, #32
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	78fb      	ldrb	r3, [r7, #3]
 800b310:	4619      	mov	r1, r3
 800b312:	f7fb fd57 	bl	8006dc4 <USBD_LL_DataInStage>
}
 800b316:	bf00      	nop
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b082      	sub	sp, #8
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7fb fe9b 	bl	8007068 <USBD_LL_SOF>
}
 800b332:	bf00      	nop
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b084      	sub	sp, #16
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b342:	2301      	movs	r3, #1
 800b344:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	79db      	ldrb	r3, [r3, #7]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d102      	bne.n	800b354 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b34e:	2300      	movs	r3, #0
 800b350:	73fb      	strb	r3, [r7, #15]
 800b352:	e008      	b.n	800b366 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	79db      	ldrb	r3, [r3, #7]
 800b358:	2b02      	cmp	r3, #2
 800b35a:	d102      	bne.n	800b362 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b35c:	2301      	movs	r3, #1
 800b35e:	73fb      	strb	r3, [r7, #15]
 800b360:	e001      	b.n	800b366 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b362:	f7f5 fb30 	bl	80009c6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b36c:	7bfa      	ldrb	r2, [r7, #15]
 800b36e:	4611      	mov	r1, r2
 800b370:	4618      	mov	r0, r3
 800b372:	f7fb fe35 	bl	8006fe0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7fb fddc 	bl	8006f3a <USBD_LL_Reset>
}
 800b382:	bf00      	nop
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
	...

0800b38c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fb fe30 	bl	8007000 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	6812      	ldr	r2, [r2, #0]
 800b3ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b3b2:	f043 0301 	orr.w	r3, r3, #1
 800b3b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	7adb      	ldrb	r3, [r3, #11]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d005      	beq.n	800b3cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b3c0:	4b04      	ldr	r3, [pc, #16]	@ (800b3d4 <HAL_PCD_SuspendCallback+0x48>)
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	4a03      	ldr	r2, [pc, #12]	@ (800b3d4 <HAL_PCD_SuspendCallback+0x48>)
 800b3c6:	f043 0306 	orr.w	r3, r3, #6
 800b3ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b3cc:	bf00      	nop
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	e000ed00 	.word	0xe000ed00

0800b3d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fb fe26 	bl	8007038 <USBD_LL_Resume>
}
 800b3ec:	bf00      	nop
 800b3ee:	3708      	adds	r7, #8
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b406:	78fa      	ldrb	r2, [r7, #3]
 800b408:	4611      	mov	r1, r2
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fb fe7e 	bl	800710c <USBD_LL_IsoOUTIncomplete>
}
 800b410:	bf00      	nop
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	460b      	mov	r3, r1
 800b422:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b42a:	78fa      	ldrb	r2, [r7, #3]
 800b42c:	4611      	mov	r1, r2
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fb fe3a 	bl	80070a8 <USBD_LL_IsoINIncomplete>
}
 800b434:	bf00      	nop
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7fb fe90 	bl	8007170 <USBD_LL_DevConnected>
}
 800b450:	bf00      	nop
 800b452:	3708      	adds	r7, #8
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b466:	4618      	mov	r0, r3
 800b468:	f7fb fe8d 	bl	8007186 <USBD_LL_DevDisconnected>
}
 800b46c:	bf00      	nop
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d13c      	bne.n	800b4fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b484:	4a20      	ldr	r2, [pc, #128]	@ (800b508 <USBD_LL_Init+0x94>)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a1e      	ldr	r2, [pc, #120]	@ (800b508 <USBD_LL_Init+0x94>)
 800b490:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b494:	4b1c      	ldr	r3, [pc, #112]	@ (800b508 <USBD_LL_Init+0x94>)
 800b496:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b49a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b49c:	4b1a      	ldr	r3, [pc, #104]	@ (800b508 <USBD_LL_Init+0x94>)
 800b49e:	2206      	movs	r2, #6
 800b4a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b4a2:	4b19      	ldr	r3, [pc, #100]	@ (800b508 <USBD_LL_Init+0x94>)
 800b4a4:	2202      	movs	r2, #2
 800b4a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b4a8:	4b17      	ldr	r3, [pc, #92]	@ (800b508 <USBD_LL_Init+0x94>)
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b4ae:	4b16      	ldr	r3, [pc, #88]	@ (800b508 <USBD_LL_Init+0x94>)
 800b4b0:	2202      	movs	r2, #2
 800b4b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b4b4:	4b14      	ldr	r3, [pc, #80]	@ (800b508 <USBD_LL_Init+0x94>)
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b4ba:	4b13      	ldr	r3, [pc, #76]	@ (800b508 <USBD_LL_Init+0x94>)
 800b4bc:	2200      	movs	r2, #0
 800b4be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b4c0:	4b11      	ldr	r3, [pc, #68]	@ (800b508 <USBD_LL_Init+0x94>)
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b4c6:	4b10      	ldr	r3, [pc, #64]	@ (800b508 <USBD_LL_Init+0x94>)
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b4cc:	4b0e      	ldr	r3, [pc, #56]	@ (800b508 <USBD_LL_Init+0x94>)
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b4d2:	480d      	ldr	r0, [pc, #52]	@ (800b508 <USBD_LL_Init+0x94>)
 800b4d4:	f7f6 fc70 	bl	8001db8 <HAL_PCD_Init>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d001      	beq.n	800b4e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b4de:	f7f5 fa72 	bl	80009c6 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b4e2:	2180      	movs	r1, #128	@ 0x80
 800b4e4:	4808      	ldr	r0, [pc, #32]	@ (800b508 <USBD_LL_Init+0x94>)
 800b4e6:	f7f7 fed0 	bl	800328a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b4ea:	2240      	movs	r2, #64	@ 0x40
 800b4ec:	2100      	movs	r1, #0
 800b4ee:	4806      	ldr	r0, [pc, #24]	@ (800b508 <USBD_LL_Init+0x94>)
 800b4f0:	f7f7 fe84 	bl	80031fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b4f4:	2280      	movs	r2, #128	@ 0x80
 800b4f6:	2101      	movs	r1, #1
 800b4f8:	4803      	ldr	r0, [pc, #12]	@ (800b508 <USBD_LL_Init+0x94>)
 800b4fa:	f7f7 fe7f 	bl	80031fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	20005160 	.word	0x20005160

0800b50c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b514:	2300      	movs	r3, #0
 800b516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b518:	2300      	movs	r3, #0
 800b51a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b522:	4618      	mov	r0, r3
 800b524:	f7f6 fd5e 	bl	8001fe4 <HAL_PCD_Start>
 800b528:	4603      	mov	r3, r0
 800b52a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 f990 	bl	800b854 <USBD_Get_USB_Status>
 800b534:	4603      	mov	r3, r0
 800b536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b538:	7bbb      	ldrb	r3, [r7, #14]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b084      	sub	sp, #16
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
 800b54a:	4608      	mov	r0, r1
 800b54c:	4611      	mov	r1, r2
 800b54e:	461a      	mov	r2, r3
 800b550:	4603      	mov	r3, r0
 800b552:	70fb      	strb	r3, [r7, #3]
 800b554:	460b      	mov	r3, r1
 800b556:	70bb      	strb	r3, [r7, #2]
 800b558:	4613      	mov	r3, r2
 800b55a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b55c:	2300      	movs	r3, #0
 800b55e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b560:	2300      	movs	r3, #0
 800b562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b56a:	78bb      	ldrb	r3, [r7, #2]
 800b56c:	883a      	ldrh	r2, [r7, #0]
 800b56e:	78f9      	ldrb	r1, [r7, #3]
 800b570:	f7f7 fa5f 	bl	8002a32 <HAL_PCD_EP_Open>
 800b574:	4603      	mov	r3, r0
 800b576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b578:	7bfb      	ldrb	r3, [r7, #15]
 800b57a:	4618      	mov	r0, r3
 800b57c:	f000 f96a 	bl	800b854 <USBD_Get_USB_Status>
 800b580:	4603      	mov	r3, r0
 800b582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b584:	7bbb      	ldrb	r3, [r7, #14]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b084      	sub	sp, #16
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	460b      	mov	r3, r1
 800b598:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b59a:	2300      	movs	r3, #0
 800b59c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b5a8:	78fa      	ldrb	r2, [r7, #3]
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7f7 faaa 	bl	8002b06 <HAL_PCD_EP_Close>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5b6:	7bfb      	ldrb	r3, [r7, #15]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f000 f94b 	bl	800b854 <USBD_Get_USB_Status>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3710      	adds	r7, #16
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b5e6:	78fa      	ldrb	r2, [r7, #3]
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7f7 fb62 	bl	8002cb4 <HAL_PCD_EP_SetStall>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5f4:	7bfb      	ldrb	r3, [r7, #15]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f000 f92c 	bl	800b854 <USBD_Get_USB_Status>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b600:	7bbb      	ldrb	r3, [r7, #14]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b084      	sub	sp, #16
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	460b      	mov	r3, r1
 800b614:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b616:	2300      	movs	r3, #0
 800b618:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b61a:	2300      	movs	r3, #0
 800b61c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b624:	78fa      	ldrb	r2, [r7, #3]
 800b626:	4611      	mov	r1, r2
 800b628:	4618      	mov	r0, r3
 800b62a:	f7f7 fba6 	bl	8002d7a <HAL_PCD_EP_ClrStall>
 800b62e:	4603      	mov	r3, r0
 800b630:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b632:	7bfb      	ldrb	r3, [r7, #15]
 800b634:	4618      	mov	r0, r3
 800b636:	f000 f90d 	bl	800b854 <USBD_Get_USB_Status>
 800b63a:	4603      	mov	r3, r0
 800b63c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b63e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	460b      	mov	r3, r1
 800b652:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b65a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b65c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b660:	2b00      	cmp	r3, #0
 800b662:	da0b      	bge.n	800b67c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b664:	78fb      	ldrb	r3, [r7, #3]
 800b666:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b66a:	68f9      	ldr	r1, [r7, #12]
 800b66c:	4613      	mov	r3, r2
 800b66e:	00db      	lsls	r3, r3, #3
 800b670:	4413      	add	r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	440b      	add	r3, r1
 800b676:	3316      	adds	r3, #22
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	e00b      	b.n	800b694 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b67c:	78fb      	ldrb	r3, [r7, #3]
 800b67e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b682:	68f9      	ldr	r1, [r7, #12]
 800b684:	4613      	mov	r3, r2
 800b686:	00db      	lsls	r3, r3, #3
 800b688:	4413      	add	r3, r2
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	440b      	add	r3, r1
 800b68e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b692:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b694:	4618      	mov	r0, r3
 800b696:	3714      	adds	r7, #20
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b6ba:	78fa      	ldrb	r2, [r7, #3]
 800b6bc:	4611      	mov	r1, r2
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7f7 f993 	bl	80029ea <HAL_PCD_SetAddress>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f000 f8c2 	bl	800b854 <USBD_Get_USB_Status>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b086      	sub	sp, #24
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	60f8      	str	r0, [r7, #12]
 800b6e6:	607a      	str	r2, [r7, #4]
 800b6e8:	603b      	str	r3, [r7, #0]
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b6fc:	7af9      	ldrb	r1, [r7, #11]
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	f7f7 fa9d 	bl	8002c40 <HAL_PCD_EP_Transmit>
 800b706:	4603      	mov	r3, r0
 800b708:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b70a:	7dfb      	ldrb	r3, [r7, #23]
 800b70c:	4618      	mov	r0, r3
 800b70e:	f000 f8a1 	bl	800b854 <USBD_Get_USB_Status>
 800b712:	4603      	mov	r3, r0
 800b714:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b716:	7dbb      	ldrb	r3, [r7, #22]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3718      	adds	r7, #24
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	607a      	str	r2, [r7, #4]
 800b72a:	603b      	str	r3, [r7, #0]
 800b72c:	460b      	mov	r3, r1
 800b72e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b730:	2300      	movs	r3, #0
 800b732:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b734:	2300      	movs	r3, #0
 800b736:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b73e:	7af9      	ldrb	r1, [r7, #11]
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	f7f7 fa29 	bl	8002b9a <HAL_PCD_EP_Receive>
 800b748:	4603      	mov	r3, r0
 800b74a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b74c:	7dfb      	ldrb	r3, [r7, #23]
 800b74e:	4618      	mov	r0, r3
 800b750:	f000 f880 	bl	800b854 <USBD_Get_USB_Status>
 800b754:	4603      	mov	r3, r0
 800b756:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b758:	7dbb      	ldrb	r3, [r7, #22]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3718      	adds	r7, #24
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b762:	b580      	push	{r7, lr}
 800b764:	b082      	sub	sp, #8
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
 800b76a:	460b      	mov	r3, r1
 800b76c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b774:	78fa      	ldrb	r2, [r7, #3]
 800b776:	4611      	mov	r1, r2
 800b778:	4618      	mov	r0, r3
 800b77a:	f7f7 fa49 	bl	8002c10 <HAL_PCD_EP_GetRxCount>
 800b77e:	4603      	mov	r3, r0
}
 800b780:	4618      	mov	r0, r3
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	460b      	mov	r3, r1
 800b792:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b794:	78fb      	ldrb	r3, [r7, #3]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d002      	beq.n	800b7a0 <HAL_PCDEx_LPM_Callback+0x18>
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d01f      	beq.n	800b7de <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b79e:	e03b      	b.n	800b818 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	7adb      	ldrb	r3, [r3, #11]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d007      	beq.n	800b7b8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800b7a8:	f7f5 f892 	bl	80008d0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7ac:	4b1c      	ldr	r3, [pc, #112]	@ (800b820 <HAL_PCDEx_LPM_Callback+0x98>)
 800b7ae:	691b      	ldr	r3, [r3, #16]
 800b7b0:	4a1b      	ldr	r2, [pc, #108]	@ (800b820 <HAL_PCDEx_LPM_Callback+0x98>)
 800b7b2:	f023 0306 	bic.w	r3, r3, #6
 800b7b6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	6812      	ldr	r2, [r2, #0]
 800b7c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b7ca:	f023 0301 	bic.w	r3, r3, #1
 800b7ce:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fb fc2e 	bl	8007038 <USBD_LL_Resume>
    break;
 800b7dc:	e01c      	b.n	800b818 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	6812      	ldr	r2, [r2, #0]
 800b7ec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b7f0:	f043 0301 	orr.w	r3, r3, #1
 800b7f4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7fb fbff 	bl	8007000 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	7adb      	ldrb	r3, [r3, #11]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d005      	beq.n	800b816 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b80a:	4b05      	ldr	r3, [pc, #20]	@ (800b820 <HAL_PCDEx_LPM_Callback+0x98>)
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	4a04      	ldr	r2, [pc, #16]	@ (800b820 <HAL_PCDEx_LPM_Callback+0x98>)
 800b810:	f043 0306 	orr.w	r3, r3, #6
 800b814:	6113      	str	r3, [r2, #16]
    break;
 800b816:	bf00      	nop
}
 800b818:	bf00      	nop
 800b81a:	3708      	adds	r7, #8
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	e000ed00 	.word	0xe000ed00

0800b824 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b82c:	4b03      	ldr	r3, [pc, #12]	@ (800b83c <USBD_static_malloc+0x18>)
}
 800b82e:	4618      	mov	r0, r3
 800b830:	370c      	adds	r7, #12
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop
 800b83c:	20005644 	.word	0x20005644

0800b840 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]

}
 800b848:	bf00      	nop
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b854:	b480      	push	{r7}
 800b856:	b085      	sub	sp, #20
 800b858:	af00      	add	r7, sp, #0
 800b85a:	4603      	mov	r3, r0
 800b85c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b85e:	2300      	movs	r3, #0
 800b860:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b862:	79fb      	ldrb	r3, [r7, #7]
 800b864:	2b03      	cmp	r3, #3
 800b866:	d817      	bhi.n	800b898 <USBD_Get_USB_Status+0x44>
 800b868:	a201      	add	r2, pc, #4	@ (adr r2, 800b870 <USBD_Get_USB_Status+0x1c>)
 800b86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b86e:	bf00      	nop
 800b870:	0800b881 	.word	0x0800b881
 800b874:	0800b887 	.word	0x0800b887
 800b878:	0800b88d 	.word	0x0800b88d
 800b87c:	0800b893 	.word	0x0800b893
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b880:	2300      	movs	r3, #0
 800b882:	73fb      	strb	r3, [r7, #15]
    break;
 800b884:	e00b      	b.n	800b89e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b886:	2303      	movs	r3, #3
 800b888:	73fb      	strb	r3, [r7, #15]
    break;
 800b88a:	e008      	b.n	800b89e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b88c:	2301      	movs	r3, #1
 800b88e:	73fb      	strb	r3, [r7, #15]
    break;
 800b890:	e005      	b.n	800b89e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b892:	2303      	movs	r3, #3
 800b894:	73fb      	strb	r3, [r7, #15]
    break;
 800b896:	e002      	b.n	800b89e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b898:	2303      	movs	r3, #3
 800b89a:	73fb      	strb	r3, [r7, #15]
    break;
 800b89c:	bf00      	nop
  }
  return usb_status;
 800b89e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3714      	adds	r7, #20
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <memset>:
 800b8ac:	4402      	add	r2, r0
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d100      	bne.n	800b8b6 <memset+0xa>
 800b8b4:	4770      	bx	lr
 800b8b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b8ba:	e7f9      	b.n	800b8b0 <memset+0x4>

0800b8bc <_reclaim_reent>:
 800b8bc:	4b29      	ldr	r3, [pc, #164]	@ (800b964 <_reclaim_reent+0xa8>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4283      	cmp	r3, r0
 800b8c2:	b570      	push	{r4, r5, r6, lr}
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	d04b      	beq.n	800b960 <_reclaim_reent+0xa4>
 800b8c8:	69c3      	ldr	r3, [r0, #28]
 800b8ca:	b1ab      	cbz	r3, 800b8f8 <_reclaim_reent+0x3c>
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	b16b      	cbz	r3, 800b8ec <_reclaim_reent+0x30>
 800b8d0:	2500      	movs	r5, #0
 800b8d2:	69e3      	ldr	r3, [r4, #28]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	5959      	ldr	r1, [r3, r5]
 800b8d8:	2900      	cmp	r1, #0
 800b8da:	d13b      	bne.n	800b954 <_reclaim_reent+0x98>
 800b8dc:	3504      	adds	r5, #4
 800b8de:	2d80      	cmp	r5, #128	@ 0x80
 800b8e0:	d1f7      	bne.n	800b8d2 <_reclaim_reent+0x16>
 800b8e2:	69e3      	ldr	r3, [r4, #28]
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	68d9      	ldr	r1, [r3, #12]
 800b8e8:	f000 f872 	bl	800b9d0 <_free_r>
 800b8ec:	69e3      	ldr	r3, [r4, #28]
 800b8ee:	6819      	ldr	r1, [r3, #0]
 800b8f0:	b111      	cbz	r1, 800b8f8 <_reclaim_reent+0x3c>
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	f000 f86c 	bl	800b9d0 <_free_r>
 800b8f8:	6961      	ldr	r1, [r4, #20]
 800b8fa:	b111      	cbz	r1, 800b902 <_reclaim_reent+0x46>
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	f000 f867 	bl	800b9d0 <_free_r>
 800b902:	69e1      	ldr	r1, [r4, #28]
 800b904:	b111      	cbz	r1, 800b90c <_reclaim_reent+0x50>
 800b906:	4620      	mov	r0, r4
 800b908:	f000 f862 	bl	800b9d0 <_free_r>
 800b90c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b90e:	b111      	cbz	r1, 800b916 <_reclaim_reent+0x5a>
 800b910:	4620      	mov	r0, r4
 800b912:	f000 f85d 	bl	800b9d0 <_free_r>
 800b916:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b918:	b111      	cbz	r1, 800b920 <_reclaim_reent+0x64>
 800b91a:	4620      	mov	r0, r4
 800b91c:	f000 f858 	bl	800b9d0 <_free_r>
 800b920:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b922:	b111      	cbz	r1, 800b92a <_reclaim_reent+0x6e>
 800b924:	4620      	mov	r0, r4
 800b926:	f000 f853 	bl	800b9d0 <_free_r>
 800b92a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b92c:	b111      	cbz	r1, 800b934 <_reclaim_reent+0x78>
 800b92e:	4620      	mov	r0, r4
 800b930:	f000 f84e 	bl	800b9d0 <_free_r>
 800b934:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b936:	b111      	cbz	r1, 800b93e <_reclaim_reent+0x82>
 800b938:	4620      	mov	r0, r4
 800b93a:	f000 f849 	bl	800b9d0 <_free_r>
 800b93e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b940:	b111      	cbz	r1, 800b948 <_reclaim_reent+0x8c>
 800b942:	4620      	mov	r0, r4
 800b944:	f000 f844 	bl	800b9d0 <_free_r>
 800b948:	6a23      	ldr	r3, [r4, #32]
 800b94a:	b14b      	cbz	r3, 800b960 <_reclaim_reent+0xa4>
 800b94c:	4620      	mov	r0, r4
 800b94e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b952:	4718      	bx	r3
 800b954:	680e      	ldr	r6, [r1, #0]
 800b956:	4620      	mov	r0, r4
 800b958:	f000 f83a 	bl	800b9d0 <_free_r>
 800b95c:	4631      	mov	r1, r6
 800b95e:	e7bb      	b.n	800b8d8 <_reclaim_reent+0x1c>
 800b960:	bd70      	pop	{r4, r5, r6, pc}
 800b962:	bf00      	nop
 800b964:	20000110 	.word	0x20000110

0800b968 <__libc_init_array>:
 800b968:	b570      	push	{r4, r5, r6, lr}
 800b96a:	4d0d      	ldr	r5, [pc, #52]	@ (800b9a0 <__libc_init_array+0x38>)
 800b96c:	4c0d      	ldr	r4, [pc, #52]	@ (800b9a4 <__libc_init_array+0x3c>)
 800b96e:	1b64      	subs	r4, r4, r5
 800b970:	10a4      	asrs	r4, r4, #2
 800b972:	2600      	movs	r6, #0
 800b974:	42a6      	cmp	r6, r4
 800b976:	d109      	bne.n	800b98c <__libc_init_array+0x24>
 800b978:	4d0b      	ldr	r5, [pc, #44]	@ (800b9a8 <__libc_init_array+0x40>)
 800b97a:	4c0c      	ldr	r4, [pc, #48]	@ (800b9ac <__libc_init_array+0x44>)
 800b97c:	f000 f87e 	bl	800ba7c <_init>
 800b980:	1b64      	subs	r4, r4, r5
 800b982:	10a4      	asrs	r4, r4, #2
 800b984:	2600      	movs	r6, #0
 800b986:	42a6      	cmp	r6, r4
 800b988:	d105      	bne.n	800b996 <__libc_init_array+0x2e>
 800b98a:	bd70      	pop	{r4, r5, r6, pc}
 800b98c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b990:	4798      	blx	r3
 800b992:	3601      	adds	r6, #1
 800b994:	e7ee      	b.n	800b974 <__libc_init_array+0xc>
 800b996:	f855 3b04 	ldr.w	r3, [r5], #4
 800b99a:	4798      	blx	r3
 800b99c:	3601      	adds	r6, #1
 800b99e:	e7f2      	b.n	800b986 <__libc_init_array+0x1e>
 800b9a0:	0800bb54 	.word	0x0800bb54
 800b9a4:	0800bb54 	.word	0x0800bb54
 800b9a8:	0800bb54 	.word	0x0800bb54
 800b9ac:	0800bb58 	.word	0x0800bb58

0800b9b0 <__retarget_lock_acquire_recursive>:
 800b9b0:	4770      	bx	lr

0800b9b2 <__retarget_lock_release_recursive>:
 800b9b2:	4770      	bx	lr

0800b9b4 <memcpy>:
 800b9b4:	440a      	add	r2, r1
 800b9b6:	4291      	cmp	r1, r2
 800b9b8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b9bc:	d100      	bne.n	800b9c0 <memcpy+0xc>
 800b9be:	4770      	bx	lr
 800b9c0:	b510      	push	{r4, lr}
 800b9c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9ca:	4291      	cmp	r1, r2
 800b9cc:	d1f9      	bne.n	800b9c2 <memcpy+0xe>
 800b9ce:	bd10      	pop	{r4, pc}

0800b9d0 <_free_r>:
 800b9d0:	b538      	push	{r3, r4, r5, lr}
 800b9d2:	4605      	mov	r5, r0
 800b9d4:	2900      	cmp	r1, #0
 800b9d6:	d041      	beq.n	800ba5c <_free_r+0x8c>
 800b9d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9dc:	1f0c      	subs	r4, r1, #4
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	bfb8      	it	lt
 800b9e2:	18e4      	addlt	r4, r4, r3
 800b9e4:	f000 f83e 	bl	800ba64 <__malloc_lock>
 800b9e8:	4a1d      	ldr	r2, [pc, #116]	@ (800ba60 <_free_r+0x90>)
 800b9ea:	6813      	ldr	r3, [r2, #0]
 800b9ec:	b933      	cbnz	r3, 800b9fc <_free_r+0x2c>
 800b9ee:	6063      	str	r3, [r4, #4]
 800b9f0:	6014      	str	r4, [r2, #0]
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9f8:	f000 b83a 	b.w	800ba70 <__malloc_unlock>
 800b9fc:	42a3      	cmp	r3, r4
 800b9fe:	d908      	bls.n	800ba12 <_free_r+0x42>
 800ba00:	6820      	ldr	r0, [r4, #0]
 800ba02:	1821      	adds	r1, r4, r0
 800ba04:	428b      	cmp	r3, r1
 800ba06:	bf01      	itttt	eq
 800ba08:	6819      	ldreq	r1, [r3, #0]
 800ba0a:	685b      	ldreq	r3, [r3, #4]
 800ba0c:	1809      	addeq	r1, r1, r0
 800ba0e:	6021      	streq	r1, [r4, #0]
 800ba10:	e7ed      	b.n	800b9ee <_free_r+0x1e>
 800ba12:	461a      	mov	r2, r3
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	b10b      	cbz	r3, 800ba1c <_free_r+0x4c>
 800ba18:	42a3      	cmp	r3, r4
 800ba1a:	d9fa      	bls.n	800ba12 <_free_r+0x42>
 800ba1c:	6811      	ldr	r1, [r2, #0]
 800ba1e:	1850      	adds	r0, r2, r1
 800ba20:	42a0      	cmp	r0, r4
 800ba22:	d10b      	bne.n	800ba3c <_free_r+0x6c>
 800ba24:	6820      	ldr	r0, [r4, #0]
 800ba26:	4401      	add	r1, r0
 800ba28:	1850      	adds	r0, r2, r1
 800ba2a:	4283      	cmp	r3, r0
 800ba2c:	6011      	str	r1, [r2, #0]
 800ba2e:	d1e0      	bne.n	800b9f2 <_free_r+0x22>
 800ba30:	6818      	ldr	r0, [r3, #0]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	6053      	str	r3, [r2, #4]
 800ba36:	4408      	add	r0, r1
 800ba38:	6010      	str	r0, [r2, #0]
 800ba3a:	e7da      	b.n	800b9f2 <_free_r+0x22>
 800ba3c:	d902      	bls.n	800ba44 <_free_r+0x74>
 800ba3e:	230c      	movs	r3, #12
 800ba40:	602b      	str	r3, [r5, #0]
 800ba42:	e7d6      	b.n	800b9f2 <_free_r+0x22>
 800ba44:	6820      	ldr	r0, [r4, #0]
 800ba46:	1821      	adds	r1, r4, r0
 800ba48:	428b      	cmp	r3, r1
 800ba4a:	bf04      	itt	eq
 800ba4c:	6819      	ldreq	r1, [r3, #0]
 800ba4e:	685b      	ldreq	r3, [r3, #4]
 800ba50:	6063      	str	r3, [r4, #4]
 800ba52:	bf04      	itt	eq
 800ba54:	1809      	addeq	r1, r1, r0
 800ba56:	6021      	streq	r1, [r4, #0]
 800ba58:	6054      	str	r4, [r2, #4]
 800ba5a:	e7ca      	b.n	800b9f2 <_free_r+0x22>
 800ba5c:	bd38      	pop	{r3, r4, r5, pc}
 800ba5e:	bf00      	nop
 800ba60:	200059a0 	.word	0x200059a0

0800ba64 <__malloc_lock>:
 800ba64:	4801      	ldr	r0, [pc, #4]	@ (800ba6c <__malloc_lock+0x8>)
 800ba66:	f7ff bfa3 	b.w	800b9b0 <__retarget_lock_acquire_recursive>
 800ba6a:	bf00      	nop
 800ba6c:	2000599c 	.word	0x2000599c

0800ba70 <__malloc_unlock>:
 800ba70:	4801      	ldr	r0, [pc, #4]	@ (800ba78 <__malloc_unlock+0x8>)
 800ba72:	f7ff bf9e 	b.w	800b9b2 <__retarget_lock_release_recursive>
 800ba76:	bf00      	nop
 800ba78:	2000599c 	.word	0x2000599c

0800ba7c <_init>:
 800ba7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7e:	bf00      	nop
 800ba80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba82:	bc08      	pop	{r3}
 800ba84:	469e      	mov	lr, r3
 800ba86:	4770      	bx	lr

0800ba88 <_fini>:
 800ba88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba8a:	bf00      	nop
 800ba8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba8e:	bc08      	pop	{r3}
 800ba90:	469e      	mov	lr, r3
 800ba92:	4770      	bx	lr
