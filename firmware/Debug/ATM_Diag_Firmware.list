
ATM_Diag_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a20  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005bf0  08005bf0  00006bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c50  08005c50  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005c50  08005c50  00006c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c58  08005c58  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c58  08005c58  00006c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c5c  08005c5c  00006c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005c60  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bbc  20000060  08005cc0  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c1c  08005cc0  00007c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d5e  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003458  00000000  00000000  0001ddee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  00021248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f05  00000000  00000000  000225d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d53  00000000  00000000  000234d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f56  00000000  00000000  00046228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db224  00000000  00000000  0005b17e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001363a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054f4  00000000  00000000  001363e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0013b8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005bd8 	.word	0x08005bd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005bd8 	.word	0x08005bd8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_CAN_RxFifo0MsgPendingCallback>:
    }
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08c      	sub	sp, #48	@ 0x30
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
//        {
//            // Process received message
//        }
//    }

    if (hcan->Instance != CAN1) return;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	@ (8000544 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d110      	bne.n	8000534 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>

    CAN_RxHeaderTypeDef header;
    uint8_t data[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &header, data) != HAL_OK)
 8000512:	f107 030c 	add.w	r3, r7, #12
 8000516:	f107 0214 	add.w	r2, r7, #20
 800051a:	2100      	movs	r1, #0
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f000 fdd3 	bl	80010c8 <HAL_CAN_GetRxMessage>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d107      	bne.n	8000538 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
        return;

    if (header.IDE != CAN_ID_STD || header.RTR != CAN_RTR_DATA)
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d106      	bne.n	800053c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
 800052e:	6a3b      	ldr	r3, [r7, #32]
 8000530:	2b00      	cmp	r3, #0
 8000532:	e004      	b.n	800053e <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
    if (hcan->Instance != CAN1) return;
 8000534:	bf00      	nop
 8000536:	e002      	b.n	800053e <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
        return;
 8000538:	bf00      	nop
 800053a:	e000      	b.n	800053e <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
        return;
 800053c:	bf00      	nop
//    frame.std_id = header.StdId;
//    frame.len = header.DLC;
//    memcpy(frame.data, data, frame.len);
//
//    CAN_RxBuffer_Push(&frame);
}
 800053e:	3730      	adds	r7, #48	@ 0x30
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40006400 	.word	0x40006400

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fb5c 	bl	8000c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f81a 	bl	8000588 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemCoreClockUpdate();
 8000554:	f000 fab8 	bl	8000ac8 <SystemCoreClockUpdate>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 f8ec 	bl	8000734 <MX_GPIO_Init>
  MX_CAN1_Init();
 800055c:	f000 f880 	bl	8000660 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000560:	f002 fca0 	bl	8002ea4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000564:	4a05      	ldr	r2, [pc, #20]	@ (800057c <main+0x34>)
 8000566:	2100      	movs	r1, #0
 8000568:	4805      	ldr	r0, [pc, #20]	@ (8000580 <main+0x38>)
 800056a:	f002 fce5 	bl	8002f38 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a04      	ldr	r2, [pc, #16]	@ (8000584 <main+0x3c>)
 8000572:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000574:	f002 fcba 	bl	8002eec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <main+0x30>
 800057c:	08005c14 	.word	0x08005c14
 8000580:	080007f5 	.word	0x080007f5
 8000584:	200000a4 	.word	0x200000a4

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	@ 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	2234      	movs	r2, #52	@ 0x34
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f005 fa36 	bl	8005a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b29      	ldr	r3, [pc, #164]	@ (8000658 <SystemClock_Config+0xd0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b4:	4a28      	ldr	r2, [pc, #160]	@ (8000658 <SystemClock_Config+0xd0>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80005bc:	4b26      	ldr	r3, [pc, #152]	@ (8000658 <SystemClock_Config+0xd0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c8:	2300      	movs	r3, #0
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	4b23      	ldr	r3, [pc, #140]	@ (800065c <SystemClock_Config+0xd4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005d4:	4a21      	ldr	r2, [pc, #132]	@ (800065c <SystemClock_Config+0xd4>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1f      	ldr	r3, [pc, #124]	@ (800065c <SystemClock_Config+0xd4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000600:	23a8      	movs	r3, #168	@ 0xa8
 8000602:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000608:	2302      	movs	r3, #2
 800060a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800060c:	2302      	movs	r3, #2
 800060e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fec7 	bl	80023a8 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x9c>
    Error_Handler();
 8000620:	f000 f8ff 	bl	8000822 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2302      	movs	r3, #2
 800062a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK){
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	2102      	movs	r1, #2
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fb49 	bl	8001cd8 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xc8>
    Error_Handler();
 800064c:	f000 f8e9 	bl	8000822 <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	@ 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	@ 0x28
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000666:	4b31      	ldr	r3, [pc, #196]	@ (800072c <MX_CAN1_Init+0xcc>)
 8000668:	4a31      	ldr	r2, [pc, #196]	@ (8000730 <MX_CAN1_Init+0xd0>)
 800066a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800066c:	4b2f      	ldr	r3, [pc, #188]	@ (800072c <MX_CAN1_Init+0xcc>)
 800066e:	2206      	movs	r2, #6
 8000670:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000672:	4b2e      	ldr	r3, [pc, #184]	@ (800072c <MX_CAN1_Init+0xcc>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000678:	4b2c      	ldr	r3, [pc, #176]	@ (800072c <MX_CAN1_Init+0xcc>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 800067e:	4b2b      	ldr	r3, [pc, #172]	@ (800072c <MX_CAN1_Init+0xcc>)
 8000680:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000684:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000686:	4b29      	ldr	r3, [pc, #164]	@ (800072c <MX_CAN1_Init+0xcc>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800068c:	4b27      	ldr	r3, [pc, #156]	@ (800072c <MX_CAN1_Init+0xcc>)
 800068e:	2200      	movs	r2, #0
 8000690:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000692:	4b26      	ldr	r3, [pc, #152]	@ (800072c <MX_CAN1_Init+0xcc>)
 8000694:	2200      	movs	r2, #0
 8000696:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000698:	4b24      	ldr	r3, [pc, #144]	@ (800072c <MX_CAN1_Init+0xcc>)
 800069a:	2200      	movs	r2, #0
 800069c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800069e:	4b23      	ldr	r3, [pc, #140]	@ (800072c <MX_CAN1_Init+0xcc>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006a4:	4b21      	ldr	r3, [pc, #132]	@ (800072c <MX_CAN1_Init+0xcc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006aa:	4b20      	ldr	r3, [pc, #128]	@ (800072c <MX_CAN1_Init+0xcc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	775a      	strb	r2, [r3, #29]

  if (HAL_CAN_Init(&hcan1) != HAL_OK){
 80006b0:	481e      	ldr	r0, [pc, #120]	@ (800072c <MX_CAN1_Init+0xcc>)
 80006b2:	f000 faeb 	bl	8000c8c <HAL_CAN_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_CAN1_Init+0x60>
    Error_Handler();
 80006bc:	f000 f8b1 	bl	8000822 <Error_Handler>
  }

  /* USER CODE BEGIN CAN1_Init 2 */

  // Configure filters
  CAN_FilterTypeDef sFilterConfig = {0};
 80006c0:	463b      	mov	r3, r7
 80006c2:	2228      	movs	r2, #40	@ 0x28
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f005 f99e 	bl	8005a08 <memset>
  sFilterConfig.FilterBank = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80006d8:	2300      	movs	r3, #0
 80006da:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80006f0:	230e      	movs	r3, #14
 80006f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK
 80006f4:	463b      	mov	r3, r7
 80006f6:	4619      	mov	r1, r3
 80006f8:	480c      	ldr	r0, [pc, #48]	@ (800072c <MX_CAN1_Init+0xcc>)
 80006fa:	f000 fbc3 	bl	8000e84 <HAL_CAN_ConfigFilter>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d10c      	bne.n	800071e <MX_CAN1_Init+0xbe>
		  || HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK
 8000704:	2103      	movs	r1, #3
 8000706:	4809      	ldr	r0, [pc, #36]	@ (800072c <MX_CAN1_Init+0xcc>)
 8000708:	f000 fe00 	bl	800130c <HAL_CAN_ActivateNotification>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d105      	bne.n	800071e <MX_CAN1_Init+0xbe>
		  || HAL_CAN_Start(&hcan1) != HAL_OK)
 8000712:	4806      	ldr	r0, [pc, #24]	@ (800072c <MX_CAN1_Init+0xcc>)
 8000714:	f000 fc94 	bl	8001040 <HAL_CAN_Start>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_CAN1_Init+0xc2>
  {
      Error_Handler();
 800071e:	f000 f880 	bl	8000822 <Error_Handler>
  }

  /* USER CODE END CAN1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3728      	adds	r7, #40	@ 0x28
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000007c 	.word	0x2000007c
 8000730:	40006400 	.word	0x40006400

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	4b26      	ldr	r3, [pc, #152]	@ (80007e8 <MX_GPIO_Init+0xb4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a25      	ldr	r2, [pc, #148]	@ (80007e8 <MX_GPIO_Init+0xb4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b23      	ldr	r3, [pc, #140]	@ (80007e8 <MX_GPIO_Init+0xb4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <MX_GPIO_Init+0xb4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a1e      	ldr	r2, [pc, #120]	@ (80007e8 <MX_GPIO_Init+0xb4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <MX_GPIO_Init+0xb4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <MX_GPIO_Init+0xb4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a17      	ldr	r2, [pc, #92]	@ (80007e8 <MX_GPIO_Init+0xb4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <MX_GPIO_Init+0xb4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2120      	movs	r1, #32
 80007a2:	4812      	ldr	r0, [pc, #72]	@ (80007ec <MX_GPIO_Init+0xb8>)
 80007a4:	f001 fa7e 	bl	8001ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4619      	mov	r1, r3
 80007be:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <MX_GPIO_Init+0xbc>)
 80007c0:	f001 f8dc 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007c4:	2320      	movs	r3, #32
 80007c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	4619      	mov	r1, r3
 80007da:	4804      	ldr	r0, [pc, #16]	@ (80007ec <MX_GPIO_Init+0xb8>)
 80007dc:	f001 f8ce 	bl	800197c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e0:	bf00      	nop
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020000 	.word	0x40020000
 80007f0:	40020800 	.word	0x40020800

080007f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f002 fc2d 	bl	800305c <osDelay>
 8000802:	e7fb      	b.n	80007fc <StartDefaultTask+0x8>

08000804 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000814:	d101      	bne.n	800081a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000816:	f000 fa19 	bl	8000c4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000826:	b672      	cpsid	i
}
 8000828:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082a:	bf00      	nop
 800082c:	e7fd      	b.n	800082a <Error_Handler+0x8>
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <HAL_MspInit+0x54>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083e:	4a11      	ldr	r2, [pc, #68]	@ (8000884 <HAL_MspInit+0x54>)
 8000840:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000844:	6453      	str	r3, [r2, #68]	@ 0x44
 8000846:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <HAL_MspInit+0x54>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <HAL_MspInit+0x54>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085a:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <HAL_MspInit+0x54>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000860:	6413      	str	r3, [r2, #64]	@ 0x40
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <HAL_MspInit+0x54>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	210f      	movs	r1, #15
 8000872:	f06f 0001 	mvn.w	r0, #1
 8000876:	f001 f857 	bl	8001928 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800

08000888 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	@ 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a21      	ldr	r2, [pc, #132]	@ (800092c <HAL_CAN_MspInit+0xa4>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d13c      	bne.n	8000924 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	4b20      	ldr	r3, [pc, #128]	@ (8000930 <HAL_CAN_MspInit+0xa8>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000930 <HAL_CAN_MspInit+0xa8>)
 80008b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <HAL_CAN_MspInit+0xa8>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <HAL_CAN_MspInit+0xa8>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a18      	ldr	r2, [pc, #96]	@ (8000930 <HAL_CAN_MspInit+0xa8>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <HAL_CAN_MspInit+0xa8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008e2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008f4:	2309      	movs	r3, #9
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	480d      	ldr	r0, [pc, #52]	@ (8000934 <HAL_CAN_MspInit+0xac>)
 8000900:	f001 f83c 	bl	800197c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 6, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2106      	movs	r1, #6
 8000908:	2013      	movs	r0, #19
 800090a:	f001 f80d 	bl	8001928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800090e:	2013      	movs	r0, #19
 8000910:	f001 f826 	bl	8001960 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2105      	movs	r1, #5
 8000918:	2014      	movs	r0, #20
 800091a:	f001 f805 	bl	8001928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800091e:	2014      	movs	r0, #20
 8000920:	f001 f81e 	bl	8001960 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	@ 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40006400 	.word	0x40006400
 8000930:	40023800 	.word	0x40023800
 8000934:	40020000 	.word	0x40020000

08000938 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08e      	sub	sp, #56	@ 0x38
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	4b34      	ldr	r3, [pc, #208]	@ (8000a20 <HAL_InitTick+0xe8>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	4a33      	ldr	r2, [pc, #204]	@ (8000a20 <HAL_InitTick+0xe8>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	6413      	str	r3, [r2, #64]	@ 0x40
 8000958:	4b31      	ldr	r3, [pc, #196]	@ (8000a20 <HAL_InitTick+0xe8>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000964:	f107 0210 	add.w	r2, r7, #16
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f001 fab8 	bl	8001ee4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000974:	6a3b      	ldr	r3, [r7, #32]
 8000976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800097a:	2b00      	cmp	r3, #0
 800097c:	d103      	bne.n	8000986 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800097e:	f001 fa9d 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 8000982:	6378      	str	r0, [r7, #52]	@ 0x34
 8000984:	e004      	b.n	8000990 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000986:	f001 fa99 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 800098a:	4603      	mov	r3, r0
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000992:	4a24      	ldr	r2, [pc, #144]	@ (8000a24 <HAL_InitTick+0xec>)
 8000994:	fba2 2303 	umull	r2, r3, r2, r3
 8000998:	0c9b      	lsrs	r3, r3, #18
 800099a:	3b01      	subs	r3, #1
 800099c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800099e:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <HAL_InitTick+0xf0>)
 80009a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80009a6:	4b20      	ldr	r3, [pc, #128]	@ (8000a28 <HAL_InitTick+0xf0>)
 80009a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009ac:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80009ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000a28 <HAL_InitTick+0xf0>)
 80009b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009b2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80009b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <HAL_InitTick+0xf0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <HAL_InitTick+0xf0>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <HAL_InitTick+0xf0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80009c6:	4818      	ldr	r0, [pc, #96]	@ (8000a28 <HAL_InitTick+0xf0>)
 80009c8:	f001 ff8c 	bl	80028e4 <HAL_TIM_Base_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d11b      	bne.n	8000a12 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80009da:	4813      	ldr	r0, [pc, #76]	@ (8000a28 <HAL_InitTick+0xf0>)
 80009dc:	f001 ffdc 	bl	8002998 <HAL_TIM_Base_Start_IT>
 80009e0:	4603      	mov	r3, r0
 80009e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d111      	bne.n	8000a12 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009ee:	201c      	movs	r0, #28
 80009f0:	f000 ffb6 	bl	8001960 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b0f      	cmp	r3, #15
 80009f8:	d808      	bhi.n	8000a0c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80009fa:	2200      	movs	r2, #0
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	201c      	movs	r0, #28
 8000a00:	f000 ff92 	bl	8001928 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a04:	4a09      	ldr	r2, [pc, #36]	@ (8000a2c <HAL_InitTick+0xf4>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
 8000a0a:	e002      	b.n	8000a12 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a12:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3738      	adds	r7, #56	@ 0x38
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	431bde83 	.word	0x431bde83
 8000a28:	200000a8 	.word	0x200000a8
 8000a2c:	20000004 	.word	0x20000004

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <NMI_Handler+0x4>

08000a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <MemManage_Handler+0x4>

08000a48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <CAN1_TX_IRQHandler+0x10>)
 8000a6e:	f000 fc73 	bl	8001358 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	2000007c 	.word	0x2000007c

08000a7c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <CAN1_RX0_IRQHandler+0x10>)
 8000a82:	f000 fc69 	bl	8001358 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000007c 	.word	0x2000007c

08000a90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <TIM2_IRQHandler+0x10>)
 8000a96:	f001 ffef 	bl	8002a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000a8 	.word	0x200000a8

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	@ (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b087      	sub	sp, #28
 8000acc:	af00      	add	r7, sp, #0
  uint32_t tmp, pllvco, pllp, pllsource, pllm;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000ace:	4b34      	ldr	r3, [pc, #208]	@ (8000ba0 <SystemCoreClockUpdate+0xd8>)
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	f003 030c 	and.w	r3, r3, #12
 8000ad6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	2b08      	cmp	r3, #8
 8000adc:	d011      	beq.n	8000b02 <SystemCoreClockUpdate+0x3a>
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	2b08      	cmp	r3, #8
 8000ae2:	d844      	bhi.n	8000b6e <SystemCoreClockUpdate+0xa6>
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <SystemCoreClockUpdate+0x2a>
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	2b04      	cmp	r3, #4
 8000aee:	d004      	beq.n	8000afa <SystemCoreClockUpdate+0x32>
 8000af0:	e03d      	b.n	8000b6e <SystemCoreClockUpdate+0xa6>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000af2:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba4 <SystemCoreClockUpdate+0xdc>)
 8000af4:	4a2c      	ldr	r2, [pc, #176]	@ (8000ba8 <SystemCoreClockUpdate+0xe0>)
 8000af6:	601a      	str	r2, [r3, #0]
      break;
 8000af8:	e03d      	b.n	8000b76 <SystemCoreClockUpdate+0xae>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000afa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba4 <SystemCoreClockUpdate+0xdc>)
 8000afc:	4a2b      	ldr	r2, [pc, #172]	@ (8000bac <SystemCoreClockUpdate+0xe4>)
 8000afe:	601a      	str	r2, [r3, #0]
      break;
 8000b00:	e039      	b.n	8000b76 <SystemCoreClockUpdate+0xae>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000b02:	4b27      	ldr	r3, [pc, #156]	@ (8000ba0 <SystemCoreClockUpdate+0xd8>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	0d9b      	lsrs	r3, r3, #22
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b0e:	4b24      	ldr	r3, [pc, #144]	@ (8000ba0 <SystemCoreClockUpdate+0xd8>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b16:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d00c      	beq.n	8000b38 <SystemCoreClockUpdate+0x70>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b1e:	4a23      	ldr	r2, [pc, #140]	@ (8000bac <SystemCoreClockUpdate+0xe4>)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b26:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba0 <SystemCoreClockUpdate+0xd8>)
 8000b28:	6852      	ldr	r2, [r2, #4]
 8000b2a:	0992      	lsrs	r2, r2, #6
 8000b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b30:	fb02 f303 	mul.w	r3, r2, r3
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	e00b      	b.n	8000b50 <SystemCoreClockUpdate+0x88>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba8 <SystemCoreClockUpdate+0xe0>)
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b40:	4a17      	ldr	r2, [pc, #92]	@ (8000ba0 <SystemCoreClockUpdate+0xd8>)
 8000b42:	6852      	ldr	r2, [r2, #4]
 8000b44:	0992      	lsrs	r2, r2, #6
 8000b46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b4a:	fb02 f303 	mul.w	r3, r2, r3
 8000b4e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000b50:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <SystemCoreClockUpdate+0xd8>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	0c1b      	lsrs	r3, r3, #16
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllp;
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b68:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba4 <SystemCoreClockUpdate+0xdc>)
 8000b6a:	6013      	str	r3, [r2, #0]
      break;
 8000b6c:	e003      	b.n	8000b76 <SystemCoreClockUpdate+0xae>
    default:
      SystemCoreClock = HSI_VALUE;
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <SystemCoreClockUpdate+0xdc>)
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <SystemCoreClockUpdate+0xe0>)
 8000b72:	601a      	str	r2, [r3, #0]
      break;
 8000b74:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000b76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <SystemCoreClockUpdate+0xd8>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	091b      	lsrs	r3, r3, #4
 8000b7c:	f003 030f 	and.w	r3, r3, #15
 8000b80:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb0 <SystemCoreClockUpdate+0xe8>)
 8000b82:	5cd3      	ldrb	r3, [r2, r3]
 8000b84:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000b86:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <SystemCoreClockUpdate+0xdc>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b90:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <SystemCoreClockUpdate+0xdc>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	371c      	adds	r7, #28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	00f42400 	.word	0x00f42400
 8000bac:	007a1200 	.word	0x007a1200
 8000bb0:	08005c38 	.word	0x08005c38

08000bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bb8:	f7ff ff74 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bbc:	480c      	ldr	r0, [pc, #48]	@ (8000bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bbe:	490d      	ldr	r1, [pc, #52]	@ (8000bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000c00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000be2:	f004 ff6f 	bl	8005ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be6:	f7ff fcaf 	bl	8000548 <main>
  bx  lr    
 8000bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bf8:	08005c60 	.word	0x08005c60
  ldr r2, =_sbss
 8000bfc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c00:	20004c1c 	.word	0x20004c1c

08000c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC_IRQHandler>
	...

08000c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <HAL_Init+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0d      	ldr	r2, [pc, #52]	@ (8000c48 <HAL_Init+0x40>)
 8000c12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c18:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <HAL_Init+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c48 <HAL_Init+0x40>)
 8000c1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c24:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a07      	ldr	r2, [pc, #28]	@ (8000c48 <HAL_Init+0x40>)
 8000c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 fe6e 	bl	8001912 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c36:	200f      	movs	r0, #15
 8000c38:	f7ff fe7e 	bl	8000938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c3c:	f7ff fdf8 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023c00 	.word	0x40023c00

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_IncTick+0x20>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_IncTick+0x24>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a04      	ldr	r2, [pc, #16]	@ (8000c70 <HAL_IncTick+0x24>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	200000f0 	.word	0x200000f0

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b03      	ldr	r3, [pc, #12]	@ (8000c88 <HAL_GetTick+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	200000f0 	.word	0x200000f0

08000c8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e0ed      	b.n	8000e7a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d102      	bne.n	8000cb0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fdec 	bl	8000888 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f042 0201 	orr.w	r2, r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cc0:	f7ff ffd8 	bl	8000c74 <HAL_GetTick>
 8000cc4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cc6:	e012      	b.n	8000cee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cc8:	f7ff ffd4 	bl	8000c74 <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	2b0a      	cmp	r3, #10
 8000cd4:	d90b      	bls.n	8000cee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cda:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e0c5      	b.n	8000e7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0e5      	beq.n	8000cc8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f022 0202 	bic.w	r2, r2, #2
 8000d0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d0c:	f7ff ffb2 	bl	8000c74 <HAL_GetTick>
 8000d10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d12:	e012      	b.n	8000d3a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d14:	f7ff ffae 	bl	8000c74 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b0a      	cmp	r3, #10
 8000d20:	d90b      	bls.n	8000d3a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d26:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2205      	movs	r2, #5
 8000d32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e09f      	b.n	8000e7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1e5      	bne.n	8000d14 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7e1b      	ldrb	r3, [r3, #24]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d108      	bne.n	8000d62 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	e007      	b.n	8000d72 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	7e5b      	ldrb	r3, [r3, #25]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d108      	bne.n	8000d8c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	e007      	b.n	8000d9c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000d9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7e9b      	ldrb	r3, [r3, #26]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d108      	bne.n	8000db6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0220 	orr.w	r2, r2, #32
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	e007      	b.n	8000dc6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 0220 	bic.w	r2, r2, #32
 8000dc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7edb      	ldrb	r3, [r3, #27]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d108      	bne.n	8000de0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 0210 	bic.w	r2, r2, #16
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	e007      	b.n	8000df0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 0210 	orr.w	r2, r2, #16
 8000dee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	7f1b      	ldrb	r3, [r3, #28]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d108      	bne.n	8000e0a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f042 0208 	orr.w	r2, r2, #8
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	e007      	b.n	8000e1a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f022 0208 	bic.w	r2, r2, #8
 8000e18:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7f5b      	ldrb	r3, [r3, #29]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d108      	bne.n	8000e34 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f042 0204 	orr.w	r2, r2, #4
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	e007      	b.n	8000e44 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f022 0204 	bic.w	r2, r2, #4
 8000e42:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	431a      	orrs	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	ea42 0103 	orr.w	r1, r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	1e5a      	subs	r2, r3, #1
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2201      	movs	r2, #1
 8000e74:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e94:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e96:	7dfb      	ldrb	r3, [r7, #23]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d003      	beq.n	8000ea4 <HAL_CAN_ConfigFilter+0x20>
 8000e9c:	7dfb      	ldrb	r3, [r7, #23]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	f040 80be 	bne.w	8001020 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000ea4:	4b65      	ldr	r3, [pc, #404]	@ (800103c <HAL_CAN_ConfigFilter+0x1b8>)
 8000ea6:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000eae:	f043 0201 	orr.w	r2, r3, #1
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000ebe:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	f003 031f 	and.w	r3, r3, #31
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d123      	bne.n	8000f4e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	401a      	ands	r2, r3
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f28:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	3248      	adds	r2, #72	@ 0x48
 8000f2e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f42:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f44:	6939      	ldr	r1, [r7, #16]
 8000f46:	3348      	adds	r3, #72	@ 0x48
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	440b      	add	r3, r1
 8000f4c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d122      	bne.n	8000f9c <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f76:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	3248      	adds	r2, #72	@ 0x48
 8000f7c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f90:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f92:	6939      	ldr	r1, [r7, #16]
 8000f94:	3348      	adds	r3, #72	@ 0x48
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	440b      	add	r3, r1
 8000f9a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d109      	bne.n	8000fb8 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	401a      	ands	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000fb6:	e007      	b.n	8000fc8 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d109      	bne.n	8000fe4 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	401a      	ands	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000fe2:	e007      	b.n	8000ff4 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	431a      	orrs	r2, r3
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d107      	bne.n	800100c <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	431a      	orrs	r2, r3
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001012:	f023 0201 	bic.w	r2, r3, #1
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	e006      	b.n	800102e <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001024:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
  }
}
 800102e:	4618      	mov	r0, r3
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40006400 	.word	0x40006400

08001040 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b01      	cmp	r3, #1
 8001052:	d12e      	bne.n	80010b2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2202      	movs	r2, #2
 8001058:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0201 	bic.w	r2, r2, #1
 800106a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800106c:	f7ff fe02 	bl	8000c74 <HAL_GetTick>
 8001070:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001072:	e012      	b.n	800109a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001074:	f7ff fdfe 	bl	8000c74 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b0a      	cmp	r3, #10
 8001080:	d90b      	bls.n	800109a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001086:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2205      	movs	r2, #5
 8001092:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e012      	b.n	80010c0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1e5      	bne.n	8001074 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e006      	b.n	80010c0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
  }
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80010c8:	b480      	push	{r7}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010dc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d003      	beq.n	80010ec <HAL_CAN_GetRxMessage+0x24>
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	f040 8103 	bne.w	80012f2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10e      	bne.n	8001110 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d116      	bne.n	800112e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001104:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e0f7      	b.n	8001300 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d107      	bne.n	800112e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001122:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e0e8      	b.n	8001300 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	331b      	adds	r3, #27
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	4413      	add	r3, r2
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0204 	and.w	r2, r3, #4
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10c      	bne.n	8001166 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	331b      	adds	r3, #27
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	4413      	add	r3, r2
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	0d5b      	lsrs	r3, r3, #21
 800115c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	e00b      	b.n	800117e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	331b      	adds	r3, #27
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	4413      	add	r3, r2
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	08db      	lsrs	r3, r3, #3
 8001176:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	331b      	adds	r3, #27
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	4413      	add	r3, r2
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0202 	and.w	r2, r3, #2
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	331b      	adds	r3, #27
 800119c:	011b      	lsls	r3, r3, #4
 800119e:	4413      	add	r3, r2
 80011a0:	3304      	adds	r3, #4
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2208      	movs	r2, #8
 80011b0:	611a      	str	r2, [r3, #16]
 80011b2:	e00b      	b.n	80011cc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	331b      	adds	r3, #27
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	4413      	add	r3, r2
 80011c0:	3304      	adds	r3, #4
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 020f 	and.w	r2, r3, #15
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	331b      	adds	r3, #27
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	4413      	add	r3, r2
 80011d8:	3304      	adds	r3, #4
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	331b      	adds	r3, #27
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	4413      	add	r3, r2
 80011f0:	3304      	adds	r3, #4
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	0c1b      	lsrs	r3, r3, #16
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	011b      	lsls	r3, r3, #4
 8001204:	4413      	add	r3, r2
 8001206:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	4413      	add	r3, r2
 800121c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	0a1a      	lsrs	r2, r3, #8
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	4413      	add	r3, r2
 8001236:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	0c1a      	lsrs	r2, r3, #16
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	3302      	adds	r3, #2
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	4413      	add	r3, r2
 8001250:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	0e1a      	lsrs	r2, r3, #24
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	3303      	adds	r3, #3
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	4413      	add	r3, r2
 800126a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	3304      	adds	r3, #4
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	4413      	add	r3, r2
 8001282:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	0a1a      	lsrs	r2, r3, #8
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	3305      	adds	r3, #5
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	4413      	add	r3, r2
 800129c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	0c1a      	lsrs	r2, r3, #16
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	3306      	adds	r3, #6
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	4413      	add	r3, r2
 80012b6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	0e1a      	lsrs	r2, r3, #24
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	3307      	adds	r3, #7
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d108      	bne.n	80012de <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0220 	orr.w	r2, r2, #32
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	e007      	b.n	80012ee <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 0220 	orr.w	r2, r2, #32
 80012ec:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e006      	b.n	8001300 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
  }
}
 8001300:	4618      	mov	r0, r3
 8001302:	371c      	adds	r7, #28
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3020 	ldrb.w	r3, [r3, #32]
 800131c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d002      	beq.n	800132a <HAL_CAN_ActivateNotification+0x1e>
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d109      	bne.n	800133e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6959      	ldr	r1, [r3, #20]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e006      	b.n	800134c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001342:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
  }
}
 800134c:	4618      	mov	r0, r3
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	@ 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d07c      	beq.n	8001498 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d023      	beq.n	80013f0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2201      	movs	r2, #1
 80013ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f983 	bl	80016c6 <HAL_CAN_TxMailbox0CompleteCallback>
 80013c0:	e016      	b.n	80013f0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d004      	beq.n	80013d6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80013cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80013d4:	e00c      	b.n	80013f0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80013e8:	e002      	b.n	80013f0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f989 	bl	8001702 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d024      	beq.n	8001444 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001402:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f963 	bl	80016da <HAL_CAN_TxMailbox1CompleteCallback>
 8001414:	e016      	b.n	8001444 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800141c:	2b00      	cmp	r3, #0
 800141e:	d004      	beq.n	800142a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001422:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
 8001428:	e00c      	b.n	8001444 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001430:	2b00      	cmp	r3, #0
 8001432:	d004      	beq.n	800143e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001436:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
 800143c:	e002      	b.n	8001444 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f969 	bl	8001716 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d024      	beq.n	8001498 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001456:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f943 	bl	80016ee <HAL_CAN_TxMailbox2CompleteCallback>
 8001468:	e016      	b.n	8001498 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d004      	beq.n	800147e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
 800147c:	e00c      	b.n	8001498 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001490:	e002      	b.n	8001498 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f949 	bl	800172a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00c      	beq.n	80014bc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f003 0310 	and.w	r3, r3, #16
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d007      	beq.n	80014bc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80014ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2210      	movs	r2, #16
 80014ba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00b      	beq.n	80014de <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d006      	beq.n	80014de <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2208      	movs	r2, #8
 80014d6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 f930 	bl	800173e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014de:	6a3b      	ldr	r3, [r7, #32]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d009      	beq.n	80014fc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d002      	beq.n	80014fc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff f802 	bl	8000500 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00c      	beq.n	8001520 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	2b00      	cmp	r3, #0
 800150e:	d007      	beq.n	8001520 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2210      	movs	r2, #16
 800151e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	f003 0320 	and.w	r3, r3, #32
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d006      	beq.n	8001542 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2208      	movs	r2, #8
 800153a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 f912 	bl	8001766 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	2b00      	cmp	r3, #0
 800154a:	d009      	beq.n	8001560 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f8f9 	bl	8001752 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00b      	beq.n	8001582 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	f003 0310 	and.w	r3, r3, #16
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2210      	movs	r2, #16
 800157a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 f8fc 	bl	800177a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00b      	beq.n	80015a4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d006      	beq.n	80015a4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2208      	movs	r2, #8
 800159c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f8f5 	bl	800178e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d07b      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d072      	beq.n	800169e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d008      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80015cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d008      	beq.n	80015f0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ea:	f043 0302 	orr.w	r3, r3, #2
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015f0:	6a3b      	ldr	r3, [r7, #32]
 80015f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d008      	beq.n	800160c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001612:	2b00      	cmp	r3, #0
 8001614:	d043      	beq.n	800169e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800161c:	2b00      	cmp	r3, #0
 800161e:	d03e      	beq.n	800169e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001626:	2b60      	cmp	r3, #96	@ 0x60
 8001628:	d02b      	beq.n	8001682 <HAL_CAN_IRQHandler+0x32a>
 800162a:	2b60      	cmp	r3, #96	@ 0x60
 800162c:	d82e      	bhi.n	800168c <HAL_CAN_IRQHandler+0x334>
 800162e:	2b50      	cmp	r3, #80	@ 0x50
 8001630:	d022      	beq.n	8001678 <HAL_CAN_IRQHandler+0x320>
 8001632:	2b50      	cmp	r3, #80	@ 0x50
 8001634:	d82a      	bhi.n	800168c <HAL_CAN_IRQHandler+0x334>
 8001636:	2b40      	cmp	r3, #64	@ 0x40
 8001638:	d019      	beq.n	800166e <HAL_CAN_IRQHandler+0x316>
 800163a:	2b40      	cmp	r3, #64	@ 0x40
 800163c:	d826      	bhi.n	800168c <HAL_CAN_IRQHandler+0x334>
 800163e:	2b30      	cmp	r3, #48	@ 0x30
 8001640:	d010      	beq.n	8001664 <HAL_CAN_IRQHandler+0x30c>
 8001642:	2b30      	cmp	r3, #48	@ 0x30
 8001644:	d822      	bhi.n	800168c <HAL_CAN_IRQHandler+0x334>
 8001646:	2b10      	cmp	r3, #16
 8001648:	d002      	beq.n	8001650 <HAL_CAN_IRQHandler+0x2f8>
 800164a:	2b20      	cmp	r3, #32
 800164c:	d005      	beq.n	800165a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800164e:	e01d      	b.n	800168c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	f043 0308 	orr.w	r3, r3, #8
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001658:	e019      	b.n	800168e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	f043 0310 	orr.w	r3, r3, #16
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001662:	e014      	b.n	800168e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001666:	f043 0320 	orr.w	r3, r3, #32
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800166c:	e00f      	b.n	800168e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001676:	e00a      	b.n	800168e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001680:	e005      	b.n	800168e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800168a:	e000      	b.n	800168e <HAL_CAN_IRQHandler+0x336>
            break;
 800168c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	699a      	ldr	r2, [r3, #24]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800169c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2204      	movs	r2, #4
 80016a4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80016a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f872 	bl	80017a2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80016be:	bf00      	nop
 80016c0:	3728      	adds	r7, #40	@ 0x28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	@ (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	@ (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	@ (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	@ 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	@ 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ff4c 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800193a:	f7ff ff61 	bl	8001800 <__NVIC_GetPriorityGrouping>
 800193e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	68b9      	ldr	r1, [r7, #8]
 8001944:	6978      	ldr	r0, [r7, #20]
 8001946:	f7ff ffb1 	bl	80018ac <NVIC_EncodePriority>
 800194a:	4602      	mov	r2, r0
 800194c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ff80 	bl	8001858 <__NVIC_SetPriority>
}
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff ff54 	bl	800181c <__NVIC_EnableIRQ>
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	@ 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	e165      	b.n	8001c64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001998:	2201      	movs	r2, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	f040 8154 	bne.w	8001c5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d005      	beq.n	80019ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d130      	bne.n	8001a30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	2203      	movs	r2, #3
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a04:	2201      	movs	r2, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f003 0201 	and.w	r2, r3, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d017      	beq.n	8001a6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	2203      	movs	r2, #3
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d123      	bne.n	8001ac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	08da      	lsrs	r2, r3, #3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3208      	adds	r2, #8
 8001a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	220f      	movs	r2, #15
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	08da      	lsrs	r2, r3, #3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3208      	adds	r2, #8
 8001aba:	69b9      	ldr	r1, [r7, #24]
 8001abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0203 	and.w	r2, r3, #3
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80ae 	beq.w	8001c5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b5d      	ldr	r3, [pc, #372]	@ (8001c7c <HAL_GPIO_Init+0x300>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	4a5c      	ldr	r2, [pc, #368]	@ (8001c7c <HAL_GPIO_Init+0x300>)
 8001b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b12:	4b5a      	ldr	r3, [pc, #360]	@ (8001c7c <HAL_GPIO_Init+0x300>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b1e:	4a58      	ldr	r2, [pc, #352]	@ (8001c80 <HAL_GPIO_Init+0x304>)
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	089b      	lsrs	r3, r3, #2
 8001b24:	3302      	adds	r3, #2
 8001b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4f      	ldr	r2, [pc, #316]	@ (8001c84 <HAL_GPIO_Init+0x308>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d025      	beq.n	8001b96 <HAL_GPIO_Init+0x21a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c88 <HAL_GPIO_Init+0x30c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d01f      	beq.n	8001b92 <HAL_GPIO_Init+0x216>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a4d      	ldr	r2, [pc, #308]	@ (8001c8c <HAL_GPIO_Init+0x310>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d019      	beq.n	8001b8e <HAL_GPIO_Init+0x212>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4c      	ldr	r2, [pc, #304]	@ (8001c90 <HAL_GPIO_Init+0x314>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d013      	beq.n	8001b8a <HAL_GPIO_Init+0x20e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4b      	ldr	r2, [pc, #300]	@ (8001c94 <HAL_GPIO_Init+0x318>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00d      	beq.n	8001b86 <HAL_GPIO_Init+0x20a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4a      	ldr	r2, [pc, #296]	@ (8001c98 <HAL_GPIO_Init+0x31c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d007      	beq.n	8001b82 <HAL_GPIO_Init+0x206>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a49      	ldr	r2, [pc, #292]	@ (8001c9c <HAL_GPIO_Init+0x320>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d101      	bne.n	8001b7e <HAL_GPIO_Init+0x202>
 8001b7a:	2306      	movs	r3, #6
 8001b7c:	e00c      	b.n	8001b98 <HAL_GPIO_Init+0x21c>
 8001b7e:	2307      	movs	r3, #7
 8001b80:	e00a      	b.n	8001b98 <HAL_GPIO_Init+0x21c>
 8001b82:	2305      	movs	r3, #5
 8001b84:	e008      	b.n	8001b98 <HAL_GPIO_Init+0x21c>
 8001b86:	2304      	movs	r3, #4
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x21c>
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e004      	b.n	8001b98 <HAL_GPIO_Init+0x21c>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e002      	b.n	8001b98 <HAL_GPIO_Init+0x21c>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <HAL_GPIO_Init+0x21c>
 8001b96:	2300      	movs	r3, #0
 8001b98:	69fa      	ldr	r2, [r7, #28]
 8001b9a:	f002 0203 	and.w	r2, r2, #3
 8001b9e:	0092      	lsls	r2, r2, #2
 8001ba0:	4093      	lsls	r3, r2
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba8:	4935      	ldr	r1, [pc, #212]	@ (8001c80 <HAL_GPIO_Init+0x304>)
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	3302      	adds	r3, #2
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca0 <HAL_GPIO_Init+0x324>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bda:	4a31      	ldr	r2, [pc, #196]	@ (8001ca0 <HAL_GPIO_Init+0x324>)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001be0:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca0 <HAL_GPIO_Init+0x324>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c04:	4a26      	ldr	r2, [pc, #152]	@ (8001ca0 <HAL_GPIO_Init+0x324>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c0a:	4b25      	ldr	r3, [pc, #148]	@ (8001ca0 <HAL_GPIO_Init+0x324>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca0 <HAL_GPIO_Init+0x324>)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <HAL_GPIO_Init+0x324>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c58:	4a11      	ldr	r2, [pc, #68]	@ (8001ca0 <HAL_GPIO_Init+0x324>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	2b0f      	cmp	r3, #15
 8001c68:	f67f ae96 	bls.w	8001998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	3724      	adds	r7, #36	@ 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40013800 	.word	0x40013800
 8001c84:	40020000 	.word	0x40020000
 8001c88:	40020400 	.word	0x40020400
 8001c8c:	40020800 	.word	0x40020800
 8001c90:	40020c00 	.word	0x40020c00
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40021400 	.word	0x40021400
 8001c9c:	40021800 	.word	0x40021800
 8001ca0:	40013c00 	.word	0x40013c00

08001ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	807b      	strh	r3, [r7, #2]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cb4:	787b      	ldrb	r3, [r7, #1]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cba:	887a      	ldrh	r2, [r7, #2]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cc0:	e003      	b.n	8001cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cc2:	887b      	ldrh	r3, [r7, #2]
 8001cc4:	041a      	lsls	r2, r3, #16
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	619a      	str	r2, [r3, #24]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0cc      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cec:	4b68      	ldr	r3, [pc, #416]	@ (8001e90 <HAL_RCC_ClockConfig+0x1b8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 030f 	and.w	r3, r3, #15
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d90c      	bls.n	8001d14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfa:	4b65      	ldr	r3, [pc, #404]	@ (8001e90 <HAL_RCC_ClockConfig+0x1b8>)
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d02:	4b63      	ldr	r3, [pc, #396]	@ (8001e90 <HAL_RCC_ClockConfig+0x1b8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0b8      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d020      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d2c:	4b59      	ldr	r3, [pc, #356]	@ (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4a58      	ldr	r2, [pc, #352]	@ (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d44:	4b53      	ldr	r3, [pc, #332]	@ (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	4a52      	ldr	r2, [pc, #328]	@ (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d50:	4b50      	ldr	r3, [pc, #320]	@ (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	494d      	ldr	r1, [pc, #308]	@ (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d044      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	4b47      	ldr	r3, [pc, #284]	@ (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d119      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e07f      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d003      	beq.n	8001d96 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d96:	4b3f      	ldr	r3, [pc, #252]	@ (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e06f      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da6:	4b3b      	ldr	r3, [pc, #236]	@ (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e067      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db6:	4b37      	ldr	r3, [pc, #220]	@ (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f023 0203 	bic.w	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4934      	ldr	r1, [pc, #208]	@ (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dc8:	f7fe ff54 	bl	8000c74 <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7fe ff50 	bl	8000c74 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e04f      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 020c 	and.w	r2, r3, #12
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d1eb      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001df8:	4b25      	ldr	r3, [pc, #148]	@ (8001e90 <HAL_RCC_ClockConfig+0x1b8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 030f 	and.w	r3, r3, #15
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d20c      	bcs.n	8001e20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b22      	ldr	r3, [pc, #136]	@ (8001e90 <HAL_RCC_ClockConfig+0x1b8>)
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <HAL_RCC_ClockConfig+0x1b8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e032      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e2c:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4916      	ldr	r1, [pc, #88]	@ (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e4a:	4b12      	ldr	r3, [pc, #72]	@ (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	490e      	ldr	r1, [pc, #56]	@ (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e5e:	f000 f873 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001e62:	4602      	mov	r2, r0
 8001e64:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	490a      	ldr	r1, [pc, #40]	@ (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	5ccb      	ldrb	r3, [r1, r3]
 8001e72:	fa22 f303 	lsr.w	r3, r2, r3
 8001e76:	4a09      	ldr	r2, [pc, #36]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fd5a 	bl	8000938 <HAL_InitTick>

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023c00 	.word	0x40023c00
 8001e94:	40023800 	.word	0x40023800
 8001e98:	08005c38 	.word	0x08005c38
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	20000004 	.word	0x20000004

08001ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000000 	.word	0x20000000

08001ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ec0:	f7ff fff0 	bl	8001ea4 <HAL_RCC_GetHCLKFreq>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	0a9b      	lsrs	r3, r3, #10
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	4903      	ldr	r1, [pc, #12]	@ (8001ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed2:	5ccb      	ldrb	r3, [r1, r3]
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	08005c48 	.word	0x08005c48

08001ee4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ef4:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <HAL_RCC_GetClockConfig+0x5c>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0203 	and.w	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f00:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <HAL_RCC_GetClockConfig+0x5c>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <HAL_RCC_GetClockConfig+0x5c>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f18:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <HAL_RCC_GetClockConfig+0x5c>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	08db      	lsrs	r3, r3, #3
 8001f1e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f26:	4b07      	ldr	r3, [pc, #28]	@ (8001f44 <HAL_RCC_GetClockConfig+0x60>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 020f 	and.w	r2, r3, #15
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	601a      	str	r2, [r3, #0]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40023c00 	.word	0x40023c00

08001f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f4c:	b0ae      	sub	sp, #184	@ 0xb8
 8001f4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f6e:	4bcb      	ldr	r3, [pc, #812]	@ (800229c <HAL_RCC_GetSysClockFreq+0x354>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b0c      	cmp	r3, #12
 8001f78:	f200 8206 	bhi.w	8002388 <HAL_RCC_GetSysClockFreq+0x440>
 8001f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f84 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f82:	bf00      	nop
 8001f84:	08001fb9 	.word	0x08001fb9
 8001f88:	08002389 	.word	0x08002389
 8001f8c:	08002389 	.word	0x08002389
 8001f90:	08002389 	.word	0x08002389
 8001f94:	08001fc1 	.word	0x08001fc1
 8001f98:	08002389 	.word	0x08002389
 8001f9c:	08002389 	.word	0x08002389
 8001fa0:	08002389 	.word	0x08002389
 8001fa4:	08001fc9 	.word	0x08001fc9
 8001fa8:	08002389 	.word	0x08002389
 8001fac:	08002389 	.word	0x08002389
 8001fb0:	08002389 	.word	0x08002389
 8001fb4:	080021b9 	.word	0x080021b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fb8:	4bb9      	ldr	r3, [pc, #740]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fbe:	e1e7      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fc0:	4bb8      	ldr	r3, [pc, #736]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fc6:	e1e3      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fc8:	4bb4      	ldr	r3, [pc, #720]	@ (800229c <HAL_RCC_GetSysClockFreq+0x354>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fd4:	4bb1      	ldr	r3, [pc, #708]	@ (800229c <HAL_RCC_GetSysClockFreq+0x354>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d071      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe0:	4bae      	ldr	r3, [pc, #696]	@ (800229c <HAL_RCC_GetSysClockFreq+0x354>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	099b      	lsrs	r3, r3, #6
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001fec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001ff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002002:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002006:	4622      	mov	r2, r4
 8002008:	462b      	mov	r3, r5
 800200a:	f04f 0000 	mov.w	r0, #0
 800200e:	f04f 0100 	mov.w	r1, #0
 8002012:	0159      	lsls	r1, r3, #5
 8002014:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002018:	0150      	lsls	r0, r2, #5
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4621      	mov	r1, r4
 8002020:	1a51      	subs	r1, r2, r1
 8002022:	6439      	str	r1, [r7, #64]	@ 0x40
 8002024:	4629      	mov	r1, r5
 8002026:	eb63 0301 	sbc.w	r3, r3, r1
 800202a:	647b      	str	r3, [r7, #68]	@ 0x44
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002038:	4649      	mov	r1, r9
 800203a:	018b      	lsls	r3, r1, #6
 800203c:	4641      	mov	r1, r8
 800203e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002042:	4641      	mov	r1, r8
 8002044:	018a      	lsls	r2, r1, #6
 8002046:	4641      	mov	r1, r8
 8002048:	1a51      	subs	r1, r2, r1
 800204a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800204c:	4649      	mov	r1, r9
 800204e:	eb63 0301 	sbc.w	r3, r3, r1
 8002052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002060:	4649      	mov	r1, r9
 8002062:	00cb      	lsls	r3, r1, #3
 8002064:	4641      	mov	r1, r8
 8002066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800206a:	4641      	mov	r1, r8
 800206c:	00ca      	lsls	r2, r1, #3
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	4603      	mov	r3, r0
 8002074:	4622      	mov	r2, r4
 8002076:	189b      	adds	r3, r3, r2
 8002078:	633b      	str	r3, [r7, #48]	@ 0x30
 800207a:	462b      	mov	r3, r5
 800207c:	460a      	mov	r2, r1
 800207e:	eb42 0303 	adc.w	r3, r2, r3
 8002082:	637b      	str	r3, [r7, #52]	@ 0x34
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002090:	4629      	mov	r1, r5
 8002092:	024b      	lsls	r3, r1, #9
 8002094:	4621      	mov	r1, r4
 8002096:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800209a:	4621      	mov	r1, r4
 800209c:	024a      	lsls	r2, r1, #9
 800209e:	4610      	mov	r0, r2
 80020a0:	4619      	mov	r1, r3
 80020a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020a6:	2200      	movs	r2, #0
 80020a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80020b4:	f7fe f8ac 	bl	8000210 <__aeabi_uldivmod>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4613      	mov	r3, r2
 80020be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020c2:	e067      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c4:	4b75      	ldr	r3, [pc, #468]	@ (800229c <HAL_RCC_GetSysClockFreq+0x354>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	099b      	lsrs	r3, r3, #6
 80020ca:	2200      	movs	r2, #0
 80020cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020d0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80020d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020de:	2300      	movs	r3, #0
 80020e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80020e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80020e6:	4622      	mov	r2, r4
 80020e8:	462b      	mov	r3, r5
 80020ea:	f04f 0000 	mov.w	r0, #0
 80020ee:	f04f 0100 	mov.w	r1, #0
 80020f2:	0159      	lsls	r1, r3, #5
 80020f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020f8:	0150      	lsls	r0, r2, #5
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4621      	mov	r1, r4
 8002100:	1a51      	subs	r1, r2, r1
 8002102:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002104:	4629      	mov	r1, r5
 8002106:	eb63 0301 	sbc.w	r3, r3, r1
 800210a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002118:	4649      	mov	r1, r9
 800211a:	018b      	lsls	r3, r1, #6
 800211c:	4641      	mov	r1, r8
 800211e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002122:	4641      	mov	r1, r8
 8002124:	018a      	lsls	r2, r1, #6
 8002126:	4641      	mov	r1, r8
 8002128:	ebb2 0a01 	subs.w	sl, r2, r1
 800212c:	4649      	mov	r1, r9
 800212e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800213e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002142:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002146:	4692      	mov	sl, r2
 8002148:	469b      	mov	fp, r3
 800214a:	4623      	mov	r3, r4
 800214c:	eb1a 0303 	adds.w	r3, sl, r3
 8002150:	623b      	str	r3, [r7, #32]
 8002152:	462b      	mov	r3, r5
 8002154:	eb4b 0303 	adc.w	r3, fp, r3
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002166:	4629      	mov	r1, r5
 8002168:	028b      	lsls	r3, r1, #10
 800216a:	4621      	mov	r1, r4
 800216c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002170:	4621      	mov	r1, r4
 8002172:	028a      	lsls	r2, r1, #10
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800217c:	2200      	movs	r2, #0
 800217e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002180:	677a      	str	r2, [r7, #116]	@ 0x74
 8002182:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002186:	f7fe f843 	bl	8000210 <__aeabi_uldivmod>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4613      	mov	r3, r2
 8002190:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002194:	4b41      	ldr	r3, [pc, #260]	@ (800229c <HAL_RCC_GetSysClockFreq+0x354>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	0c1b      	lsrs	r3, r3, #16
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	3301      	adds	r3, #1
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80021a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021b6:	e0eb      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021b8:	4b38      	ldr	r3, [pc, #224]	@ (800229c <HAL_RCC_GetSysClockFreq+0x354>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021c4:	4b35      	ldr	r3, [pc, #212]	@ (800229c <HAL_RCC_GetSysClockFreq+0x354>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d06b      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d0:	4b32      	ldr	r3, [pc, #200]	@ (800229c <HAL_RCC_GetSysClockFreq+0x354>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	099b      	lsrs	r3, r3, #6
 80021d6:	2200      	movs	r2, #0
 80021d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80021dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80021e4:	2300      	movs	r3, #0
 80021e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80021e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80021ec:	4622      	mov	r2, r4
 80021ee:	462b      	mov	r3, r5
 80021f0:	f04f 0000 	mov.w	r0, #0
 80021f4:	f04f 0100 	mov.w	r1, #0
 80021f8:	0159      	lsls	r1, r3, #5
 80021fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021fe:	0150      	lsls	r0, r2, #5
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4621      	mov	r1, r4
 8002206:	1a51      	subs	r1, r2, r1
 8002208:	61b9      	str	r1, [r7, #24]
 800220a:	4629      	mov	r1, r5
 800220c:	eb63 0301 	sbc.w	r3, r3, r1
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800221e:	4659      	mov	r1, fp
 8002220:	018b      	lsls	r3, r1, #6
 8002222:	4651      	mov	r1, sl
 8002224:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002228:	4651      	mov	r1, sl
 800222a:	018a      	lsls	r2, r1, #6
 800222c:	4651      	mov	r1, sl
 800222e:	ebb2 0801 	subs.w	r8, r2, r1
 8002232:	4659      	mov	r1, fp
 8002234:	eb63 0901 	sbc.w	r9, r3, r1
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002244:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002248:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800224c:	4690      	mov	r8, r2
 800224e:	4699      	mov	r9, r3
 8002250:	4623      	mov	r3, r4
 8002252:	eb18 0303 	adds.w	r3, r8, r3
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	462b      	mov	r3, r5
 800225a:	eb49 0303 	adc.w	r3, r9, r3
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800226c:	4629      	mov	r1, r5
 800226e:	024b      	lsls	r3, r1, #9
 8002270:	4621      	mov	r1, r4
 8002272:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002276:	4621      	mov	r1, r4
 8002278:	024a      	lsls	r2, r1, #9
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002282:	2200      	movs	r2, #0
 8002284:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002286:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002288:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800228c:	f7fd ffc0 	bl	8000210 <__aeabi_uldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4613      	mov	r3, r2
 8002296:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800229a:	e065      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x420>
 800229c:	40023800 	.word	0x40023800
 80022a0:	00f42400 	.word	0x00f42400
 80022a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a8:	4b3d      	ldr	r3, [pc, #244]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x458>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	2200      	movs	r2, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	4611      	mov	r1, r2
 80022b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80022ba:	2300      	movs	r3, #0
 80022bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80022be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80022c2:	4642      	mov	r2, r8
 80022c4:	464b      	mov	r3, r9
 80022c6:	f04f 0000 	mov.w	r0, #0
 80022ca:	f04f 0100 	mov.w	r1, #0
 80022ce:	0159      	lsls	r1, r3, #5
 80022d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022d4:	0150      	lsls	r0, r2, #5
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4641      	mov	r1, r8
 80022dc:	1a51      	subs	r1, r2, r1
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	4649      	mov	r1, r9
 80022e2:	eb63 0301 	sbc.w	r3, r3, r1
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80022f4:	4659      	mov	r1, fp
 80022f6:	018b      	lsls	r3, r1, #6
 80022f8:	4651      	mov	r1, sl
 80022fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022fe:	4651      	mov	r1, sl
 8002300:	018a      	lsls	r2, r1, #6
 8002302:	4651      	mov	r1, sl
 8002304:	1a54      	subs	r4, r2, r1
 8002306:	4659      	mov	r1, fp
 8002308:	eb63 0501 	sbc.w	r5, r3, r1
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	00eb      	lsls	r3, r5, #3
 8002316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800231a:	00e2      	lsls	r2, r4, #3
 800231c:	4614      	mov	r4, r2
 800231e:	461d      	mov	r5, r3
 8002320:	4643      	mov	r3, r8
 8002322:	18e3      	adds	r3, r4, r3
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	464b      	mov	r3, r9
 8002328:	eb45 0303 	adc.w	r3, r5, r3
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800233a:	4629      	mov	r1, r5
 800233c:	028b      	lsls	r3, r1, #10
 800233e:	4621      	mov	r1, r4
 8002340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002344:	4621      	mov	r1, r4
 8002346:	028a      	lsls	r2, r1, #10
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002350:	2200      	movs	r2, #0
 8002352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002354:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002356:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800235a:	f7fd ff59 	bl	8000210 <__aeabi_uldivmod>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4613      	mov	r3, r2
 8002364:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002368:	4b0d      	ldr	r3, [pc, #52]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	0f1b      	lsrs	r3, r3, #28
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002376:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800237a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800237e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002382:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002386:	e003      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002388:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800238a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800238e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002390:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002394:	4618      	mov	r0, r3
 8002396:	37b8      	adds	r7, #184	@ 0xb8
 8002398:	46bd      	mov	sp, r7
 800239a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800
 80023a4:	00f42400 	.word	0x00f42400

080023a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e28d      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8083 	beq.w	80024ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023c8:	4b94      	ldr	r3, [pc, #592]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d019      	beq.n	8002408 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023d4:	4b91      	ldr	r3, [pc, #580]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 030c 	and.w	r3, r3, #12
        || \
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d106      	bne.n	80023ee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023e0:	4b8e      	ldr	r3, [pc, #568]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ec:	d00c      	beq.n	8002408 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ee:	4b8b      	ldr	r3, [pc, #556]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023f6:	2b0c      	cmp	r3, #12
 80023f8:	d112      	bne.n	8002420 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023fa:	4b88      	ldr	r3, [pc, #544]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002402:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002406:	d10b      	bne.n	8002420 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	4b84      	ldr	r3, [pc, #528]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d05b      	beq.n	80024cc <HAL_RCC_OscConfig+0x124>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d157      	bne.n	80024cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e25a      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002428:	d106      	bne.n	8002438 <HAL_RCC_OscConfig+0x90>
 800242a:	4b7c      	ldr	r3, [pc, #496]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a7b      	ldr	r2, [pc, #492]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e01d      	b.n	8002474 <HAL_RCC_OscConfig+0xcc>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0xb4>
 8002442:	4b76      	ldr	r3, [pc, #472]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a75      	ldr	r2, [pc, #468]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b73      	ldr	r3, [pc, #460]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a72      	ldr	r2, [pc, #456]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0xcc>
 800245c:	4b6f      	ldr	r3, [pc, #444]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a6e      	ldr	r2, [pc, #440]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b6c      	ldr	r3, [pc, #432]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a6b      	ldr	r2, [pc, #428]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 800246e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d013      	beq.n	80024a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7fe fbfa 	bl	8000c74 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002484:	f7fe fbf6 	bl	8000c74 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	@ 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e21f      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	4b61      	ldr	r3, [pc, #388]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0xdc>
 80024a2:	e014      	b.n	80024ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fbe6 	bl	8000c74 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7fe fbe2 	bl	8000c74 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	@ 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e20b      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024be:	4b57      	ldr	r3, [pc, #348]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x104>
 80024ca:	e000      	b.n	80024ce <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d06f      	beq.n	80025ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024da:	4b50      	ldr	r3, [pc, #320]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d017      	beq.n	8002516 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80024e6:	4b4d      	ldr	r3, [pc, #308]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
        || \
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d105      	bne.n	80024fe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80024f2:	4b4a      	ldr	r3, [pc, #296]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00b      	beq.n	8002516 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024fe:	4b47      	ldr	r3, [pc, #284]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002506:	2b0c      	cmp	r3, #12
 8002508:	d11c      	bne.n	8002544 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250a:	4b44      	ldr	r3, [pc, #272]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d116      	bne.n	8002544 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	4b41      	ldr	r3, [pc, #260]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_RCC_OscConfig+0x186>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d001      	beq.n	800252e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e1d3      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252e:	4b3b      	ldr	r3, [pc, #236]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4937      	ldr	r1, [pc, #220]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	e03a      	b.n	80025ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800254c:	4b34      	ldr	r3, [pc, #208]	@ (8002620 <HAL_RCC_OscConfig+0x278>)
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002552:	f7fe fb8f 	bl	8000c74 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255a:	f7fe fb8b 	bl	8000c74 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e1b4      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256c:	4b2b      	ldr	r3, [pc, #172]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	4b28      	ldr	r3, [pc, #160]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4925      	ldr	r1, [pc, #148]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]
 800258c:	e015      	b.n	80025ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258e:	4b24      	ldr	r3, [pc, #144]	@ (8002620 <HAL_RCC_OscConfig+0x278>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7fe fb6e 	bl	8000c74 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259c:	f7fe fb6a 	bl	8000c74 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e193      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	4b1b      	ldr	r3, [pc, #108]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d036      	beq.n	8002634 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d016      	beq.n	80025fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ce:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7fe fb4e 	bl	8000c74 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025dc:	f7fe fb4a 	bl	8000c74 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e173      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ee:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80025f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x234>
 80025fa:	e01b      	b.n	8002634 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025fc:	4b09      	ldr	r3, [pc, #36]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002602:	f7fe fb37 	bl	8000c74 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002608:	e00e      	b.n	8002628 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800260a:	f7fe fb33 	bl	8000c74 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d907      	bls.n	8002628 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e15c      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
 800261c:	40023800 	.word	0x40023800
 8002620:	42470000 	.word	0x42470000
 8002624:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002628:	4b8a      	ldr	r3, [pc, #552]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 800262a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1ea      	bne.n	800260a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 8097 	beq.w	8002770 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002646:	4b83      	ldr	r3, [pc, #524]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10f      	bne.n	8002672 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	4b7f      	ldr	r3, [pc, #508]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	4a7e      	ldr	r2, [pc, #504]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 800265c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002660:	6413      	str	r3, [r2, #64]	@ 0x40
 8002662:	4b7c      	ldr	r3, [pc, #496]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800266e:	2301      	movs	r3, #1
 8002670:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002672:	4b79      	ldr	r3, [pc, #484]	@ (8002858 <HAL_RCC_OscConfig+0x4b0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d118      	bne.n	80026b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800267e:	4b76      	ldr	r3, [pc, #472]	@ (8002858 <HAL_RCC_OscConfig+0x4b0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a75      	ldr	r2, [pc, #468]	@ (8002858 <HAL_RCC_OscConfig+0x4b0>)
 8002684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268a:	f7fe faf3 	bl	8000c74 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002692:	f7fe faef 	bl	8000c74 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e118      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002858 <HAL_RCC_OscConfig+0x4b0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d106      	bne.n	80026c6 <HAL_RCC_OscConfig+0x31e>
 80026b8:	4b66      	ldr	r3, [pc, #408]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026bc:	4a65      	ldr	r2, [pc, #404]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c4:	e01c      	b.n	8002700 <HAL_RCC_OscConfig+0x358>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d10c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x340>
 80026ce:	4b61      	ldr	r3, [pc, #388]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d2:	4a60      	ldr	r2, [pc, #384]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026d4:	f043 0304 	orr.w	r3, r3, #4
 80026d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026da:	4b5e      	ldr	r3, [pc, #376]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026de:	4a5d      	ldr	r2, [pc, #372]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e6:	e00b      	b.n	8002700 <HAL_RCC_OscConfig+0x358>
 80026e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ec:	4a59      	ldr	r2, [pc, #356]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f4:	4b57      	ldr	r3, [pc, #348]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f8:	4a56      	ldr	r2, [pc, #344]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026fa:	f023 0304 	bic.w	r3, r3, #4
 80026fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d015      	beq.n	8002734 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002708:	f7fe fab4 	bl	8000c74 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270e:	e00a      	b.n	8002726 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002710:	f7fe fab0 	bl	8000c74 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e0d7      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002726:	4b4b      	ldr	r3, [pc, #300]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0ee      	beq.n	8002710 <HAL_RCC_OscConfig+0x368>
 8002732:	e014      	b.n	800275e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7fe fa9e 	bl	8000c74 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273a:	e00a      	b.n	8002752 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273c:	f7fe fa9a 	bl	8000c74 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e0c1      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002752:	4b40      	ldr	r3, [pc, #256]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1ee      	bne.n	800273c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800275e:	7dfb      	ldrb	r3, [r7, #23]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d105      	bne.n	8002770 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002764:	4b3b      	ldr	r3, [pc, #236]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002768:	4a3a      	ldr	r2, [pc, #232]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 800276a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800276e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80ad 	beq.w	80028d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800277a:	4b36      	ldr	r3, [pc, #216]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b08      	cmp	r3, #8
 8002784:	d060      	beq.n	8002848 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d145      	bne.n	800281a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278e:	4b33      	ldr	r3, [pc, #204]	@ (800285c <HAL_RCC_OscConfig+0x4b4>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fe fa6e 	bl	8000c74 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279c:	f7fe fa6a 	bl	8000c74 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e093      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ae:	4b29      	ldr	r3, [pc, #164]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	019b      	lsls	r3, r3, #6
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	3b01      	subs	r3, #1
 80027d4:	041b      	lsls	r3, r3, #16
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027dc:	061b      	lsls	r3, r3, #24
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e4:	071b      	lsls	r3, r3, #28
 80027e6:	491b      	ldr	r1, [pc, #108]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ec:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <HAL_RCC_OscConfig+0x4b4>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f2:	f7fe fa3f 	bl	8000c74 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fe fa3b 	bl	8000c74 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e064      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280c:	4b11      	ldr	r3, [pc, #68]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x452>
 8002818:	e05c      	b.n	80028d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	4b10      	ldr	r3, [pc, #64]	@ (800285c <HAL_RCC_OscConfig+0x4b4>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7fe fa28 	bl	8000c74 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002828:	f7fe fa24 	bl	8000c74 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e04d      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x480>
 8002846:	e045      	b.n	80028d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d107      	bne.n	8002860 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e040      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
 8002854:	40023800 	.word	0x40023800
 8002858:	40007000 	.word	0x40007000
 800285c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002860:	4b1f      	ldr	r3, [pc, #124]	@ (80028e0 <HAL_RCC_OscConfig+0x538>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d030      	beq.n	80028d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d129      	bne.n	80028d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002886:	429a      	cmp	r2, r3
 8002888:	d122      	bne.n	80028d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002890:	4013      	ands	r3, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002896:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002898:	4293      	cmp	r3, r2
 800289a:	d119      	bne.n	80028d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	3b01      	subs	r3, #1
 80028aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d10f      	bne.n	80028d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800

080028e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e041      	b.n	800297a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f839 	bl	8002982 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f000 f9c0 	bl	8002ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d001      	beq.n	80029b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e04e      	b.n	8002a4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a23      	ldr	r2, [pc, #140]	@ (8002a5c <HAL_TIM_Base_Start_IT+0xc4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d022      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029da:	d01d      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a60 <HAL_TIM_Base_Start_IT+0xc8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d018      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002a64 <HAL_TIM_Base_Start_IT+0xcc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d013      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a68 <HAL_TIM_Base_Start_IT+0xd0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00e      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1b      	ldr	r2, [pc, #108]	@ (8002a6c <HAL_TIM_Base_Start_IT+0xd4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d009      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a19      	ldr	r2, [pc, #100]	@ (8002a70 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d004      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a18      	ldr	r2, [pc, #96]	@ (8002a74 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d111      	bne.n	8002a3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d010      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0201 	orr.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3a:	e007      	b.n	8002a4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	40000400 	.word	0x40000400
 8002a64:	40000800 	.word	0x40000800
 8002a68:	40000c00 	.word	0x40000c00
 8002a6c:	40010400 	.word	0x40010400
 8002a70:	40014000 	.word	0x40014000
 8002a74:	40001800 	.word	0x40001800

08002a78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d020      	beq.n	8002adc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01b      	beq.n	8002adc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0202 	mvn.w	r2, #2
 8002aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f8d2 	bl	8002c6c <HAL_TIM_IC_CaptureCallback>
 8002ac8:	e005      	b.n	8002ad6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f8c4 	bl	8002c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f8d5 	bl	8002c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d020      	beq.n	8002b28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01b      	beq.n	8002b28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0204 	mvn.w	r2, #4
 8002af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2202      	movs	r2, #2
 8002afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f8ac 	bl	8002c6c <HAL_TIM_IC_CaptureCallback>
 8002b14:	e005      	b.n	8002b22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f89e 	bl	8002c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f8af 	bl	8002c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d020      	beq.n	8002b74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01b      	beq.n	8002b74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0208 	mvn.w	r2, #8
 8002b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f886 	bl	8002c6c <HAL_TIM_IC_CaptureCallback>
 8002b60:	e005      	b.n	8002b6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f878 	bl	8002c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f889 	bl	8002c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d020      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01b      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0210 	mvn.w	r2, #16
 8002b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2208      	movs	r2, #8
 8002b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f860 	bl	8002c6c <HAL_TIM_IC_CaptureCallback>
 8002bac:	e005      	b.n	8002bba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f852 	bl	8002c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f863 	bl	8002c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00c      	beq.n	8002be4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0201 	mvn.w	r2, #1
 8002bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fd fe10 	bl	8000804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00c      	beq.n	8002c08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f900 	bl	8002e08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00c      	beq.n	8002c2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f834 	bl	8002c94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00c      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0220 	mvn.w	r2, #32
 8002c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f8d2 	bl	8002df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a43      	ldr	r2, [pc, #268]	@ (8002dc8 <TIM_Base_SetConfig+0x120>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d013      	beq.n	8002ce8 <TIM_Base_SetConfig+0x40>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc6:	d00f      	beq.n	8002ce8 <TIM_Base_SetConfig+0x40>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a40      	ldr	r2, [pc, #256]	@ (8002dcc <TIM_Base_SetConfig+0x124>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00b      	beq.n	8002ce8 <TIM_Base_SetConfig+0x40>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a3f      	ldr	r2, [pc, #252]	@ (8002dd0 <TIM_Base_SetConfig+0x128>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d007      	beq.n	8002ce8 <TIM_Base_SetConfig+0x40>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a3e      	ldr	r2, [pc, #248]	@ (8002dd4 <TIM_Base_SetConfig+0x12c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d003      	beq.n	8002ce8 <TIM_Base_SetConfig+0x40>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a3d      	ldr	r2, [pc, #244]	@ (8002dd8 <TIM_Base_SetConfig+0x130>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d108      	bne.n	8002cfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a32      	ldr	r2, [pc, #200]	@ (8002dc8 <TIM_Base_SetConfig+0x120>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d02b      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d08:	d027      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a2f      	ldr	r2, [pc, #188]	@ (8002dcc <TIM_Base_SetConfig+0x124>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d023      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a2e      	ldr	r2, [pc, #184]	@ (8002dd0 <TIM_Base_SetConfig+0x128>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d01f      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a2d      	ldr	r2, [pc, #180]	@ (8002dd4 <TIM_Base_SetConfig+0x12c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01b      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd8 <TIM_Base_SetConfig+0x130>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d017      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ddc <TIM_Base_SetConfig+0x134>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d013      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a2a      	ldr	r2, [pc, #168]	@ (8002de0 <TIM_Base_SetConfig+0x138>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00f      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a29      	ldr	r2, [pc, #164]	@ (8002de4 <TIM_Base_SetConfig+0x13c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00b      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a28      	ldr	r2, [pc, #160]	@ (8002de8 <TIM_Base_SetConfig+0x140>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d007      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a27      	ldr	r2, [pc, #156]	@ (8002dec <TIM_Base_SetConfig+0x144>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d003      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a26      	ldr	r2, [pc, #152]	@ (8002df0 <TIM_Base_SetConfig+0x148>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d108      	bne.n	8002d6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a0e      	ldr	r2, [pc, #56]	@ (8002dc8 <TIM_Base_SetConfig+0x120>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d003      	beq.n	8002d9a <TIM_Base_SetConfig+0xf2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a10      	ldr	r2, [pc, #64]	@ (8002dd8 <TIM_Base_SetConfig+0x130>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d103      	bne.n	8002da2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	691a      	ldr	r2, [r3, #16]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f043 0204 	orr.w	r2, r3, #4
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	601a      	str	r2, [r3, #0]
}
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	40000400 	.word	0x40000400
 8002dd0:	40000800 	.word	0x40000800
 8002dd4:	40000c00 	.word	0x40000c00
 8002dd8:	40010400 	.word	0x40010400
 8002ddc:	40014000 	.word	0x40014000
 8002de0:	40014400 	.word	0x40014400
 8002de4:	40014800 	.word	0x40014800
 8002de8:	40001800 	.word	0x40001800
 8002dec:	40001c00 	.word	0x40001c00
 8002df0:	40002000 	.word	0x40002000

08002df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <__NVIC_SetPriority>:
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	6039      	str	r1, [r7, #0]
 8002e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	db0a      	blt.n	8002e46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	490c      	ldr	r1, [pc, #48]	@ (8002e68 <__NVIC_SetPriority+0x4c>)
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	0112      	lsls	r2, r2, #4
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	440b      	add	r3, r1
 8002e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002e44:	e00a      	b.n	8002e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	4908      	ldr	r1, [pc, #32]	@ (8002e6c <__NVIC_SetPriority+0x50>)
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	3b04      	subs	r3, #4
 8002e54:	0112      	lsls	r2, r2, #4
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	440b      	add	r3, r1
 8002e5a:	761a      	strb	r2, [r3, #24]
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	e000e100 	.word	0xe000e100
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002e74:	4b05      	ldr	r3, [pc, #20]	@ (8002e8c <SysTick_Handler+0x1c>)
 8002e76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002e78:	f001 fd46 	bl	8004908 <xTaskGetSchedulerState>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d001      	beq.n	8002e86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002e82:	f002 fb41 	bl	8005508 <xPortSysTickHandler>
  }
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	e000e010 	.word	0xe000e010

08002e90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002e94:	2100      	movs	r1, #0
 8002e96:	f06f 0004 	mvn.w	r0, #4
 8002e9a:	f7ff ffbf 	bl	8002e1c <__NVIC_SetPriority>
#endif
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eaa:	f3ef 8305 	mrs	r3, IPSR
 8002eae:	603b      	str	r3, [r7, #0]
  return(result);
 8002eb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002eb6:	f06f 0305 	mvn.w	r3, #5
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	e00c      	b.n	8002ed8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee8 <osKernelInitialize+0x44>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d105      	bne.n	8002ed2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002ec6:	4b08      	ldr	r3, [pc, #32]	@ (8002ee8 <osKernelInitialize+0x44>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	e002      	b.n	8002ed8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002ed2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ed6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ed8:	687b      	ldr	r3, [r7, #4]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	200000f4 	.word	0x200000f4

08002eec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ef2:	f3ef 8305 	mrs	r3, IPSR
 8002ef6:	603b      	str	r3, [r7, #0]
  return(result);
 8002ef8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002efe:	f06f 0305 	mvn.w	r3, #5
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	e010      	b.n	8002f28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002f06:	4b0b      	ldr	r3, [pc, #44]	@ (8002f34 <osKernelStart+0x48>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d109      	bne.n	8002f22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002f0e:	f7ff ffbf 	bl	8002e90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002f12:	4b08      	ldr	r3, [pc, #32]	@ (8002f34 <osKernelStart+0x48>)
 8002f14:	2202      	movs	r2, #2
 8002f16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002f18:	f001 f892 	bl	8004040 <vTaskStartScheduler>
      stat = osOK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	607b      	str	r3, [r7, #4]
 8002f20:	e002      	b.n	8002f28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f28:	687b      	ldr	r3, [r7, #4]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	200000f4 	.word	0x200000f4

08002f38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08e      	sub	sp, #56	@ 0x38
 8002f3c:	af04      	add	r7, sp, #16
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f48:	f3ef 8305 	mrs	r3, IPSR
 8002f4c:	617b      	str	r3, [r7, #20]
  return(result);
 8002f4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d17e      	bne.n	8003052 <osThreadNew+0x11a>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d07b      	beq.n	8003052 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002f5a:	2380      	movs	r3, #128	@ 0x80
 8002f5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002f5e:	2318      	movs	r3, #24
 8002f60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d045      	beq.n	8002ffe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <osThreadNew+0x48>
        name = attr->name;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <osThreadNew+0x6e>
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	2b38      	cmp	r3, #56	@ 0x38
 8002f98:	d805      	bhi.n	8002fa6 <osThreadNew+0x6e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <osThreadNew+0x72>
        return (NULL);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e054      	b.n	8003054 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00e      	beq.n	8002fe0 <osThreadNew+0xa8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2ba7      	cmp	r3, #167	@ 0xa7
 8002fc8:	d90a      	bls.n	8002fe0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d006      	beq.n	8002fe0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <osThreadNew+0xa8>
        mem = 1;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	e010      	b.n	8003002 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10c      	bne.n	8003002 <osThreadNew+0xca>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d108      	bne.n	8003002 <osThreadNew+0xca>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d104      	bne.n	8003002 <osThreadNew+0xca>
          mem = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	e001      	b.n	8003002 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d110      	bne.n	800302a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003010:	9202      	str	r2, [sp, #8]
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	6a3a      	ldr	r2, [r7, #32]
 800301c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 fe1a 	bl	8003c58 <xTaskCreateStatic>
 8003024:	4603      	mov	r3, r0
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	e013      	b.n	8003052 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d110      	bne.n	8003052 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	b29a      	uxth	r2, r3
 8003034:	f107 0310 	add.w	r3, r7, #16
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 fe68 	bl	8003d18 <xTaskCreate>
 8003048:	4603      	mov	r3, r0
 800304a:	2b01      	cmp	r3, #1
 800304c:	d001      	beq.n	8003052 <osThreadNew+0x11a>
            hTask = NULL;
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003052:	693b      	ldr	r3, [r7, #16]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3728      	adds	r7, #40	@ 0x28
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003064:	f3ef 8305 	mrs	r3, IPSR
 8003068:	60bb      	str	r3, [r7, #8]
  return(result);
 800306a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <osDelay+0x1c>
    stat = osErrorISR;
 8003070:	f06f 0305 	mvn.w	r3, #5
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	e007      	b.n	8003088 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 ffa6 	bl	8003fd4 <vTaskDelay>
    }
  }

  return (stat);
 8003088:	68fb      	ldr	r3, [r7, #12]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4a07      	ldr	r2, [pc, #28]	@ (80030c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80030a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	4a06      	ldr	r2, [pc, #24]	@ (80030c4 <vApplicationGetIdleTaskMemory+0x30>)
 80030aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2280      	movs	r2, #128	@ 0x80
 80030b0:	601a      	str	r2, [r3, #0]
}
 80030b2:	bf00      	nop
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	200000f8 	.word	0x200000f8
 80030c4:	200001a0 	.word	0x200001a0

080030c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a07      	ldr	r2, [pc, #28]	@ (80030f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80030d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	4a06      	ldr	r2, [pc, #24]	@ (80030f8 <vApplicationGetTimerTaskMemory+0x30>)
 80030de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030e6:	601a      	str	r2, [r3, #0]
}
 80030e8:	bf00      	nop
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	200003a0 	.word	0x200003a0
 80030f8:	20000448 	.word	0x20000448

080030fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f103 0208 	add.w	r2, r3, #8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003114:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f103 0208 	add.w	r2, r3, #8
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f103 0208 	add.w	r2, r3, #8
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003156:	b480      	push	{r7}
 8003158:	b085      	sub	sp, #20
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031b4:	d103      	bne.n	80031be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	e00c      	b.n	80031d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3308      	adds	r3, #8
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	e002      	b.n	80031cc <vListInsert+0x2e>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d2f6      	bcs.n	80031c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	601a      	str	r2, [r3, #0]
}
 8003204:	bf00      	nop
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6892      	ldr	r2, [r2, #8]
 8003226:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6852      	ldr	r2, [r2, #4]
 8003230:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	429a      	cmp	r2, r3
 800323a:	d103      	bne.n	8003244 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	1e5a      	subs	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10b      	bne.n	8003290 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800328a:	bf00      	nop
 800328c:	bf00      	nop
 800328e:	e7fd      	b.n	800328c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003290:	f002 f8aa 	bl	80053e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329c:	68f9      	ldr	r1, [r7, #12]
 800329e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	441a      	add	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c0:	3b01      	subs	r3, #1
 80032c2:	68f9      	ldr	r1, [r7, #12]
 80032c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	441a      	add	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	22ff      	movs	r2, #255	@ 0xff
 80032d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	22ff      	movs	r2, #255	@ 0xff
 80032dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d114      	bne.n	8003310 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01a      	beq.n	8003324 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3310      	adds	r3, #16
 80032f2:	4618      	mov	r0, r3
 80032f4:	f001 f942 	bl	800457c <xTaskRemoveFromEventList>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d012      	beq.n	8003324 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80032fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003334 <xQueueGenericReset+0xd0>)
 8003300:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	e009      	b.n	8003324 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	3310      	adds	r3, #16
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fef1 	bl	80030fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3324      	adds	r3, #36	@ 0x24
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff feec 	bl	80030fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003324:	f002 f892 	bl	800544c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003328:	2301      	movs	r3, #1
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	e000ed04 	.word	0xe000ed04

08003338 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08e      	sub	sp, #56	@ 0x38
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10b      	bne.n	8003364 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800334c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800335e:	bf00      	nop
 8003360:	bf00      	nop
 8003362:	e7fd      	b.n	8003360 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10b      	bne.n	8003382 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800336a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	e7fd      	b.n	800337e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <xQueueGenericCreateStatic+0x56>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <xQueueGenericCreateStatic+0x5a>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <xQueueGenericCreateStatic+0x5c>
 8003392:	2300      	movs	r3, #0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	623b      	str	r3, [r7, #32]
}
 80033aa:	bf00      	nop
 80033ac:	bf00      	nop
 80033ae:	e7fd      	b.n	80033ac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <xQueueGenericCreateStatic+0x84>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <xQueueGenericCreateStatic+0x88>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <xQueueGenericCreateStatic+0x8a>
 80033c0:	2300      	movs	r3, #0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10b      	bne.n	80033de <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80033c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ca:	f383 8811 	msr	BASEPRI, r3
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	61fb      	str	r3, [r7, #28]
}
 80033d8:	bf00      	nop
 80033da:	bf00      	nop
 80033dc:	e7fd      	b.n	80033da <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80033de:	2350      	movs	r3, #80	@ 0x50
 80033e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b50      	cmp	r3, #80	@ 0x50
 80033e6:	d00b      	beq.n	8003400 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80033e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	61bb      	str	r3, [r7, #24]
}
 80033fa:	bf00      	nop
 80033fc:	bf00      	nop
 80033fe:	e7fd      	b.n	80033fc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003400:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00d      	beq.n	8003428 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800340c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003414:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f805 	bl	8003432 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800342a:	4618      	mov	r0, r3
 800342c:	3730      	adds	r7, #48	@ 0x30
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b084      	sub	sp, #16
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	607a      	str	r2, [r7, #4]
 800343e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d103      	bne.n	800344e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	e002      	b.n	8003454 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003460:	2101      	movs	r1, #1
 8003462:	69b8      	ldr	r0, [r7, #24]
 8003464:	f7ff fefe 	bl	8003264 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	78fa      	ldrb	r2, [r7, #3]
 800346c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003470:	bf00      	nop
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08e      	sub	sp, #56	@ 0x38
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003486:	2300      	movs	r3, #0
 8003488:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800348e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10b      	bne.n	80034ac <xQueueGenericSend+0x34>
	__asm volatile
 8003494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80034a6:	bf00      	nop
 80034a8:	bf00      	nop
 80034aa:	e7fd      	b.n	80034a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d103      	bne.n	80034ba <xQueueGenericSend+0x42>
 80034b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <xQueueGenericSend+0x46>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <xQueueGenericSend+0x48>
 80034be:	2300      	movs	r3, #0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10b      	bne.n	80034dc <xQueueGenericSend+0x64>
	__asm volatile
 80034c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80034d6:	bf00      	nop
 80034d8:	bf00      	nop
 80034da:	e7fd      	b.n	80034d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d103      	bne.n	80034ea <xQueueGenericSend+0x72>
 80034e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <xQueueGenericSend+0x76>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <xQueueGenericSend+0x78>
 80034ee:	2300      	movs	r3, #0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10b      	bne.n	800350c <xQueueGenericSend+0x94>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	623b      	str	r3, [r7, #32]
}
 8003506:	bf00      	nop
 8003508:	bf00      	nop
 800350a:	e7fd      	b.n	8003508 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800350c:	f001 f9fc 	bl	8004908 <xTaskGetSchedulerState>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d102      	bne.n	800351c <xQueueGenericSend+0xa4>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <xQueueGenericSend+0xa8>
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <xQueueGenericSend+0xaa>
 8003520:	2300      	movs	r3, #0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10b      	bne.n	800353e <xQueueGenericSend+0xc6>
	__asm volatile
 8003526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	61fb      	str	r3, [r7, #28]
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	e7fd      	b.n	800353a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800353e:	f001 ff53 	bl	80053e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003544:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800354a:	429a      	cmp	r2, r3
 800354c:	d302      	bcc.n	8003554 <xQueueGenericSend+0xdc>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d129      	bne.n	80035a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	68b9      	ldr	r1, [r7, #8]
 8003558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800355a:	f000 fa0f 	bl	800397c <prvCopyDataToQueue>
 800355e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	2b00      	cmp	r3, #0
 8003566:	d010      	beq.n	800358a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356a:	3324      	adds	r3, #36	@ 0x24
 800356c:	4618      	mov	r0, r3
 800356e:	f001 f805 	bl	800457c <xTaskRemoveFromEventList>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003578:	4b3f      	ldr	r3, [pc, #252]	@ (8003678 <xQueueGenericSend+0x200>)
 800357a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	e00a      	b.n	80035a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800358a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d007      	beq.n	80035a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003590:	4b39      	ldr	r3, [pc, #228]	@ (8003678 <xQueueGenericSend+0x200>)
 8003592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80035a0:	f001 ff54 	bl	800544c <vPortExitCritical>
				return pdPASS;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e063      	b.n	8003670 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d103      	bne.n	80035b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035ae:	f001 ff4d 	bl	800544c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e05c      	b.n	8003670 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d106      	bne.n	80035ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	4618      	mov	r0, r3
 80035c2:	f001 f83f 	bl	8004644 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035c6:	2301      	movs	r3, #1
 80035c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035ca:	f001 ff3f 	bl	800544c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035ce:	f000 fda7 	bl	8004120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035d2:	f001 ff09 	bl	80053e8 <vPortEnterCritical>
 80035d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035dc:	b25b      	sxtb	r3, r3
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035e2:	d103      	bne.n	80035ec <xQueueGenericSend+0x174>
 80035e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035f2:	b25b      	sxtb	r3, r3
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035f8:	d103      	bne.n	8003602 <xQueueGenericSend+0x18a>
 80035fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003602:	f001 ff23 	bl	800544c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003606:	1d3a      	adds	r2, r7, #4
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	4611      	mov	r1, r2
 800360e:	4618      	mov	r0, r3
 8003610:	f001 f82e 	bl	8004670 <xTaskCheckForTimeOut>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d124      	bne.n	8003664 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800361a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800361c:	f000 faa6 	bl	8003b6c <prvIsQueueFull>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d018      	beq.n	8003658 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003628:	3310      	adds	r3, #16
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4611      	mov	r1, r2
 800362e:	4618      	mov	r0, r3
 8003630:	f000 ff52 	bl	80044d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003634:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003636:	f000 fa31 	bl	8003a9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800363a:	f000 fd7f 	bl	800413c <xTaskResumeAll>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	f47f af7c 	bne.w	800353e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003646:	4b0c      	ldr	r3, [pc, #48]	@ (8003678 <xQueueGenericSend+0x200>)
 8003648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	f3bf 8f6f 	isb	sy
 8003656:	e772      	b.n	800353e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003658:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800365a:	f000 fa1f 	bl	8003a9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800365e:	f000 fd6d 	bl	800413c <xTaskResumeAll>
 8003662:	e76c      	b.n	800353e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003664:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003666:	f000 fa19 	bl	8003a9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800366a:	f000 fd67 	bl	800413c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800366e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003670:	4618      	mov	r0, r3
 8003672:	3738      	adds	r7, #56	@ 0x38
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	e000ed04 	.word	0xe000ed04

0800367c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b090      	sub	sp, #64	@ 0x40
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800368e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10b      	bne.n	80036ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80036a6:	bf00      	nop
 80036a8:	bf00      	nop
 80036aa:	e7fd      	b.n	80036a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d103      	bne.n	80036ba <xQueueGenericSendFromISR+0x3e>
 80036b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <xQueueGenericSendFromISR+0x42>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <xQueueGenericSendFromISR+0x44>
 80036be:	2300      	movs	r3, #0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10b      	bne.n	80036dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80036d6:	bf00      	nop
 80036d8:	bf00      	nop
 80036da:	e7fd      	b.n	80036d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d103      	bne.n	80036ea <xQueueGenericSendFromISR+0x6e>
 80036e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <xQueueGenericSendFromISR+0x72>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <xQueueGenericSendFromISR+0x74>
 80036ee:	2300      	movs	r3, #0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	623b      	str	r3, [r7, #32]
}
 8003706:	bf00      	nop
 8003708:	bf00      	nop
 800370a:	e7fd      	b.n	8003708 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800370c:	f001 ff4c 	bl	80055a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003710:	f3ef 8211 	mrs	r2, BASEPRI
 8003714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	61fa      	str	r2, [r7, #28]
 8003726:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003728:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800372a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800372c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800372e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003734:	429a      	cmp	r2, r3
 8003736:	d302      	bcc.n	800373e <xQueueGenericSendFromISR+0xc2>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d12f      	bne.n	800379e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800373e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003740:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003744:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800374a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003754:	f000 f912 	bl	800397c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003758:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800375c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003760:	d112      	bne.n	8003788 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	2b00      	cmp	r3, #0
 8003768:	d016      	beq.n	8003798 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800376a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376c:	3324      	adds	r3, #36	@ 0x24
 800376e:	4618      	mov	r0, r3
 8003770:	f000 ff04 	bl	800457c <xTaskRemoveFromEventList>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00e      	beq.n	8003798 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00b      	beq.n	8003798 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e007      	b.n	8003798 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003788:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800378c:	3301      	adds	r3, #1
 800378e:	b2db      	uxtb	r3, r3
 8003790:	b25a      	sxtb	r2, r3
 8003792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003798:	2301      	movs	r3, #1
 800379a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800379c:	e001      	b.n	80037a2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80037ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3740      	adds	r7, #64	@ 0x40
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08c      	sub	sp, #48	@ 0x30
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80037c4:	2300      	movs	r3, #0
 80037c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80037cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10b      	bne.n	80037ea <xQueueReceive+0x32>
	__asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	623b      	str	r3, [r7, #32]
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	e7fd      	b.n	80037e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d103      	bne.n	80037f8 <xQueueReceive+0x40>
 80037f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <xQueueReceive+0x44>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <xQueueReceive+0x46>
 80037fc:	2300      	movs	r3, #0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10b      	bne.n	800381a <xQueueReceive+0x62>
	__asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	61fb      	str	r3, [r7, #28]
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	e7fd      	b.n	8003816 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800381a:	f001 f875 	bl	8004908 <xTaskGetSchedulerState>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d102      	bne.n	800382a <xQueueReceive+0x72>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <xQueueReceive+0x76>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <xQueueReceive+0x78>
 800382e:	2300      	movs	r3, #0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10b      	bne.n	800384c <xQueueReceive+0x94>
	__asm volatile
 8003834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	61bb      	str	r3, [r7, #24]
}
 8003846:	bf00      	nop
 8003848:	bf00      	nop
 800384a:	e7fd      	b.n	8003848 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800384c:	f001 fdcc 	bl	80053e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003854:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01f      	beq.n	800389c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003860:	f000 f8f6 	bl	8003a50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	1e5a      	subs	r2, r3, #1
 8003868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800386c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00f      	beq.n	8003894 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003876:	3310      	adds	r3, #16
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fe7f 	bl	800457c <xTaskRemoveFromEventList>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d007      	beq.n	8003894 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003884:	4b3c      	ldr	r3, [pc, #240]	@ (8003978 <xQueueReceive+0x1c0>)
 8003886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003894:	f001 fdda 	bl	800544c <vPortExitCritical>
				return pdPASS;
 8003898:	2301      	movs	r3, #1
 800389a:	e069      	b.n	8003970 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d103      	bne.n	80038aa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038a2:	f001 fdd3 	bl	800544c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80038a6:	2300      	movs	r3, #0
 80038a8:	e062      	b.n	8003970 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d106      	bne.n	80038be <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038b0:	f107 0310 	add.w	r3, r7, #16
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fec5 	bl	8004644 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038ba:	2301      	movs	r3, #1
 80038bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038be:	f001 fdc5 	bl	800544c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038c2:	f000 fc2d 	bl	8004120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038c6:	f001 fd8f 	bl	80053e8 <vPortEnterCritical>
 80038ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038d0:	b25b      	sxtb	r3, r3
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038d6:	d103      	bne.n	80038e0 <xQueueReceive+0x128>
 80038d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038e6:	b25b      	sxtb	r3, r3
 80038e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038ec:	d103      	bne.n	80038f6 <xQueueReceive+0x13e>
 80038ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038f6:	f001 fda9 	bl	800544c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038fa:	1d3a      	adds	r2, r7, #4
 80038fc:	f107 0310 	add.w	r3, r7, #16
 8003900:	4611      	mov	r1, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f000 feb4 	bl	8004670 <xTaskCheckForTimeOut>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d123      	bne.n	8003956 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800390e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003910:	f000 f916 	bl	8003b40 <prvIsQueueEmpty>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d017      	beq.n	800394a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800391a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800391c:	3324      	adds	r3, #36	@ 0x24
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	4611      	mov	r1, r2
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fdd8 	bl	80044d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003928:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800392a:	f000 f8b7 	bl	8003a9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800392e:	f000 fc05 	bl	800413c <xTaskResumeAll>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d189      	bne.n	800384c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003938:	4b0f      	ldr	r3, [pc, #60]	@ (8003978 <xQueueReceive+0x1c0>)
 800393a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	e780      	b.n	800384c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800394a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800394c:	f000 f8a6 	bl	8003a9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003950:	f000 fbf4 	bl	800413c <xTaskResumeAll>
 8003954:	e77a      	b.n	800384c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003956:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003958:	f000 f8a0 	bl	8003a9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800395c:	f000 fbee 	bl	800413c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003960:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003962:	f000 f8ed 	bl	8003b40 <prvIsQueueEmpty>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	f43f af6f 	beq.w	800384c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800396e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003970:	4618      	mov	r0, r3
 8003972:	3730      	adds	r7, #48	@ 0x30
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	e000ed04 	.word	0xe000ed04

0800397c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003990:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10d      	bne.n	80039b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d14d      	bne.n	8003a3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 ffcc 	bl	8004944 <xTaskPriorityDisinherit>
 80039ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	e043      	b.n	8003a3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d119      	bne.n	80039f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6858      	ldr	r0, [r3, #4]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c4:	461a      	mov	r2, r3
 80039c6:	68b9      	ldr	r1, [r7, #8]
 80039c8:	f002 f8a2 	bl	8005b10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d4:	441a      	add	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d32b      	bcc.n	8003a3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	e026      	b.n	8003a3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	68d8      	ldr	r0, [r3, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	461a      	mov	r2, r3
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	f002 f888 	bl	8005b10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a08:	425b      	negs	r3, r3
 8003a0a:	441a      	add	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d207      	bcs.n	8003a2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a24:	425b      	negs	r3, r3
 8003a26:	441a      	add	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d105      	bne.n	8003a3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003a46:	697b      	ldr	r3, [r7, #20]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d018      	beq.n	8003a94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6a:	441a      	add	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d303      	bcc.n	8003a84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68d9      	ldr	r1, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	6838      	ldr	r0, [r7, #0]
 8003a90:	f002 f83e 	bl	8005b10 <memcpy>
	}
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003aa4:	f001 fca0 	bl	80053e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003aae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ab0:	e011      	b.n	8003ad6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d012      	beq.n	8003ae0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3324      	adds	r3, #36	@ 0x24
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fd5c 	bl	800457c <xTaskRemoveFromEventList>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003aca:	f000 fe35 	bl	8004738 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	dce9      	bgt.n	8003ab2 <prvUnlockQueue+0x16>
 8003ade:	e000      	b.n	8003ae2 <prvUnlockQueue+0x46>
					break;
 8003ae0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	22ff      	movs	r2, #255	@ 0xff
 8003ae6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003aea:	f001 fcaf 	bl	800544c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003aee:	f001 fc7b 	bl	80053e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003af8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003afa:	e011      	b.n	8003b20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d012      	beq.n	8003b2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3310      	adds	r3, #16
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fd37 	bl	800457c <xTaskRemoveFromEventList>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003b14:	f000 fe10 	bl	8004738 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b18:	7bbb      	ldrb	r3, [r7, #14]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	dce9      	bgt.n	8003afc <prvUnlockQueue+0x60>
 8003b28:	e000      	b.n	8003b2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	22ff      	movs	r2, #255	@ 0xff
 8003b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003b34:	f001 fc8a 	bl	800544c <vPortExitCritical>
}
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b48:	f001 fc4e 	bl	80053e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b54:	2301      	movs	r3, #1
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	e001      	b.n	8003b5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b5e:	f001 fc75 	bl	800544c <vPortExitCritical>

	return xReturn;
 8003b62:	68fb      	ldr	r3, [r7, #12]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b74:	f001 fc38 	bl	80053e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d102      	bne.n	8003b8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b84:	2301      	movs	r3, #1
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e001      	b.n	8003b8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b8e:	f001 fc5d 	bl	800544c <vPortExitCritical>

	return xReturn;
 8003b92:	68fb      	ldr	r3, [r7, #12]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	e014      	b.n	8003bd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003bac:	4a0f      	ldr	r2, [pc, #60]	@ (8003bec <vQueueAddToRegistry+0x50>)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10b      	bne.n	8003bd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003bb8:	490c      	ldr	r1, [pc, #48]	@ (8003bec <vQueueAddToRegistry+0x50>)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bec <vQueueAddToRegistry+0x50>)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003bce:	e006      	b.n	8003bde <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b07      	cmp	r3, #7
 8003bda:	d9e7      	bls.n	8003bac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003bdc:	bf00      	nop
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000848 	.word	0x20000848

08003bf0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003c00:	f001 fbf2 	bl	80053e8 <vPortEnterCritical>
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c0a:	b25b      	sxtb	r3, r3
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c10:	d103      	bne.n	8003c1a <vQueueWaitForMessageRestricted+0x2a>
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c20:	b25b      	sxtb	r3, r3
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c26:	d103      	bne.n	8003c30 <vQueueWaitForMessageRestricted+0x40>
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c30:	f001 fc0c 	bl	800544c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d106      	bne.n	8003c4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	3324      	adds	r3, #36	@ 0x24
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fc6d 	bl	8004524 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c4a:	6978      	ldr	r0, [r7, #20]
 8003c4c:	f7ff ff26 	bl	8003a9c <prvUnlockQueue>
	}
 8003c50:	bf00      	nop
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08e      	sub	sp, #56	@ 0x38
 8003c5c:	af04      	add	r7, sp, #16
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10b      	bne.n	8003c84 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	623b      	str	r3, [r7, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	bf00      	nop
 8003c82:	e7fd      	b.n	8003c80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10b      	bne.n	8003ca2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	61fb      	str	r3, [r7, #28]
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	e7fd      	b.n	8003c9e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ca2:	23a8      	movs	r3, #168	@ 0xa8
 8003ca4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2ba8      	cmp	r3, #168	@ 0xa8
 8003caa:	d00b      	beq.n	8003cc4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	61bb      	str	r3, [r7, #24]
}
 8003cbe:	bf00      	nop
 8003cc0:	bf00      	nop
 8003cc2:	e7fd      	b.n	8003cc0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003cc4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01e      	beq.n	8003d0a <xTaskCreateStatic+0xb2>
 8003ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d01b      	beq.n	8003d0a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cda:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	9303      	str	r3, [sp, #12]
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	9302      	str	r3, [sp, #8]
 8003cec:	f107 0314 	add.w	r3, r7, #20
 8003cf0:	9301      	str	r3, [sp, #4]
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f851 	bl	8003da4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d04:	f000 f8f6 	bl	8003ef4 <prvAddNewTaskToReadyList>
 8003d08:	e001      	b.n	8003d0e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d0e:	697b      	ldr	r3, [r7, #20]
	}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3728      	adds	r7, #40	@ 0x28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08c      	sub	sp, #48	@ 0x30
 8003d1c:	af04      	add	r7, sp, #16
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d28:	88fb      	ldrh	r3, [r7, #6]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f001 fc7d 	bl	800562c <pvPortMalloc>
 8003d32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00e      	beq.n	8003d58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d3a:	20a8      	movs	r0, #168	@ 0xa8
 8003d3c:	f001 fc76 	bl	800562c <pvPortMalloc>
 8003d40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d4e:	e005      	b.n	8003d5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d50:	6978      	ldr	r0, [r7, #20]
 8003d52:	f001 fd39 	bl	80057c8 <vPortFree>
 8003d56:	e001      	b.n	8003d5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d017      	beq.n	8003d92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d6a:	88fa      	ldrh	r2, [r7, #6]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	9303      	str	r3, [sp, #12]
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	9302      	str	r3, [sp, #8]
 8003d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d76:	9301      	str	r3, [sp, #4]
 8003d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f80f 	bl	8003da4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d86:	69f8      	ldr	r0, [r7, #28]
 8003d88:	f000 f8b4 	bl	8003ef4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	e002      	b.n	8003d98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d98:	69bb      	ldr	r3, [r7, #24]
	}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	461a      	mov	r2, r3
 8003dbc:	21a5      	movs	r1, #165	@ 0xa5
 8003dbe:	f001 fe23 	bl	8005a08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	f023 0307 	bic.w	r3, r3, #7
 8003dda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	617b      	str	r3, [r7, #20]
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	e7fd      	b.n	8003dfa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01f      	beq.n	8003e44 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e04:	2300      	movs	r3, #0
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	e012      	b.n	8003e30 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	4413      	add	r3, r2
 8003e10:	7819      	ldrb	r1, [r3, #0]
 8003e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	4413      	add	r3, r2
 8003e18:	3334      	adds	r3, #52	@ 0x34
 8003e1a:	460a      	mov	r2, r1
 8003e1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	4413      	add	r3, r2
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d006      	beq.n	8003e38 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	61fb      	str	r3, [r7, #28]
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b0f      	cmp	r3, #15
 8003e34:	d9e9      	bls.n	8003e0a <prvInitialiseNewTask+0x66>
 8003e36:	e000      	b.n	8003e3a <prvInitialiseNewTask+0x96>
			{
				break;
 8003e38:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e42:	e003      	b.n	8003e4c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4e:	2b37      	cmp	r3, #55	@ 0x37
 8003e50:	d901      	bls.n	8003e56 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e52:	2337      	movs	r3, #55	@ 0x37
 8003e54:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e60:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e64:	2200      	movs	r2, #0
 8003e66:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff f965 	bl	800313c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e74:	3318      	adds	r3, #24
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff f960 	bl	800313c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e90:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e94:	2200      	movs	r2, #0
 8003e96:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea4:	3354      	adds	r3, #84	@ 0x54
 8003ea6:	224c      	movs	r2, #76	@ 0x4c
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f001 fdac 	bl	8005a08 <memset>
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ee8 <prvInitialiseNewTask+0x144>)
 8003eb4:	659a      	str	r2, [r3, #88]	@ 0x58
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8003eec <prvInitialiseNewTask+0x148>)
 8003eba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8003ef0 <prvInitialiseNewTask+0x14c>)
 8003ec0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	68f9      	ldr	r1, [r7, #12]
 8003ec6:	69b8      	ldr	r0, [r7, #24]
 8003ec8:	f001 f95a 	bl	8005180 <pxPortInitialiseStack>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003edc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ede:	bf00      	nop
 8003ee0:	3720      	adds	r7, #32
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20004adc 	.word	0x20004adc
 8003eec:	20004b44 	.word	0x20004b44
 8003ef0:	20004bac 	.word	0x20004bac

08003ef4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003efc:	f001 fa74 	bl	80053e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f00:	4b2d      	ldr	r3, [pc, #180]	@ (8003fb8 <prvAddNewTaskToReadyList+0xc4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3301      	adds	r3, #1
 8003f06:	4a2c      	ldr	r2, [pc, #176]	@ (8003fb8 <prvAddNewTaskToReadyList+0xc4>)
 8003f08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8003fbc <prvAddNewTaskToReadyList+0xc8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f12:	4a2a      	ldr	r2, [pc, #168]	@ (8003fbc <prvAddNewTaskToReadyList+0xc8>)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f18:	4b27      	ldr	r3, [pc, #156]	@ (8003fb8 <prvAddNewTaskToReadyList+0xc4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d110      	bne.n	8003f42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f20:	f000 fc2e 	bl	8004780 <prvInitialiseTaskLists>
 8003f24:	e00d      	b.n	8003f42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f26:	4b26      	ldr	r3, [pc, #152]	@ (8003fc0 <prvAddNewTaskToReadyList+0xcc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d109      	bne.n	8003f42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f2e:	4b23      	ldr	r3, [pc, #140]	@ (8003fbc <prvAddNewTaskToReadyList+0xc8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d802      	bhi.n	8003f42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8003fbc <prvAddNewTaskToReadyList+0xc8>)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f42:	4b20      	ldr	r3, [pc, #128]	@ (8003fc4 <prvAddNewTaskToReadyList+0xd0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3301      	adds	r3, #1
 8003f48:	4a1e      	ldr	r2, [pc, #120]	@ (8003fc4 <prvAddNewTaskToReadyList+0xd0>)
 8003f4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc4 <prvAddNewTaskToReadyList+0xd0>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f58:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc8 <prvAddNewTaskToReadyList+0xd4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d903      	bls.n	8003f68 <prvAddNewTaskToReadyList+0x74>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f64:	4a18      	ldr	r2, [pc, #96]	@ (8003fc8 <prvAddNewTaskToReadyList+0xd4>)
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4a15      	ldr	r2, [pc, #84]	@ (8003fcc <prvAddNewTaskToReadyList+0xd8>)
 8003f76:	441a      	add	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4610      	mov	r0, r2
 8003f80:	f7ff f8e9 	bl	8003156 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f84:	f001 fa62 	bl	800544c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f88:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc0 <prvAddNewTaskToReadyList+0xcc>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00e      	beq.n	8003fae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f90:	4b0a      	ldr	r3, [pc, #40]	@ (8003fbc <prvAddNewTaskToReadyList+0xc8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d207      	bcs.n	8003fae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd0 <prvAddNewTaskToReadyList+0xdc>)
 8003fa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000d5c 	.word	0x20000d5c
 8003fbc:	20000888 	.word	0x20000888
 8003fc0:	20000d68 	.word	0x20000d68
 8003fc4:	20000d78 	.word	0x20000d78
 8003fc8:	20000d64 	.word	0x20000d64
 8003fcc:	2000088c 	.word	0x2000088c
 8003fd0:	e000ed04 	.word	0xe000ed04

08003fd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d018      	beq.n	8004018 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003fe6:	4b14      	ldr	r3, [pc, #80]	@ (8004038 <vTaskDelay+0x64>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <vTaskDelay+0x32>
	__asm volatile
 8003fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	60bb      	str	r3, [r7, #8]
}
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	e7fd      	b.n	8004002 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004006:	f000 f88b 	bl	8004120 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800400a:	2100      	movs	r1, #0
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fd09 	bl	8004a24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004012:	f000 f893 	bl	800413c <xTaskResumeAll>
 8004016:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d107      	bne.n	800402e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800401e:	4b07      	ldr	r3, [pc, #28]	@ (800403c <vTaskDelay+0x68>)
 8004020:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000d84 	.word	0x20000d84
 800403c:	e000ed04 	.word	0xe000ed04

08004040 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08a      	sub	sp, #40	@ 0x28
 8004044:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800404a:	2300      	movs	r3, #0
 800404c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800404e:	463a      	mov	r2, r7
 8004050:	1d39      	adds	r1, r7, #4
 8004052:	f107 0308 	add.w	r3, r7, #8
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff f81c 	bl	8003094 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800405c:	6839      	ldr	r1, [r7, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	9202      	str	r2, [sp, #8]
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	2300      	movs	r3, #0
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	2300      	movs	r3, #0
 800406c:	460a      	mov	r2, r1
 800406e:	4924      	ldr	r1, [pc, #144]	@ (8004100 <vTaskStartScheduler+0xc0>)
 8004070:	4824      	ldr	r0, [pc, #144]	@ (8004104 <vTaskStartScheduler+0xc4>)
 8004072:	f7ff fdf1 	bl	8003c58 <xTaskCreateStatic>
 8004076:	4603      	mov	r3, r0
 8004078:	4a23      	ldr	r2, [pc, #140]	@ (8004108 <vTaskStartScheduler+0xc8>)
 800407a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800407c:	4b22      	ldr	r3, [pc, #136]	@ (8004108 <vTaskStartScheduler+0xc8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004084:	2301      	movs	r3, #1
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e001      	b.n	800408e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d102      	bne.n	800409a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004094:	f000 fd1a 	bl	8004acc <xTimerCreateTimerTask>
 8004098:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d11b      	bne.n	80040d8 <vTaskStartScheduler+0x98>
	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	613b      	str	r3, [r7, #16]
}
 80040b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80040b4:	4b15      	ldr	r3, [pc, #84]	@ (800410c <vTaskStartScheduler+0xcc>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3354      	adds	r3, #84	@ 0x54
 80040ba:	4a15      	ldr	r2, [pc, #84]	@ (8004110 <vTaskStartScheduler+0xd0>)
 80040bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80040be:	4b15      	ldr	r3, [pc, #84]	@ (8004114 <vTaskStartScheduler+0xd4>)
 80040c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80040c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040c6:	4b14      	ldr	r3, [pc, #80]	@ (8004118 <vTaskStartScheduler+0xd8>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040cc:	4b13      	ldr	r3, [pc, #76]	@ (800411c <vTaskStartScheduler+0xdc>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040d2:	f001 f8e5 	bl	80052a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040d6:	e00f      	b.n	80040f8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040de:	d10b      	bne.n	80040f8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	60fb      	str	r3, [r7, #12]
}
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <vTaskStartScheduler+0xb4>
}
 80040f8:	bf00      	nop
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	08005bfc 	.word	0x08005bfc
 8004104:	08004751 	.word	0x08004751
 8004108:	20000d80 	.word	0x20000d80
 800410c:	20000888 	.word	0x20000888
 8004110:	20000010 	.word	0x20000010
 8004114:	20000d7c 	.word	0x20000d7c
 8004118:	20000d68 	.word	0x20000d68
 800411c:	20000d60 	.word	0x20000d60

08004120 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004124:	4b04      	ldr	r3, [pc, #16]	@ (8004138 <vTaskSuspendAll+0x18>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3301      	adds	r3, #1
 800412a:	4a03      	ldr	r2, [pc, #12]	@ (8004138 <vTaskSuspendAll+0x18>)
 800412c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800412e:	bf00      	nop
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	20000d84 	.word	0x20000d84

0800413c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004146:	2300      	movs	r3, #0
 8004148:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800414a:	4b42      	ldr	r3, [pc, #264]	@ (8004254 <xTaskResumeAll+0x118>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <xTaskResumeAll+0x2e>
	__asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	603b      	str	r3, [r7, #0]
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop
 8004168:	e7fd      	b.n	8004166 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800416a:	f001 f93d 	bl	80053e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800416e:	4b39      	ldr	r3, [pc, #228]	@ (8004254 <xTaskResumeAll+0x118>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3b01      	subs	r3, #1
 8004174:	4a37      	ldr	r2, [pc, #220]	@ (8004254 <xTaskResumeAll+0x118>)
 8004176:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004178:	4b36      	ldr	r3, [pc, #216]	@ (8004254 <xTaskResumeAll+0x118>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d162      	bne.n	8004246 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004180:	4b35      	ldr	r3, [pc, #212]	@ (8004258 <xTaskResumeAll+0x11c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d05e      	beq.n	8004246 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004188:	e02f      	b.n	80041ea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800418a:	4b34      	ldr	r3, [pc, #208]	@ (800425c <xTaskResumeAll+0x120>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3318      	adds	r3, #24
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff f83a 	bl	8003210 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3304      	adds	r3, #4
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff f835 	bl	8003210 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041aa:	4b2d      	ldr	r3, [pc, #180]	@ (8004260 <xTaskResumeAll+0x124>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d903      	bls.n	80041ba <xTaskResumeAll+0x7e>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004260 <xTaskResumeAll+0x124>)
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4a27      	ldr	r2, [pc, #156]	@ (8004264 <xTaskResumeAll+0x128>)
 80041c8:	441a      	add	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3304      	adds	r3, #4
 80041ce:	4619      	mov	r1, r3
 80041d0:	4610      	mov	r0, r2
 80041d2:	f7fe ffc0 	bl	8003156 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041da:	4b23      	ldr	r3, [pc, #140]	@ (8004268 <xTaskResumeAll+0x12c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d302      	bcc.n	80041ea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80041e4:	4b21      	ldr	r3, [pc, #132]	@ (800426c <xTaskResumeAll+0x130>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041ea:	4b1c      	ldr	r3, [pc, #112]	@ (800425c <xTaskResumeAll+0x120>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1cb      	bne.n	800418a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041f8:	f000 fb66 	bl	80048c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80041fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004270 <xTaskResumeAll+0x134>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d010      	beq.n	800422a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004208:	f000 f846 	bl	8004298 <xTaskIncrementTick>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004212:	4b16      	ldr	r3, [pc, #88]	@ (800426c <xTaskResumeAll+0x130>)
 8004214:	2201      	movs	r2, #1
 8004216:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3b01      	subs	r3, #1
 800421c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f1      	bne.n	8004208 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004224:	4b12      	ldr	r3, [pc, #72]	@ (8004270 <xTaskResumeAll+0x134>)
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800422a:	4b10      	ldr	r3, [pc, #64]	@ (800426c <xTaskResumeAll+0x130>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004232:	2301      	movs	r3, #1
 8004234:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004236:	4b0f      	ldr	r3, [pc, #60]	@ (8004274 <xTaskResumeAll+0x138>)
 8004238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004246:	f001 f901 	bl	800544c <vPortExitCritical>

	return xAlreadyYielded;
 800424a:	68bb      	ldr	r3, [r7, #8]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20000d84 	.word	0x20000d84
 8004258:	20000d5c 	.word	0x20000d5c
 800425c:	20000d1c 	.word	0x20000d1c
 8004260:	20000d64 	.word	0x20000d64
 8004264:	2000088c 	.word	0x2000088c
 8004268:	20000888 	.word	0x20000888
 800426c:	20000d70 	.word	0x20000d70
 8004270:	20000d6c 	.word	0x20000d6c
 8004274:	e000ed04 	.word	0xe000ed04

08004278 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800427e:	4b05      	ldr	r3, [pc, #20]	@ (8004294 <xTaskGetTickCount+0x1c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004284:	687b      	ldr	r3, [r7, #4]
}
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000d60 	.word	0x20000d60

08004298 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042a2:	4b4f      	ldr	r3, [pc, #316]	@ (80043e0 <xTaskIncrementTick+0x148>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f040 8090 	bne.w	80043cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042ac:	4b4d      	ldr	r3, [pc, #308]	@ (80043e4 <xTaskIncrementTick+0x14c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3301      	adds	r3, #1
 80042b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042b4:	4a4b      	ldr	r2, [pc, #300]	@ (80043e4 <xTaskIncrementTick+0x14c>)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d121      	bne.n	8004304 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80042c0:	4b49      	ldr	r3, [pc, #292]	@ (80043e8 <xTaskIncrementTick+0x150>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00b      	beq.n	80042e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	603b      	str	r3, [r7, #0]
}
 80042dc:	bf00      	nop
 80042de:	bf00      	nop
 80042e0:	e7fd      	b.n	80042de <xTaskIncrementTick+0x46>
 80042e2:	4b41      	ldr	r3, [pc, #260]	@ (80043e8 <xTaskIncrementTick+0x150>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	4b40      	ldr	r3, [pc, #256]	@ (80043ec <xTaskIncrementTick+0x154>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a3e      	ldr	r2, [pc, #248]	@ (80043e8 <xTaskIncrementTick+0x150>)
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	4a3e      	ldr	r2, [pc, #248]	@ (80043ec <xTaskIncrementTick+0x154>)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	4b3e      	ldr	r3, [pc, #248]	@ (80043f0 <xTaskIncrementTick+0x158>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3301      	adds	r3, #1
 80042fc:	4a3c      	ldr	r2, [pc, #240]	@ (80043f0 <xTaskIncrementTick+0x158>)
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	f000 fae2 	bl	80048c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004304:	4b3b      	ldr	r3, [pc, #236]	@ (80043f4 <xTaskIncrementTick+0x15c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	429a      	cmp	r2, r3
 800430c:	d349      	bcc.n	80043a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800430e:	4b36      	ldr	r3, [pc, #216]	@ (80043e8 <xTaskIncrementTick+0x150>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d104      	bne.n	8004322 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004318:	4b36      	ldr	r3, [pc, #216]	@ (80043f4 <xTaskIncrementTick+0x15c>)
 800431a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800431e:	601a      	str	r2, [r3, #0]
					break;
 8004320:	e03f      	b.n	80043a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004322:	4b31      	ldr	r3, [pc, #196]	@ (80043e8 <xTaskIncrementTick+0x150>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	429a      	cmp	r2, r3
 8004338:	d203      	bcs.n	8004342 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800433a:	4a2e      	ldr	r2, [pc, #184]	@ (80043f4 <xTaskIncrementTick+0x15c>)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004340:	e02f      	b.n	80043a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	3304      	adds	r3, #4
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe ff62 	bl	8003210 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	3318      	adds	r3, #24
 8004358:	4618      	mov	r0, r3
 800435a:	f7fe ff59 	bl	8003210 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004362:	4b25      	ldr	r3, [pc, #148]	@ (80043f8 <xTaskIncrementTick+0x160>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d903      	bls.n	8004372 <xTaskIncrementTick+0xda>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436e:	4a22      	ldr	r2, [pc, #136]	@ (80043f8 <xTaskIncrementTick+0x160>)
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004376:	4613      	mov	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4a1f      	ldr	r2, [pc, #124]	@ (80043fc <xTaskIncrementTick+0x164>)
 8004380:	441a      	add	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	3304      	adds	r3, #4
 8004386:	4619      	mov	r1, r3
 8004388:	4610      	mov	r0, r2
 800438a:	f7fe fee4 	bl	8003156 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004392:	4b1b      	ldr	r3, [pc, #108]	@ (8004400 <xTaskIncrementTick+0x168>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004398:	429a      	cmp	r2, r3
 800439a:	d3b8      	bcc.n	800430e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800439c:	2301      	movs	r3, #1
 800439e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043a0:	e7b5      	b.n	800430e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043a2:	4b17      	ldr	r3, [pc, #92]	@ (8004400 <xTaskIncrementTick+0x168>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a8:	4914      	ldr	r1, [pc, #80]	@ (80043fc <xTaskIncrementTick+0x164>)
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d901      	bls.n	80043be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80043ba:	2301      	movs	r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80043be:	4b11      	ldr	r3, [pc, #68]	@ (8004404 <xTaskIncrementTick+0x16c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80043c6:	2301      	movs	r3, #1
 80043c8:	617b      	str	r3, [r7, #20]
 80043ca:	e004      	b.n	80043d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80043cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004408 <xTaskIncrementTick+0x170>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3301      	adds	r3, #1
 80043d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004408 <xTaskIncrementTick+0x170>)
 80043d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80043d6:	697b      	ldr	r3, [r7, #20]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20000d84 	.word	0x20000d84
 80043e4:	20000d60 	.word	0x20000d60
 80043e8:	20000d14 	.word	0x20000d14
 80043ec:	20000d18 	.word	0x20000d18
 80043f0:	20000d74 	.word	0x20000d74
 80043f4:	20000d7c 	.word	0x20000d7c
 80043f8:	20000d64 	.word	0x20000d64
 80043fc:	2000088c 	.word	0x2000088c
 8004400:	20000888 	.word	0x20000888
 8004404:	20000d70 	.word	0x20000d70
 8004408:	20000d6c 	.word	0x20000d6c

0800440c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004412:	4b2b      	ldr	r3, [pc, #172]	@ (80044c0 <vTaskSwitchContext+0xb4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800441a:	4b2a      	ldr	r3, [pc, #168]	@ (80044c4 <vTaskSwitchContext+0xb8>)
 800441c:	2201      	movs	r2, #1
 800441e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004420:	e047      	b.n	80044b2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004422:	4b28      	ldr	r3, [pc, #160]	@ (80044c4 <vTaskSwitchContext+0xb8>)
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004428:	4b27      	ldr	r3, [pc, #156]	@ (80044c8 <vTaskSwitchContext+0xbc>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	e011      	b.n	8004454 <vTaskSwitchContext+0x48>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10b      	bne.n	800444e <vTaskSwitchContext+0x42>
	__asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	607b      	str	r3, [r7, #4]
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	e7fd      	b.n	800444a <vTaskSwitchContext+0x3e>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3b01      	subs	r3, #1
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	491d      	ldr	r1, [pc, #116]	@ (80044cc <vTaskSwitchContext+0xc0>)
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0e3      	beq.n	8004430 <vTaskSwitchContext+0x24>
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4a16      	ldr	r2, [pc, #88]	@ (80044cc <vTaskSwitchContext+0xc0>)
 8004474:	4413      	add	r3, r2
 8004476:	60bb      	str	r3, [r7, #8]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	3308      	adds	r3, #8
 800448a:	429a      	cmp	r2, r3
 800448c:	d104      	bne.n	8004498 <vTaskSwitchContext+0x8c>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	605a      	str	r2, [r3, #4]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	4a0c      	ldr	r2, [pc, #48]	@ (80044d0 <vTaskSwitchContext+0xc4>)
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	4a09      	ldr	r2, [pc, #36]	@ (80044c8 <vTaskSwitchContext+0xbc>)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044a8:	4b09      	ldr	r3, [pc, #36]	@ (80044d0 <vTaskSwitchContext+0xc4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3354      	adds	r3, #84	@ 0x54
 80044ae:	4a09      	ldr	r2, [pc, #36]	@ (80044d4 <vTaskSwitchContext+0xc8>)
 80044b0:	6013      	str	r3, [r2, #0]
}
 80044b2:	bf00      	nop
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20000d84 	.word	0x20000d84
 80044c4:	20000d70 	.word	0x20000d70
 80044c8:	20000d64 	.word	0x20000d64
 80044cc:	2000088c 	.word	0x2000088c
 80044d0:	20000888 	.word	0x20000888
 80044d4:	20000010 	.word	0x20000010

080044d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10b      	bne.n	8004500 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	60fb      	str	r3, [r7, #12]
}
 80044fa:	bf00      	nop
 80044fc:	bf00      	nop
 80044fe:	e7fd      	b.n	80044fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004500:	4b07      	ldr	r3, [pc, #28]	@ (8004520 <vTaskPlaceOnEventList+0x48>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3318      	adds	r3, #24
 8004506:	4619      	mov	r1, r3
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7fe fe48 	bl	800319e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800450e:	2101      	movs	r1, #1
 8004510:	6838      	ldr	r0, [r7, #0]
 8004512:	f000 fa87 	bl	8004a24 <prvAddCurrentTaskToDelayedList>
}
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20000888 	.word	0x20000888

08004524 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10b      	bne.n	800454e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	617b      	str	r3, [r7, #20]
}
 8004548:	bf00      	nop
 800454a:	bf00      	nop
 800454c:	e7fd      	b.n	800454a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800454e:	4b0a      	ldr	r3, [pc, #40]	@ (8004578 <vTaskPlaceOnEventListRestricted+0x54>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3318      	adds	r3, #24
 8004554:	4619      	mov	r1, r3
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f7fe fdfd 	bl	8003156 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004562:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004566:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	68b8      	ldr	r0, [r7, #8]
 800456c:	f000 fa5a 	bl	8004a24 <prvAddCurrentTaskToDelayedList>
	}
 8004570:	bf00      	nop
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000888 	.word	0x20000888

0800457c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10b      	bne.n	80045aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	60fb      	str	r3, [r7, #12]
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	e7fd      	b.n	80045a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	3318      	adds	r3, #24
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe fe2e 	bl	8003210 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045b4:	4b1d      	ldr	r3, [pc, #116]	@ (800462c <xTaskRemoveFromEventList+0xb0>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d11d      	bne.n	80045f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	3304      	adds	r3, #4
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fe fe25 	bl	8003210 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ca:	4b19      	ldr	r3, [pc, #100]	@ (8004630 <xTaskRemoveFromEventList+0xb4>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d903      	bls.n	80045da <xTaskRemoveFromEventList+0x5e>
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d6:	4a16      	ldr	r2, [pc, #88]	@ (8004630 <xTaskRemoveFromEventList+0xb4>)
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4a13      	ldr	r2, [pc, #76]	@ (8004634 <xTaskRemoveFromEventList+0xb8>)
 80045e8:	441a      	add	r2, r3
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	3304      	adds	r3, #4
 80045ee:	4619      	mov	r1, r3
 80045f0:	4610      	mov	r0, r2
 80045f2:	f7fe fdb0 	bl	8003156 <vListInsertEnd>
 80045f6:	e005      	b.n	8004604 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	3318      	adds	r3, #24
 80045fc:	4619      	mov	r1, r3
 80045fe:	480e      	ldr	r0, [pc, #56]	@ (8004638 <xTaskRemoveFromEventList+0xbc>)
 8004600:	f7fe fda9 	bl	8003156 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004608:	4b0c      	ldr	r3, [pc, #48]	@ (800463c <xTaskRemoveFromEventList+0xc0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460e:	429a      	cmp	r2, r3
 8004610:	d905      	bls.n	800461e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004612:	2301      	movs	r3, #1
 8004614:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004616:	4b0a      	ldr	r3, [pc, #40]	@ (8004640 <xTaskRemoveFromEventList+0xc4>)
 8004618:	2201      	movs	r2, #1
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	e001      	b.n	8004622 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004622:	697b      	ldr	r3, [r7, #20]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20000d84 	.word	0x20000d84
 8004630:	20000d64 	.word	0x20000d64
 8004634:	2000088c 	.word	0x2000088c
 8004638:	20000d1c 	.word	0x20000d1c
 800463c:	20000888 	.word	0x20000888
 8004640:	20000d70 	.word	0x20000d70

08004644 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800464c:	4b06      	ldr	r3, [pc, #24]	@ (8004668 <vTaskInternalSetTimeOutState+0x24>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004654:	4b05      	ldr	r3, [pc, #20]	@ (800466c <vTaskInternalSetTimeOutState+0x28>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	605a      	str	r2, [r3, #4]
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	20000d74 	.word	0x20000d74
 800466c:	20000d60 	.word	0x20000d60

08004670 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10b      	bne.n	8004698 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	613b      	str	r3, [r7, #16]
}
 8004692:	bf00      	nop
 8004694:	bf00      	nop
 8004696:	e7fd      	b.n	8004694 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10b      	bne.n	80046b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	60fb      	str	r3, [r7, #12]
}
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
 80046b4:	e7fd      	b.n	80046b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80046b6:	f000 fe97 	bl	80053e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80046ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004730 <xTaskCheckForTimeOut+0xc0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046d2:	d102      	bne.n	80046da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	e023      	b.n	8004722 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	4b15      	ldr	r3, [pc, #84]	@ (8004734 <xTaskCheckForTimeOut+0xc4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d007      	beq.n	80046f6 <xTaskCheckForTimeOut+0x86>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d302      	bcc.n	80046f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80046f0:	2301      	movs	r3, #1
 80046f2:	61fb      	str	r3, [r7, #28]
 80046f4:	e015      	b.n	8004722 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d20b      	bcs.n	8004718 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	1ad2      	subs	r2, r2, r3
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff ff99 	bl	8004644 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004712:	2300      	movs	r3, #0
 8004714:	61fb      	str	r3, [r7, #28]
 8004716:	e004      	b.n	8004722 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800471e:	2301      	movs	r3, #1
 8004720:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004722:	f000 fe93 	bl	800544c <vPortExitCritical>

	return xReturn;
 8004726:	69fb      	ldr	r3, [r7, #28]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3720      	adds	r7, #32
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000d60 	.word	0x20000d60
 8004734:	20000d74 	.word	0x20000d74

08004738 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800473c:	4b03      	ldr	r3, [pc, #12]	@ (800474c <vTaskMissedYield+0x14>)
 800473e:	2201      	movs	r2, #1
 8004740:	601a      	str	r2, [r3, #0]
}
 8004742:	bf00      	nop
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	20000d70 	.word	0x20000d70

08004750 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004758:	f000 f852 	bl	8004800 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800475c:	4b06      	ldr	r3, [pc, #24]	@ (8004778 <prvIdleTask+0x28>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d9f9      	bls.n	8004758 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004764:	4b05      	ldr	r3, [pc, #20]	@ (800477c <prvIdleTask+0x2c>)
 8004766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004774:	e7f0      	b.n	8004758 <prvIdleTask+0x8>
 8004776:	bf00      	nop
 8004778:	2000088c 	.word	0x2000088c
 800477c:	e000ed04 	.word	0xe000ed04

08004780 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004786:	2300      	movs	r3, #0
 8004788:	607b      	str	r3, [r7, #4]
 800478a:	e00c      	b.n	80047a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4a12      	ldr	r2, [pc, #72]	@ (80047e0 <prvInitialiseTaskLists+0x60>)
 8004798:	4413      	add	r3, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f7fe fcae 	bl	80030fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3301      	adds	r3, #1
 80047a4:	607b      	str	r3, [r7, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b37      	cmp	r3, #55	@ 0x37
 80047aa:	d9ef      	bls.n	800478c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047ac:	480d      	ldr	r0, [pc, #52]	@ (80047e4 <prvInitialiseTaskLists+0x64>)
 80047ae:	f7fe fca5 	bl	80030fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047b2:	480d      	ldr	r0, [pc, #52]	@ (80047e8 <prvInitialiseTaskLists+0x68>)
 80047b4:	f7fe fca2 	bl	80030fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047b8:	480c      	ldr	r0, [pc, #48]	@ (80047ec <prvInitialiseTaskLists+0x6c>)
 80047ba:	f7fe fc9f 	bl	80030fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047be:	480c      	ldr	r0, [pc, #48]	@ (80047f0 <prvInitialiseTaskLists+0x70>)
 80047c0:	f7fe fc9c 	bl	80030fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047c4:	480b      	ldr	r0, [pc, #44]	@ (80047f4 <prvInitialiseTaskLists+0x74>)
 80047c6:	f7fe fc99 	bl	80030fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047ca:	4b0b      	ldr	r3, [pc, #44]	@ (80047f8 <prvInitialiseTaskLists+0x78>)
 80047cc:	4a05      	ldr	r2, [pc, #20]	@ (80047e4 <prvInitialiseTaskLists+0x64>)
 80047ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047d0:	4b0a      	ldr	r3, [pc, #40]	@ (80047fc <prvInitialiseTaskLists+0x7c>)
 80047d2:	4a05      	ldr	r2, [pc, #20]	@ (80047e8 <prvInitialiseTaskLists+0x68>)
 80047d4:	601a      	str	r2, [r3, #0]
}
 80047d6:	bf00      	nop
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	2000088c 	.word	0x2000088c
 80047e4:	20000cec 	.word	0x20000cec
 80047e8:	20000d00 	.word	0x20000d00
 80047ec:	20000d1c 	.word	0x20000d1c
 80047f0:	20000d30 	.word	0x20000d30
 80047f4:	20000d48 	.word	0x20000d48
 80047f8:	20000d14 	.word	0x20000d14
 80047fc:	20000d18 	.word	0x20000d18

08004800 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004806:	e019      	b.n	800483c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004808:	f000 fdee 	bl	80053e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800480c:	4b10      	ldr	r3, [pc, #64]	@ (8004850 <prvCheckTasksWaitingTermination+0x50>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3304      	adds	r3, #4
 8004818:	4618      	mov	r0, r3
 800481a:	f7fe fcf9 	bl	8003210 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800481e:	4b0d      	ldr	r3, [pc, #52]	@ (8004854 <prvCheckTasksWaitingTermination+0x54>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3b01      	subs	r3, #1
 8004824:	4a0b      	ldr	r2, [pc, #44]	@ (8004854 <prvCheckTasksWaitingTermination+0x54>)
 8004826:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004828:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <prvCheckTasksWaitingTermination+0x58>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3b01      	subs	r3, #1
 800482e:	4a0a      	ldr	r2, [pc, #40]	@ (8004858 <prvCheckTasksWaitingTermination+0x58>)
 8004830:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004832:	f000 fe0b 	bl	800544c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f810 	bl	800485c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800483c:	4b06      	ldr	r3, [pc, #24]	@ (8004858 <prvCheckTasksWaitingTermination+0x58>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e1      	bne.n	8004808 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000d30 	.word	0x20000d30
 8004854:	20000d5c 	.word	0x20000d5c
 8004858:	20000d44 	.word	0x20000d44

0800485c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3354      	adds	r3, #84	@ 0x54
 8004868:	4618      	mov	r0, r3
 800486a:	f001 f8d5 	bl	8005a18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004874:	2b00      	cmp	r3, #0
 8004876:	d108      	bne.n	800488a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487c:	4618      	mov	r0, r3
 800487e:	f000 ffa3 	bl	80057c8 <vPortFree>
				vPortFree( pxTCB );
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 ffa0 	bl	80057c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004888:	e019      	b.n	80048be <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004890:	2b01      	cmp	r3, #1
 8004892:	d103      	bne.n	800489c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 ff97 	bl	80057c8 <vPortFree>
	}
 800489a:	e010      	b.n	80048be <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d00b      	beq.n	80048be <prvDeleteTCB+0x62>
	__asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	60fb      	str	r3, [r7, #12]
}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop
 80048bc:	e7fd      	b.n	80048ba <prvDeleteTCB+0x5e>
	}
 80048be:	bf00      	nop
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004900 <prvResetNextTaskUnblockTime+0x38>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d104      	bne.n	80048e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004904 <prvResetNextTaskUnblockTime+0x3c>)
 80048da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80048e0:	e008      	b.n	80048f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048e2:	4b07      	ldr	r3, [pc, #28]	@ (8004900 <prvResetNextTaskUnblockTime+0x38>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	4a04      	ldr	r2, [pc, #16]	@ (8004904 <prvResetNextTaskUnblockTime+0x3c>)
 80048f2:	6013      	str	r3, [r2, #0]
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	20000d14 	.word	0x20000d14
 8004904:	20000d7c 	.word	0x20000d7c

08004908 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800490e:	4b0b      	ldr	r3, [pc, #44]	@ (800493c <xTaskGetSchedulerState+0x34>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004916:	2301      	movs	r3, #1
 8004918:	607b      	str	r3, [r7, #4]
 800491a:	e008      	b.n	800492e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800491c:	4b08      	ldr	r3, [pc, #32]	@ (8004940 <xTaskGetSchedulerState+0x38>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d102      	bne.n	800492a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004924:	2302      	movs	r3, #2
 8004926:	607b      	str	r3, [r7, #4]
 8004928:	e001      	b.n	800492e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800492a:	2300      	movs	r3, #0
 800492c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800492e:	687b      	ldr	r3, [r7, #4]
	}
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	20000d68 	.word	0x20000d68
 8004940:	20000d84 	.word	0x20000d84

08004944 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004950:	2300      	movs	r3, #0
 8004952:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d058      	beq.n	8004a0c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800495a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a18 <xTaskPriorityDisinherit+0xd4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	429a      	cmp	r2, r3
 8004962:	d00b      	beq.n	800497c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	60fb      	str	r3, [r7, #12]
}
 8004976:	bf00      	nop
 8004978:	bf00      	nop
 800497a:	e7fd      	b.n	8004978 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10b      	bne.n	800499c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	60bb      	str	r3, [r7, #8]
}
 8004996:	bf00      	nop
 8004998:	bf00      	nop
 800499a:	e7fd      	b.n	8004998 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a0:	1e5a      	subs	r2, r3, #1
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d02c      	beq.n	8004a0c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d128      	bne.n	8004a0c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	3304      	adds	r3, #4
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fe fc26 	bl	8003210 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049dc:	4b0f      	ldr	r3, [pc, #60]	@ (8004a1c <xTaskPriorityDisinherit+0xd8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d903      	bls.n	80049ec <xTaskPriorityDisinherit+0xa8>
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e8:	4a0c      	ldr	r2, [pc, #48]	@ (8004a1c <xTaskPriorityDisinherit+0xd8>)
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f0:	4613      	mov	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4a09      	ldr	r2, [pc, #36]	@ (8004a20 <xTaskPriorityDisinherit+0xdc>)
 80049fa:	441a      	add	r2, r3
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f7fe fba7 	bl	8003156 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a0c:	697b      	ldr	r3, [r7, #20]
	}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20000888 	.word	0x20000888
 8004a1c:	20000d64 	.word	0x20000d64
 8004a20:	2000088c 	.word	0x2000088c

08004a24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a2e:	4b21      	ldr	r3, [pc, #132]	@ (8004ab4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a34:	4b20      	ldr	r3, [pc, #128]	@ (8004ab8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fe fbe8 	bl	8003210 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a46:	d10a      	bne.n	8004a5e <prvAddCurrentTaskToDelayedList+0x3a>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d007      	beq.n	8004a5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3304      	adds	r3, #4
 8004a54:	4619      	mov	r1, r3
 8004a56:	4819      	ldr	r0, [pc, #100]	@ (8004abc <prvAddCurrentTaskToDelayedList+0x98>)
 8004a58:	f7fe fb7d 	bl	8003156 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a5c:	e026      	b.n	8004aac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4413      	add	r3, r2
 8004a64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a66:	4b14      	ldr	r3, [pc, #80]	@ (8004ab8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d209      	bcs.n	8004a8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a76:	4b12      	ldr	r3, [pc, #72]	@ (8004ac0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f7fe fb8b 	bl	800319e <vListInsert>
}
 8004a88:	e010      	b.n	8004aac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3304      	adds	r3, #4
 8004a94:	4619      	mov	r1, r3
 8004a96:	4610      	mov	r0, r2
 8004a98:	f7fe fb81 	bl	800319e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d202      	bcs.n	8004aac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004aa6:	4a08      	ldr	r2, [pc, #32]	@ (8004ac8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	6013      	str	r3, [r2, #0]
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20000d60 	.word	0x20000d60
 8004ab8:	20000888 	.word	0x20000888
 8004abc:	20000d48 	.word	0x20000d48
 8004ac0:	20000d18 	.word	0x20000d18
 8004ac4:	20000d14 	.word	0x20000d14
 8004ac8:	20000d7c 	.word	0x20000d7c

08004acc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08a      	sub	sp, #40	@ 0x28
 8004ad0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004ad6:	f000 fb13 	bl	8005100 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004ada:	4b1d      	ldr	r3, [pc, #116]	@ (8004b50 <xTimerCreateTimerTask+0x84>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d021      	beq.n	8004b26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004aea:	1d3a      	adds	r2, r7, #4
 8004aec:	f107 0108 	add.w	r1, r7, #8
 8004af0:	f107 030c 	add.w	r3, r7, #12
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe fae7 	bl	80030c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	9202      	str	r2, [sp, #8]
 8004b02:	9301      	str	r3, [sp, #4]
 8004b04:	2302      	movs	r3, #2
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	460a      	mov	r2, r1
 8004b0c:	4911      	ldr	r1, [pc, #68]	@ (8004b54 <xTimerCreateTimerTask+0x88>)
 8004b0e:	4812      	ldr	r0, [pc, #72]	@ (8004b58 <xTimerCreateTimerTask+0x8c>)
 8004b10:	f7ff f8a2 	bl	8003c58 <xTaskCreateStatic>
 8004b14:	4603      	mov	r3, r0
 8004b16:	4a11      	ldr	r2, [pc, #68]	@ (8004b5c <xTimerCreateTimerTask+0x90>)
 8004b18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b1a:	4b10      	ldr	r3, [pc, #64]	@ (8004b5c <xTimerCreateTimerTask+0x90>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b22:	2301      	movs	r3, #1
 8004b24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10b      	bne.n	8004b44 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	613b      	str	r3, [r7, #16]
}
 8004b3e:	bf00      	nop
 8004b40:	bf00      	nop
 8004b42:	e7fd      	b.n	8004b40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b44:	697b      	ldr	r3, [r7, #20]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000db8 	.word	0x20000db8
 8004b54:	08005c04 	.word	0x08005c04
 8004b58:	08004c99 	.word	0x08004c99
 8004b5c:	20000dbc 	.word	0x20000dbc

08004b60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08a      	sub	sp, #40	@ 0x28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10b      	bne.n	8004b90 <xTimerGenericCommand+0x30>
	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	623b      	str	r3, [r7, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	bf00      	nop
 8004b8e:	e7fd      	b.n	8004b8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b90:	4b19      	ldr	r3, [pc, #100]	@ (8004bf8 <xTimerGenericCommand+0x98>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d02a      	beq.n	8004bee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b05      	cmp	r3, #5
 8004ba8:	dc18      	bgt.n	8004bdc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004baa:	f7ff fead 	bl	8004908 <xTaskGetSchedulerState>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d109      	bne.n	8004bc8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004bb4:	4b10      	ldr	r3, [pc, #64]	@ (8004bf8 <xTimerGenericCommand+0x98>)
 8004bb6:	6818      	ldr	r0, [r3, #0]
 8004bb8:	f107 0110 	add.w	r1, r7, #16
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bc0:	f7fe fc5a 	bl	8003478 <xQueueGenericSend>
 8004bc4:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bc6:	e012      	b.n	8004bee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf8 <xTimerGenericCommand+0x98>)
 8004bca:	6818      	ldr	r0, [r3, #0]
 8004bcc:	f107 0110 	add.w	r1, r7, #16
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f7fe fc50 	bl	8003478 <xQueueGenericSend>
 8004bd8:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bda:	e008      	b.n	8004bee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004bdc:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <xTimerGenericCommand+0x98>)
 8004bde:	6818      	ldr	r0, [r3, #0]
 8004be0:	f107 0110 	add.w	r1, r7, #16
 8004be4:	2300      	movs	r3, #0
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	f7fe fd48 	bl	800367c <xQueueGenericSendFromISR>
 8004bec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3728      	adds	r7, #40	@ 0x28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	20000db8 	.word	0x20000db8

08004bfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c06:	4b23      	ldr	r3, [pc, #140]	@ (8004c94 <prvProcessExpiredTimer+0x98>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	3304      	adds	r3, #4
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fe fafb 	bl	8003210 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d023      	beq.n	8004c70 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	699a      	ldr	r2, [r3, #24]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	18d1      	adds	r1, r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	6978      	ldr	r0, [r7, #20]
 8004c36:	f000 f8d5 	bl	8004de4 <prvInsertTimerInActiveList>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d020      	beq.n	8004c82 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c40:	2300      	movs	r3, #0
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	2300      	movs	r3, #0
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	2100      	movs	r1, #0
 8004c4a:	6978      	ldr	r0, [r7, #20]
 8004c4c:	f7ff ff88 	bl	8004b60 <xTimerGenericCommand>
 8004c50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d114      	bne.n	8004c82 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	60fb      	str	r3, [r7, #12]
}
 8004c6a:	bf00      	nop
 8004c6c:	bf00      	nop
 8004c6e:	e7fd      	b.n	8004c6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c76:	f023 0301 	bic.w	r3, r3, #1
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	6978      	ldr	r0, [r7, #20]
 8004c88:	4798      	blx	r3
}
 8004c8a:	bf00      	nop
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000db0 	.word	0x20000db0

08004c98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ca0:	f107 0308 	add.w	r3, r7, #8
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 f859 	bl	8004d5c <prvGetNextExpireTime>
 8004caa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4619      	mov	r1, r3
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 f805 	bl	8004cc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004cb6:	f000 f8d7 	bl	8004e68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cba:	bf00      	nop
 8004cbc:	e7f0      	b.n	8004ca0 <prvTimerTask+0x8>
	...

08004cc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004cca:	f7ff fa29 	bl	8004120 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cce:	f107 0308 	add.w	r3, r7, #8
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 f866 	bl	8004da4 <prvSampleTimeNow>
 8004cd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d130      	bne.n	8004d42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10a      	bne.n	8004cfc <prvProcessTimerOrBlockTask+0x3c>
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d806      	bhi.n	8004cfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004cee:	f7ff fa25 	bl	800413c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004cf2:	68f9      	ldr	r1, [r7, #12]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff ff81 	bl	8004bfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004cfa:	e024      	b.n	8004d46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d008      	beq.n	8004d14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d02:	4b13      	ldr	r3, [pc, #76]	@ (8004d50 <prvProcessTimerOrBlockTask+0x90>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <prvProcessTimerOrBlockTask+0x50>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <prvProcessTimerOrBlockTask+0x52>
 8004d10:	2300      	movs	r3, #0
 8004d12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d14:	4b0f      	ldr	r3, [pc, #60]	@ (8004d54 <prvProcessTimerOrBlockTask+0x94>)
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	4619      	mov	r1, r3
 8004d22:	f7fe ff65 	bl	8003bf0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d26:	f7ff fa09 	bl	800413c <xTaskResumeAll>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d30:	4b09      	ldr	r3, [pc, #36]	@ (8004d58 <prvProcessTimerOrBlockTask+0x98>)
 8004d32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	f3bf 8f6f 	isb	sy
}
 8004d40:	e001      	b.n	8004d46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d42:	f7ff f9fb 	bl	800413c <xTaskResumeAll>
}
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000db4 	.word	0x20000db4
 8004d54:	20000db8 	.word	0x20000db8
 8004d58:	e000ed04 	.word	0xe000ed04

08004d5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d64:	4b0e      	ldr	r3, [pc, #56]	@ (8004da0 <prvGetNextExpireTime+0x44>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <prvGetNextExpireTime+0x16>
 8004d6e:	2201      	movs	r2, #1
 8004d70:	e000      	b.n	8004d74 <prvGetNextExpireTime+0x18>
 8004d72:	2200      	movs	r2, #0
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d105      	bne.n	8004d8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d80:	4b07      	ldr	r3, [pc, #28]	@ (8004da0 <prvGetNextExpireTime+0x44>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	e001      	b.n	8004d90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d90:	68fb      	ldr	r3, [r7, #12]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20000db0 	.word	0x20000db0

08004da4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004dac:	f7ff fa64 	bl	8004278 <xTaskGetTickCount>
 8004db0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004db2:	4b0b      	ldr	r3, [pc, #44]	@ (8004de0 <prvSampleTimeNow+0x3c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d205      	bcs.n	8004dc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004dbc:	f000 f93a 	bl	8005034 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	e002      	b.n	8004dce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004dce:	4a04      	ldr	r2, [pc, #16]	@ (8004de0 <prvSampleTimeNow+0x3c>)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000dc0 	.word	0x20000dc0

08004de4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d812      	bhi.n	8004e30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	1ad2      	subs	r2, r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d302      	bcc.n	8004e1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	e01b      	b.n	8004e56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e1e:	4b10      	ldr	r3, [pc, #64]	@ (8004e60 <prvInsertTimerInActiveList+0x7c>)
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3304      	adds	r3, #4
 8004e26:	4619      	mov	r1, r3
 8004e28:	4610      	mov	r0, r2
 8004e2a:	f7fe f9b8 	bl	800319e <vListInsert>
 8004e2e:	e012      	b.n	8004e56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d206      	bcs.n	8004e46 <prvInsertTimerInActiveList+0x62>
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d302      	bcc.n	8004e46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e40:	2301      	movs	r3, #1
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e007      	b.n	8004e56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e46:	4b07      	ldr	r3, [pc, #28]	@ (8004e64 <prvInsertTimerInActiveList+0x80>)
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4610      	mov	r0, r2
 8004e52:	f7fe f9a4 	bl	800319e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e56:	697b      	ldr	r3, [r7, #20]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	20000db4 	.word	0x20000db4
 8004e64:	20000db0 	.word	0x20000db0

08004e68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08e      	sub	sp, #56	@ 0x38
 8004e6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e6e:	e0ce      	b.n	800500e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	da19      	bge.n	8004eaa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004e76:	1d3b      	adds	r3, r7, #4
 8004e78:	3304      	adds	r3, #4
 8004e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10b      	bne.n	8004e9a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	61fb      	str	r3, [r7, #28]
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop
 8004e98:	e7fd      	b.n	8004e96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ea0:	6850      	ldr	r0, [r2, #4]
 8004ea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ea4:	6892      	ldr	r2, [r2, #8]
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f2c0 80ae 	blt.w	800500e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d004      	beq.n	8004ec8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe f9a4 	bl	8003210 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ec8:	463b      	mov	r3, r7
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff ff6a 	bl	8004da4 <prvSampleTimeNow>
 8004ed0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b09      	cmp	r3, #9
 8004ed6:	f200 8097 	bhi.w	8005008 <prvProcessReceivedCommands+0x1a0>
 8004eda:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee0 <prvProcessReceivedCommands+0x78>)
 8004edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee0:	08004f09 	.word	0x08004f09
 8004ee4:	08004f09 	.word	0x08004f09
 8004ee8:	08004f09 	.word	0x08004f09
 8004eec:	08004f7f 	.word	0x08004f7f
 8004ef0:	08004f93 	.word	0x08004f93
 8004ef4:	08004fdf 	.word	0x08004fdf
 8004ef8:	08004f09 	.word	0x08004f09
 8004efc:	08004f09 	.word	0x08004f09
 8004f00:	08004f7f 	.word	0x08004f7f
 8004f04:	08004f93 	.word	0x08004f93
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f0e:	f043 0301 	orr.w	r3, r3, #1
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	18d1      	adds	r1, r2, r3
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f28:	f7ff ff5c 	bl	8004de4 <prvInsertTimerInActiveList>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d06c      	beq.n	800500c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d061      	beq.n	800500c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	441a      	add	r2, r3
 8004f50:	2300      	movs	r3, #0
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	2300      	movs	r3, #0
 8004f56:	2100      	movs	r1, #0
 8004f58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f5a:	f7ff fe01 	bl	8004b60 <xTimerGenericCommand>
 8004f5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d152      	bne.n	800500c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	61bb      	str	r3, [r7, #24]
}
 8004f78:	bf00      	nop
 8004f7a:	bf00      	nop
 8004f7c:	e7fd      	b.n	8004f7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f84:	f023 0301 	bic.w	r3, r3, #1
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004f90:	e03d      	b.n	800500e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f98:	f043 0301 	orr.w	r3, r3, #1
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10b      	bne.n	8004fca <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	617b      	str	r3, [r7, #20]
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	e7fd      	b.n	8004fc6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd0:	18d1      	adds	r1, r2, r3
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fd8:	f7ff ff04 	bl	8004de4 <prvInsertTimerInActiveList>
					break;
 8004fdc:	e017      	b.n	800500e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d103      	bne.n	8004ff4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004fec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fee:	f000 fbeb 	bl	80057c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ff2:	e00c      	b.n	800500e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ffa:	f023 0301 	bic.w	r3, r3, #1
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005002:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005006:	e002      	b.n	800500e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005008:	bf00      	nop
 800500a:	e000      	b.n	800500e <prvProcessReceivedCommands+0x1a6>
					break;
 800500c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800500e:	4b08      	ldr	r3, [pc, #32]	@ (8005030 <prvProcessReceivedCommands+0x1c8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	1d39      	adds	r1, r7, #4
 8005014:	2200      	movs	r2, #0
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe fbce 	bl	80037b8 <xQueueReceive>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	f47f af26 	bne.w	8004e70 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	3730      	adds	r7, #48	@ 0x30
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000db8 	.word	0x20000db8

08005034 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800503a:	e049      	b.n	80050d0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800503c:	4b2e      	ldr	r3, [pc, #184]	@ (80050f8 <prvSwitchTimerLists+0xc4>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005046:	4b2c      	ldr	r3, [pc, #176]	@ (80050f8 <prvSwitchTimerLists+0xc4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	3304      	adds	r3, #4
 8005054:	4618      	mov	r0, r3
 8005056:	f7fe f8db 	bl	8003210 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d02f      	beq.n	80050d0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4413      	add	r3, r2
 8005078:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	429a      	cmp	r2, r3
 8005080:	d90e      	bls.n	80050a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800508e:	4b1a      	ldr	r3, [pc, #104]	@ (80050f8 <prvSwitchTimerLists+0xc4>)
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3304      	adds	r3, #4
 8005096:	4619      	mov	r1, r3
 8005098:	4610      	mov	r0, r2
 800509a:	f7fe f880 	bl	800319e <vListInsert>
 800509e:	e017      	b.n	80050d0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050a0:	2300      	movs	r3, #0
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	2300      	movs	r3, #0
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	2100      	movs	r1, #0
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f7ff fd58 	bl	8004b60 <xTimerGenericCommand>
 80050b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10b      	bne.n	80050d0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	603b      	str	r3, [r7, #0]
}
 80050ca:	bf00      	nop
 80050cc:	bf00      	nop
 80050ce:	e7fd      	b.n	80050cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050d0:	4b09      	ldr	r3, [pc, #36]	@ (80050f8 <prvSwitchTimerLists+0xc4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1b0      	bne.n	800503c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80050da:	4b07      	ldr	r3, [pc, #28]	@ (80050f8 <prvSwitchTimerLists+0xc4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80050e0:	4b06      	ldr	r3, [pc, #24]	@ (80050fc <prvSwitchTimerLists+0xc8>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a04      	ldr	r2, [pc, #16]	@ (80050f8 <prvSwitchTimerLists+0xc4>)
 80050e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80050e8:	4a04      	ldr	r2, [pc, #16]	@ (80050fc <prvSwitchTimerLists+0xc8>)
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	6013      	str	r3, [r2, #0]
}
 80050ee:	bf00      	nop
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000db0 	.word	0x20000db0
 80050fc:	20000db4 	.word	0x20000db4

08005100 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005106:	f000 f96f 	bl	80053e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800510a:	4b15      	ldr	r3, [pc, #84]	@ (8005160 <prvCheckForValidListAndQueue+0x60>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d120      	bne.n	8005154 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005112:	4814      	ldr	r0, [pc, #80]	@ (8005164 <prvCheckForValidListAndQueue+0x64>)
 8005114:	f7fd fff2 	bl	80030fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005118:	4813      	ldr	r0, [pc, #76]	@ (8005168 <prvCheckForValidListAndQueue+0x68>)
 800511a:	f7fd ffef 	bl	80030fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800511e:	4b13      	ldr	r3, [pc, #76]	@ (800516c <prvCheckForValidListAndQueue+0x6c>)
 8005120:	4a10      	ldr	r2, [pc, #64]	@ (8005164 <prvCheckForValidListAndQueue+0x64>)
 8005122:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005124:	4b12      	ldr	r3, [pc, #72]	@ (8005170 <prvCheckForValidListAndQueue+0x70>)
 8005126:	4a10      	ldr	r2, [pc, #64]	@ (8005168 <prvCheckForValidListAndQueue+0x68>)
 8005128:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800512a:	2300      	movs	r3, #0
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	4b11      	ldr	r3, [pc, #68]	@ (8005174 <prvCheckForValidListAndQueue+0x74>)
 8005130:	4a11      	ldr	r2, [pc, #68]	@ (8005178 <prvCheckForValidListAndQueue+0x78>)
 8005132:	2110      	movs	r1, #16
 8005134:	200a      	movs	r0, #10
 8005136:	f7fe f8ff 	bl	8003338 <xQueueGenericCreateStatic>
 800513a:	4603      	mov	r3, r0
 800513c:	4a08      	ldr	r2, [pc, #32]	@ (8005160 <prvCheckForValidListAndQueue+0x60>)
 800513e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005140:	4b07      	ldr	r3, [pc, #28]	@ (8005160 <prvCheckForValidListAndQueue+0x60>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005148:	4b05      	ldr	r3, [pc, #20]	@ (8005160 <prvCheckForValidListAndQueue+0x60>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	490b      	ldr	r1, [pc, #44]	@ (800517c <prvCheckForValidListAndQueue+0x7c>)
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe fd24 	bl	8003b9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005154:	f000 f97a 	bl	800544c <vPortExitCritical>
}
 8005158:	bf00      	nop
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20000db8 	.word	0x20000db8
 8005164:	20000d88 	.word	0x20000d88
 8005168:	20000d9c 	.word	0x20000d9c
 800516c:	20000db0 	.word	0x20000db0
 8005170:	20000db4 	.word	0x20000db4
 8005174:	20000e64 	.word	0x20000e64
 8005178:	20000dc4 	.word	0x20000dc4
 800517c:	08005c0c 	.word	0x08005c0c

08005180 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	3b04      	subs	r3, #4
 8005190:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3b04      	subs	r3, #4
 800519e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f023 0201 	bic.w	r2, r3, #1
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3b04      	subs	r3, #4
 80051ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051b0:	4a0c      	ldr	r2, [pc, #48]	@ (80051e4 <pxPortInitialiseStack+0x64>)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3b14      	subs	r3, #20
 80051ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3b04      	subs	r3, #4
 80051c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f06f 0202 	mvn.w	r2, #2
 80051ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3b20      	subs	r3, #32
 80051d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051d6:	68fb      	ldr	r3, [r7, #12]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	080051e9 	.word	0x080051e9

080051e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051f2:	4b13      	ldr	r3, [pc, #76]	@ (8005240 <prvTaskExitError+0x58>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051fa:	d00b      	beq.n	8005214 <prvTaskExitError+0x2c>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	60fb      	str	r3, [r7, #12]
}
 800520e:	bf00      	nop
 8005210:	bf00      	nop
 8005212:	e7fd      	b.n	8005210 <prvTaskExitError+0x28>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	60bb      	str	r3, [r7, #8]
}
 8005226:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005228:	bf00      	nop
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0fc      	beq.n	800522a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	2000000c 	.word	0x2000000c
	...

08005250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005250:	4b07      	ldr	r3, [pc, #28]	@ (8005270 <pxCurrentTCBConst2>)
 8005252:	6819      	ldr	r1, [r3, #0]
 8005254:	6808      	ldr	r0, [r1, #0]
 8005256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525a:	f380 8809 	msr	PSP, r0
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f04f 0000 	mov.w	r0, #0
 8005266:	f380 8811 	msr	BASEPRI, r0
 800526a:	4770      	bx	lr
 800526c:	f3af 8000 	nop.w

08005270 <pxCurrentTCBConst2>:
 8005270:	20000888 	.word	0x20000888
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop

08005278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005278:	4808      	ldr	r0, [pc, #32]	@ (800529c <prvPortStartFirstTask+0x24>)
 800527a:	6800      	ldr	r0, [r0, #0]
 800527c:	6800      	ldr	r0, [r0, #0]
 800527e:	f380 8808 	msr	MSP, r0
 8005282:	f04f 0000 	mov.w	r0, #0
 8005286:	f380 8814 	msr	CONTROL, r0
 800528a:	b662      	cpsie	i
 800528c:	b661      	cpsie	f
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	df00      	svc	0
 8005298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800529a:	bf00      	nop
 800529c:	e000ed08 	.word	0xe000ed08

080052a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052a6:	4b47      	ldr	r3, [pc, #284]	@ (80053c4 <xPortStartScheduler+0x124>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a47      	ldr	r2, [pc, #284]	@ (80053c8 <xPortStartScheduler+0x128>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d10b      	bne.n	80052c8 <xPortStartScheduler+0x28>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	613b      	str	r3, [r7, #16]
}
 80052c2:	bf00      	nop
 80052c4:	bf00      	nop
 80052c6:	e7fd      	b.n	80052c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052c8:	4b3e      	ldr	r3, [pc, #248]	@ (80053c4 <xPortStartScheduler+0x124>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a3f      	ldr	r2, [pc, #252]	@ (80053cc <xPortStartScheduler+0x12c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d10b      	bne.n	80052ea <xPortStartScheduler+0x4a>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	60fb      	str	r3, [r7, #12]
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	e7fd      	b.n	80052e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052ea:	4b39      	ldr	r3, [pc, #228]	@ (80053d0 <xPortStartScheduler+0x130>)
 80052ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	22ff      	movs	r2, #255	@ 0xff
 80052fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800530c:	b2da      	uxtb	r2, r3
 800530e:	4b31      	ldr	r3, [pc, #196]	@ (80053d4 <xPortStartScheduler+0x134>)
 8005310:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005312:	4b31      	ldr	r3, [pc, #196]	@ (80053d8 <xPortStartScheduler+0x138>)
 8005314:	2207      	movs	r2, #7
 8005316:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005318:	e009      	b.n	800532e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800531a:	4b2f      	ldr	r3, [pc, #188]	@ (80053d8 <xPortStartScheduler+0x138>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3b01      	subs	r3, #1
 8005320:	4a2d      	ldr	r2, [pc, #180]	@ (80053d8 <xPortStartScheduler+0x138>)
 8005322:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	b2db      	uxtb	r3, r3
 800532c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800532e:	78fb      	ldrb	r3, [r7, #3]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005336:	2b80      	cmp	r3, #128	@ 0x80
 8005338:	d0ef      	beq.n	800531a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800533a:	4b27      	ldr	r3, [pc, #156]	@ (80053d8 <xPortStartScheduler+0x138>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f1c3 0307 	rsb	r3, r3, #7
 8005342:	2b04      	cmp	r3, #4
 8005344:	d00b      	beq.n	800535e <xPortStartScheduler+0xbe>
	__asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	60bb      	str	r3, [r7, #8]
}
 8005358:	bf00      	nop
 800535a:	bf00      	nop
 800535c:	e7fd      	b.n	800535a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800535e:	4b1e      	ldr	r3, [pc, #120]	@ (80053d8 <xPortStartScheduler+0x138>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	021b      	lsls	r3, r3, #8
 8005364:	4a1c      	ldr	r2, [pc, #112]	@ (80053d8 <xPortStartScheduler+0x138>)
 8005366:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005368:	4b1b      	ldr	r3, [pc, #108]	@ (80053d8 <xPortStartScheduler+0x138>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005370:	4a19      	ldr	r2, [pc, #100]	@ (80053d8 <xPortStartScheduler+0x138>)
 8005372:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	b2da      	uxtb	r2, r3
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800537c:	4b17      	ldr	r3, [pc, #92]	@ (80053dc <xPortStartScheduler+0x13c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a16      	ldr	r2, [pc, #88]	@ (80053dc <xPortStartScheduler+0x13c>)
 8005382:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005386:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005388:	4b14      	ldr	r3, [pc, #80]	@ (80053dc <xPortStartScheduler+0x13c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a13      	ldr	r2, [pc, #76]	@ (80053dc <xPortStartScheduler+0x13c>)
 800538e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005392:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005394:	f000 f8da 	bl	800554c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005398:	4b11      	ldr	r3, [pc, #68]	@ (80053e0 <xPortStartScheduler+0x140>)
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800539e:	f000 f8f9 	bl	8005594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053a2:	4b10      	ldr	r3, [pc, #64]	@ (80053e4 <xPortStartScheduler+0x144>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a0f      	ldr	r2, [pc, #60]	@ (80053e4 <xPortStartScheduler+0x144>)
 80053a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80053ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053ae:	f7ff ff63 	bl	8005278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053b2:	f7ff f82b 	bl	800440c <vTaskSwitchContext>
	prvTaskExitError();
 80053b6:	f7ff ff17 	bl	80051e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	e000ed00 	.word	0xe000ed00
 80053c8:	410fc271 	.word	0x410fc271
 80053cc:	410fc270 	.word	0x410fc270
 80053d0:	e000e400 	.word	0xe000e400
 80053d4:	20000eb4 	.word	0x20000eb4
 80053d8:	20000eb8 	.word	0x20000eb8
 80053dc:	e000ed20 	.word	0xe000ed20
 80053e0:	2000000c 	.word	0x2000000c
 80053e4:	e000ef34 	.word	0xe000ef34

080053e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	607b      	str	r3, [r7, #4]
}
 8005400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005402:	4b10      	ldr	r3, [pc, #64]	@ (8005444 <vPortEnterCritical+0x5c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3301      	adds	r3, #1
 8005408:	4a0e      	ldr	r2, [pc, #56]	@ (8005444 <vPortEnterCritical+0x5c>)
 800540a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800540c:	4b0d      	ldr	r3, [pc, #52]	@ (8005444 <vPortEnterCritical+0x5c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d110      	bne.n	8005436 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005414:	4b0c      	ldr	r3, [pc, #48]	@ (8005448 <vPortEnterCritical+0x60>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00b      	beq.n	8005436 <vPortEnterCritical+0x4e>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	603b      	str	r3, [r7, #0]
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	e7fd      	b.n	8005432 <vPortEnterCritical+0x4a>
	}
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	2000000c 	.word	0x2000000c
 8005448:	e000ed04 	.word	0xe000ed04

0800544c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005452:	4b12      	ldr	r3, [pc, #72]	@ (800549c <vPortExitCritical+0x50>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10b      	bne.n	8005472 <vPortExitCritical+0x26>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	607b      	str	r3, [r7, #4]
}
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	e7fd      	b.n	800546e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005472:	4b0a      	ldr	r3, [pc, #40]	@ (800549c <vPortExitCritical+0x50>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3b01      	subs	r3, #1
 8005478:	4a08      	ldr	r2, [pc, #32]	@ (800549c <vPortExitCritical+0x50>)
 800547a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800547c:	4b07      	ldr	r3, [pc, #28]	@ (800549c <vPortExitCritical+0x50>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d105      	bne.n	8005490 <vPortExitCritical+0x44>
 8005484:	2300      	movs	r3, #0
 8005486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	f383 8811 	msr	BASEPRI, r3
}
 800548e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	2000000c 	.word	0x2000000c

080054a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054a0:	f3ef 8009 	mrs	r0, PSP
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	4b15      	ldr	r3, [pc, #84]	@ (8005500 <pxCurrentTCBConst>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	f01e 0f10 	tst.w	lr, #16
 80054b0:	bf08      	it	eq
 80054b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ba:	6010      	str	r0, [r2, #0]
 80054bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80054c4:	f380 8811 	msr	BASEPRI, r0
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f7fe ff9c 	bl	800440c <vTaskSwitchContext>
 80054d4:	f04f 0000 	mov.w	r0, #0
 80054d8:	f380 8811 	msr	BASEPRI, r0
 80054dc:	bc09      	pop	{r0, r3}
 80054de:	6819      	ldr	r1, [r3, #0]
 80054e0:	6808      	ldr	r0, [r1, #0]
 80054e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e6:	f01e 0f10 	tst.w	lr, #16
 80054ea:	bf08      	it	eq
 80054ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054f0:	f380 8809 	msr	PSP, r0
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	f3af 8000 	nop.w

08005500 <pxCurrentTCBConst>:
 8005500:	20000888 	.word	0x20000888
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop

08005508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	607b      	str	r3, [r7, #4]
}
 8005520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005522:	f7fe feb9 	bl	8004298 <xTaskIncrementTick>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800552c:	4b06      	ldr	r3, [pc, #24]	@ (8005548 <xPortSysTickHandler+0x40>)
 800552e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	2300      	movs	r3, #0
 8005536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	f383 8811 	msr	BASEPRI, r3
}
 800553e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005540:	bf00      	nop
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	e000ed04 	.word	0xe000ed04

0800554c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005550:	4b0b      	ldr	r3, [pc, #44]	@ (8005580 <vPortSetupTimerInterrupt+0x34>)
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005556:	4b0b      	ldr	r3, [pc, #44]	@ (8005584 <vPortSetupTimerInterrupt+0x38>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800555c:	4b0a      	ldr	r3, [pc, #40]	@ (8005588 <vPortSetupTimerInterrupt+0x3c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a0a      	ldr	r2, [pc, #40]	@ (800558c <vPortSetupTimerInterrupt+0x40>)
 8005562:	fba2 2303 	umull	r2, r3, r2, r3
 8005566:	099b      	lsrs	r3, r3, #6
 8005568:	4a09      	ldr	r2, [pc, #36]	@ (8005590 <vPortSetupTimerInterrupt+0x44>)
 800556a:	3b01      	subs	r3, #1
 800556c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800556e:	4b04      	ldr	r3, [pc, #16]	@ (8005580 <vPortSetupTimerInterrupt+0x34>)
 8005570:	2207      	movs	r2, #7
 8005572:	601a      	str	r2, [r3, #0]
}
 8005574:	bf00      	nop
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	e000e010 	.word	0xe000e010
 8005584:	e000e018 	.word	0xe000e018
 8005588:	20000000 	.word	0x20000000
 800558c:	10624dd3 	.word	0x10624dd3
 8005590:	e000e014 	.word	0xe000e014

08005594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005594:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80055a4 <vPortEnableVFP+0x10>
 8005598:	6801      	ldr	r1, [r0, #0]
 800559a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800559e:	6001      	str	r1, [r0, #0]
 80055a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80055a2:	bf00      	nop
 80055a4:	e000ed88 	.word	0xe000ed88

080055a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80055ae:	f3ef 8305 	mrs	r3, IPSR
 80055b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b0f      	cmp	r3, #15
 80055b8:	d915      	bls.n	80055e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80055ba:	4a18      	ldr	r2, [pc, #96]	@ (800561c <vPortValidateInterruptPriority+0x74>)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055c4:	4b16      	ldr	r3, [pc, #88]	@ (8005620 <vPortValidateInterruptPriority+0x78>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	7afa      	ldrb	r2, [r7, #11]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d20b      	bcs.n	80055e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	607b      	str	r3, [r7, #4]
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	e7fd      	b.n	80055e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005624 <vPortValidateInterruptPriority+0x7c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80055ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005628 <vPortValidateInterruptPriority+0x80>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d90b      	bls.n	800560e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	603b      	str	r3, [r7, #0]
}
 8005608:	bf00      	nop
 800560a:	bf00      	nop
 800560c:	e7fd      	b.n	800560a <vPortValidateInterruptPriority+0x62>
	}
 800560e:	bf00      	nop
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	e000e3f0 	.word	0xe000e3f0
 8005620:	20000eb4 	.word	0x20000eb4
 8005624:	e000ed0c 	.word	0xe000ed0c
 8005628:	20000eb8 	.word	0x20000eb8

0800562c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08a      	sub	sp, #40	@ 0x28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005634:	2300      	movs	r3, #0
 8005636:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005638:	f7fe fd72 	bl	8004120 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800563c:	4b5c      	ldr	r3, [pc, #368]	@ (80057b0 <pvPortMalloc+0x184>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005644:	f000 f924 	bl	8005890 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005648:	4b5a      	ldr	r3, [pc, #360]	@ (80057b4 <pvPortMalloc+0x188>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4013      	ands	r3, r2
 8005650:	2b00      	cmp	r3, #0
 8005652:	f040 8095 	bne.w	8005780 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d01e      	beq.n	800569a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800565c:	2208      	movs	r2, #8
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4413      	add	r3, r2
 8005662:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	2b00      	cmp	r3, #0
 800566c:	d015      	beq.n	800569a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f023 0307 	bic.w	r3, r3, #7
 8005674:	3308      	adds	r3, #8
 8005676:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00b      	beq.n	800569a <pvPortMalloc+0x6e>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	617b      	str	r3, [r7, #20]
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	e7fd      	b.n	8005696 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d06f      	beq.n	8005780 <pvPortMalloc+0x154>
 80056a0:	4b45      	ldr	r3, [pc, #276]	@ (80057b8 <pvPortMalloc+0x18c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d86a      	bhi.n	8005780 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056aa:	4b44      	ldr	r3, [pc, #272]	@ (80057bc <pvPortMalloc+0x190>)
 80056ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056ae:	4b43      	ldr	r3, [pc, #268]	@ (80057bc <pvPortMalloc+0x190>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056b4:	e004      	b.n	80056c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d903      	bls.n	80056d2 <pvPortMalloc+0xa6>
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f1      	bne.n	80056b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056d2:	4b37      	ldr	r3, [pc, #220]	@ (80057b0 <pvPortMalloc+0x184>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056d8:	429a      	cmp	r2, r3
 80056da:	d051      	beq.n	8005780 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2208      	movs	r2, #8
 80056e2:	4413      	add	r3, r2
 80056e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	1ad2      	subs	r2, r2, r3
 80056f6:	2308      	movs	r3, #8
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d920      	bls.n	8005740 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4413      	add	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00b      	beq.n	8005728 <pvPortMalloc+0xfc>
	__asm volatile
 8005710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	613b      	str	r3, [r7, #16]
}
 8005722:	bf00      	nop
 8005724:	bf00      	nop
 8005726:	e7fd      	b.n	8005724 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	1ad2      	subs	r2, r2, r3
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800573a:	69b8      	ldr	r0, [r7, #24]
 800573c:	f000 f90a 	bl	8005954 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005740:	4b1d      	ldr	r3, [pc, #116]	@ (80057b8 <pvPortMalloc+0x18c>)
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	4a1b      	ldr	r2, [pc, #108]	@ (80057b8 <pvPortMalloc+0x18c>)
 800574c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800574e:	4b1a      	ldr	r3, [pc, #104]	@ (80057b8 <pvPortMalloc+0x18c>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4b1b      	ldr	r3, [pc, #108]	@ (80057c0 <pvPortMalloc+0x194>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d203      	bcs.n	8005762 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800575a:	4b17      	ldr	r3, [pc, #92]	@ (80057b8 <pvPortMalloc+0x18c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a18      	ldr	r2, [pc, #96]	@ (80057c0 <pvPortMalloc+0x194>)
 8005760:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	4b13      	ldr	r3, [pc, #76]	@ (80057b4 <pvPortMalloc+0x188>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	431a      	orrs	r2, r3
 800576c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005776:	4b13      	ldr	r3, [pc, #76]	@ (80057c4 <pvPortMalloc+0x198>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3301      	adds	r3, #1
 800577c:	4a11      	ldr	r2, [pc, #68]	@ (80057c4 <pvPortMalloc+0x198>)
 800577e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005780:	f7fe fcdc 	bl	800413c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00b      	beq.n	80057a6 <pvPortMalloc+0x17a>
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	60fb      	str	r3, [r7, #12]
}
 80057a0:	bf00      	nop
 80057a2:	bf00      	nop
 80057a4:	e7fd      	b.n	80057a2 <pvPortMalloc+0x176>
	return pvReturn;
 80057a6:	69fb      	ldr	r3, [r7, #28]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3728      	adds	r7, #40	@ 0x28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20004ac4 	.word	0x20004ac4
 80057b4:	20004ad8 	.word	0x20004ad8
 80057b8:	20004ac8 	.word	0x20004ac8
 80057bc:	20004abc 	.word	0x20004abc
 80057c0:	20004acc 	.word	0x20004acc
 80057c4:	20004ad0 	.word	0x20004ad0

080057c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d04f      	beq.n	800587a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057da:	2308      	movs	r3, #8
 80057dc:	425b      	negs	r3, r3
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4413      	add	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	4b25      	ldr	r3, [pc, #148]	@ (8005884 <vPortFree+0xbc>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4013      	ands	r3, r2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <vPortFree+0x46>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	60fb      	str	r3, [r7, #12]
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	e7fd      	b.n	800580a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00b      	beq.n	800582e <vPortFree+0x66>
	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	60bb      	str	r3, [r7, #8]
}
 8005828:	bf00      	nop
 800582a:	bf00      	nop
 800582c:	e7fd      	b.n	800582a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	4b14      	ldr	r3, [pc, #80]	@ (8005884 <vPortFree+0xbc>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4013      	ands	r3, r2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d01e      	beq.n	800587a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d11a      	bne.n	800587a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	4b0e      	ldr	r3, [pc, #56]	@ (8005884 <vPortFree+0xbc>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	43db      	mvns	r3, r3
 800584e:	401a      	ands	r2, r3
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005854:	f7fe fc64 	bl	8004120 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	4b0a      	ldr	r3, [pc, #40]	@ (8005888 <vPortFree+0xc0>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4413      	add	r3, r2
 8005862:	4a09      	ldr	r2, [pc, #36]	@ (8005888 <vPortFree+0xc0>)
 8005864:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005866:	6938      	ldr	r0, [r7, #16]
 8005868:	f000 f874 	bl	8005954 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800586c:	4b07      	ldr	r3, [pc, #28]	@ (800588c <vPortFree+0xc4>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3301      	adds	r3, #1
 8005872:	4a06      	ldr	r2, [pc, #24]	@ (800588c <vPortFree+0xc4>)
 8005874:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005876:	f7fe fc61 	bl	800413c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800587a:	bf00      	nop
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20004ad8 	.word	0x20004ad8
 8005888:	20004ac8 	.word	0x20004ac8
 800588c:	20004ad4 	.word	0x20004ad4

08005890 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005896:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800589a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800589c:	4b27      	ldr	r3, [pc, #156]	@ (800593c <prvHeapInit+0xac>)
 800589e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00c      	beq.n	80058c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3307      	adds	r3, #7
 80058ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0307 	bic.w	r3, r3, #7
 80058b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	4a1f      	ldr	r2, [pc, #124]	@ (800593c <prvHeapInit+0xac>)
 80058c0:	4413      	add	r3, r2
 80058c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005940 <prvHeapInit+0xb0>)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005940 <prvHeapInit+0xb0>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	4413      	add	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058dc:	2208      	movs	r2, #8
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	1a9b      	subs	r3, r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0307 	bic.w	r3, r3, #7
 80058ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4a15      	ldr	r2, [pc, #84]	@ (8005944 <prvHeapInit+0xb4>)
 80058f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058f2:	4b14      	ldr	r3, [pc, #80]	@ (8005944 <prvHeapInit+0xb4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2200      	movs	r2, #0
 80058f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058fa:	4b12      	ldr	r3, [pc, #72]	@ (8005944 <prvHeapInit+0xb4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	1ad2      	subs	r2, r2, r3
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005910:	4b0c      	ldr	r3, [pc, #48]	@ (8005944 <prvHeapInit+0xb4>)
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	4a0a      	ldr	r2, [pc, #40]	@ (8005948 <prvHeapInit+0xb8>)
 800591e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	4a09      	ldr	r2, [pc, #36]	@ (800594c <prvHeapInit+0xbc>)
 8005926:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005928:	4b09      	ldr	r3, [pc, #36]	@ (8005950 <prvHeapInit+0xc0>)
 800592a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800592e:	601a      	str	r2, [r3, #0]
}
 8005930:	bf00      	nop
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	20000ebc 	.word	0x20000ebc
 8005940:	20004abc 	.word	0x20004abc
 8005944:	20004ac4 	.word	0x20004ac4
 8005948:	20004acc 	.word	0x20004acc
 800594c:	20004ac8 	.word	0x20004ac8
 8005950:	20004ad8 	.word	0x20004ad8

08005954 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800595c:	4b28      	ldr	r3, [pc, #160]	@ (8005a00 <prvInsertBlockIntoFreeList+0xac>)
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	e002      	b.n	8005968 <prvInsertBlockIntoFreeList+0x14>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	429a      	cmp	r2, r3
 8005970:	d8f7      	bhi.n	8005962 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	4413      	add	r3, r2
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	429a      	cmp	r2, r3
 8005982:	d108      	bne.n	8005996 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	441a      	add	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	441a      	add	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d118      	bne.n	80059dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	4b15      	ldr	r3, [pc, #84]	@ (8005a04 <prvInsertBlockIntoFreeList+0xb0>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d00d      	beq.n	80059d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	441a      	add	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	e008      	b.n	80059e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005a04 <prvInsertBlockIntoFreeList+0xb0>)
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	e003      	b.n	80059e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d002      	beq.n	80059f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059f2:	bf00      	nop
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	20004abc 	.word	0x20004abc
 8005a04:	20004ac4 	.word	0x20004ac4

08005a08 <memset>:
 8005a08:	4402      	add	r2, r0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d100      	bne.n	8005a12 <memset+0xa>
 8005a10:	4770      	bx	lr
 8005a12:	f803 1b01 	strb.w	r1, [r3], #1
 8005a16:	e7f9      	b.n	8005a0c <memset+0x4>

08005a18 <_reclaim_reent>:
 8005a18:	4b29      	ldr	r3, [pc, #164]	@ (8005ac0 <_reclaim_reent+0xa8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4283      	cmp	r3, r0
 8005a1e:	b570      	push	{r4, r5, r6, lr}
 8005a20:	4604      	mov	r4, r0
 8005a22:	d04b      	beq.n	8005abc <_reclaim_reent+0xa4>
 8005a24:	69c3      	ldr	r3, [r0, #28]
 8005a26:	b1ab      	cbz	r3, 8005a54 <_reclaim_reent+0x3c>
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	b16b      	cbz	r3, 8005a48 <_reclaim_reent+0x30>
 8005a2c:	2500      	movs	r5, #0
 8005a2e:	69e3      	ldr	r3, [r4, #28]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	5959      	ldr	r1, [r3, r5]
 8005a34:	2900      	cmp	r1, #0
 8005a36:	d13b      	bne.n	8005ab0 <_reclaim_reent+0x98>
 8005a38:	3504      	adds	r5, #4
 8005a3a:	2d80      	cmp	r5, #128	@ 0x80
 8005a3c:	d1f7      	bne.n	8005a2e <_reclaim_reent+0x16>
 8005a3e:	69e3      	ldr	r3, [r4, #28]
 8005a40:	4620      	mov	r0, r4
 8005a42:	68d9      	ldr	r1, [r3, #12]
 8005a44:	f000 f872 	bl	8005b2c <_free_r>
 8005a48:	69e3      	ldr	r3, [r4, #28]
 8005a4a:	6819      	ldr	r1, [r3, #0]
 8005a4c:	b111      	cbz	r1, 8005a54 <_reclaim_reent+0x3c>
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f000 f86c 	bl	8005b2c <_free_r>
 8005a54:	6961      	ldr	r1, [r4, #20]
 8005a56:	b111      	cbz	r1, 8005a5e <_reclaim_reent+0x46>
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f000 f867 	bl	8005b2c <_free_r>
 8005a5e:	69e1      	ldr	r1, [r4, #28]
 8005a60:	b111      	cbz	r1, 8005a68 <_reclaim_reent+0x50>
 8005a62:	4620      	mov	r0, r4
 8005a64:	f000 f862 	bl	8005b2c <_free_r>
 8005a68:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005a6a:	b111      	cbz	r1, 8005a72 <_reclaim_reent+0x5a>
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f000 f85d 	bl	8005b2c <_free_r>
 8005a72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a74:	b111      	cbz	r1, 8005a7c <_reclaim_reent+0x64>
 8005a76:	4620      	mov	r0, r4
 8005a78:	f000 f858 	bl	8005b2c <_free_r>
 8005a7c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005a7e:	b111      	cbz	r1, 8005a86 <_reclaim_reent+0x6e>
 8005a80:	4620      	mov	r0, r4
 8005a82:	f000 f853 	bl	8005b2c <_free_r>
 8005a86:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005a88:	b111      	cbz	r1, 8005a90 <_reclaim_reent+0x78>
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f000 f84e 	bl	8005b2c <_free_r>
 8005a90:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005a92:	b111      	cbz	r1, 8005a9a <_reclaim_reent+0x82>
 8005a94:	4620      	mov	r0, r4
 8005a96:	f000 f849 	bl	8005b2c <_free_r>
 8005a9a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005a9c:	b111      	cbz	r1, 8005aa4 <_reclaim_reent+0x8c>
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f000 f844 	bl	8005b2c <_free_r>
 8005aa4:	6a23      	ldr	r3, [r4, #32]
 8005aa6:	b14b      	cbz	r3, 8005abc <_reclaim_reent+0xa4>
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005aae:	4718      	bx	r3
 8005ab0:	680e      	ldr	r6, [r1, #0]
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 f83a 	bl	8005b2c <_free_r>
 8005ab8:	4631      	mov	r1, r6
 8005aba:	e7bb      	b.n	8005a34 <_reclaim_reent+0x1c>
 8005abc:	bd70      	pop	{r4, r5, r6, pc}
 8005abe:	bf00      	nop
 8005ac0:	20000010 	.word	0x20000010

08005ac4 <__libc_init_array>:
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	4d0d      	ldr	r5, [pc, #52]	@ (8005afc <__libc_init_array+0x38>)
 8005ac8:	4c0d      	ldr	r4, [pc, #52]	@ (8005b00 <__libc_init_array+0x3c>)
 8005aca:	1b64      	subs	r4, r4, r5
 8005acc:	10a4      	asrs	r4, r4, #2
 8005ace:	2600      	movs	r6, #0
 8005ad0:	42a6      	cmp	r6, r4
 8005ad2:	d109      	bne.n	8005ae8 <__libc_init_array+0x24>
 8005ad4:	4d0b      	ldr	r5, [pc, #44]	@ (8005b04 <__libc_init_array+0x40>)
 8005ad6:	4c0c      	ldr	r4, [pc, #48]	@ (8005b08 <__libc_init_array+0x44>)
 8005ad8:	f000 f87e 	bl	8005bd8 <_init>
 8005adc:	1b64      	subs	r4, r4, r5
 8005ade:	10a4      	asrs	r4, r4, #2
 8005ae0:	2600      	movs	r6, #0
 8005ae2:	42a6      	cmp	r6, r4
 8005ae4:	d105      	bne.n	8005af2 <__libc_init_array+0x2e>
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aec:	4798      	blx	r3
 8005aee:	3601      	adds	r6, #1
 8005af0:	e7ee      	b.n	8005ad0 <__libc_init_array+0xc>
 8005af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af6:	4798      	blx	r3
 8005af8:	3601      	adds	r6, #1
 8005afa:	e7f2      	b.n	8005ae2 <__libc_init_array+0x1e>
 8005afc:	08005c58 	.word	0x08005c58
 8005b00:	08005c58 	.word	0x08005c58
 8005b04:	08005c58 	.word	0x08005c58
 8005b08:	08005c5c 	.word	0x08005c5c

08005b0c <__retarget_lock_acquire_recursive>:
 8005b0c:	4770      	bx	lr

08005b0e <__retarget_lock_release_recursive>:
 8005b0e:	4770      	bx	lr

08005b10 <memcpy>:
 8005b10:	440a      	add	r2, r1
 8005b12:	4291      	cmp	r1, r2
 8005b14:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005b18:	d100      	bne.n	8005b1c <memcpy+0xc>
 8005b1a:	4770      	bx	lr
 8005b1c:	b510      	push	{r4, lr}
 8005b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b26:	4291      	cmp	r1, r2
 8005b28:	d1f9      	bne.n	8005b1e <memcpy+0xe>
 8005b2a:	bd10      	pop	{r4, pc}

08005b2c <_free_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4605      	mov	r5, r0
 8005b30:	2900      	cmp	r1, #0
 8005b32:	d041      	beq.n	8005bb8 <_free_r+0x8c>
 8005b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b38:	1f0c      	subs	r4, r1, #4
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	bfb8      	it	lt
 8005b3e:	18e4      	addlt	r4, r4, r3
 8005b40:	f000 f83e 	bl	8005bc0 <__malloc_lock>
 8005b44:	4a1d      	ldr	r2, [pc, #116]	@ (8005bbc <_free_r+0x90>)
 8005b46:	6813      	ldr	r3, [r2, #0]
 8005b48:	b933      	cbnz	r3, 8005b58 <_free_r+0x2c>
 8005b4a:	6063      	str	r3, [r4, #4]
 8005b4c:	6014      	str	r4, [r2, #0]
 8005b4e:	4628      	mov	r0, r5
 8005b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b54:	f000 b83a 	b.w	8005bcc <__malloc_unlock>
 8005b58:	42a3      	cmp	r3, r4
 8005b5a:	d908      	bls.n	8005b6e <_free_r+0x42>
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	1821      	adds	r1, r4, r0
 8005b60:	428b      	cmp	r3, r1
 8005b62:	bf01      	itttt	eq
 8005b64:	6819      	ldreq	r1, [r3, #0]
 8005b66:	685b      	ldreq	r3, [r3, #4]
 8005b68:	1809      	addeq	r1, r1, r0
 8005b6a:	6021      	streq	r1, [r4, #0]
 8005b6c:	e7ed      	b.n	8005b4a <_free_r+0x1e>
 8005b6e:	461a      	mov	r2, r3
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	b10b      	cbz	r3, 8005b78 <_free_r+0x4c>
 8005b74:	42a3      	cmp	r3, r4
 8005b76:	d9fa      	bls.n	8005b6e <_free_r+0x42>
 8005b78:	6811      	ldr	r1, [r2, #0]
 8005b7a:	1850      	adds	r0, r2, r1
 8005b7c:	42a0      	cmp	r0, r4
 8005b7e:	d10b      	bne.n	8005b98 <_free_r+0x6c>
 8005b80:	6820      	ldr	r0, [r4, #0]
 8005b82:	4401      	add	r1, r0
 8005b84:	1850      	adds	r0, r2, r1
 8005b86:	4283      	cmp	r3, r0
 8005b88:	6011      	str	r1, [r2, #0]
 8005b8a:	d1e0      	bne.n	8005b4e <_free_r+0x22>
 8005b8c:	6818      	ldr	r0, [r3, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	6053      	str	r3, [r2, #4]
 8005b92:	4408      	add	r0, r1
 8005b94:	6010      	str	r0, [r2, #0]
 8005b96:	e7da      	b.n	8005b4e <_free_r+0x22>
 8005b98:	d902      	bls.n	8005ba0 <_free_r+0x74>
 8005b9a:	230c      	movs	r3, #12
 8005b9c:	602b      	str	r3, [r5, #0]
 8005b9e:	e7d6      	b.n	8005b4e <_free_r+0x22>
 8005ba0:	6820      	ldr	r0, [r4, #0]
 8005ba2:	1821      	adds	r1, r4, r0
 8005ba4:	428b      	cmp	r3, r1
 8005ba6:	bf04      	itt	eq
 8005ba8:	6819      	ldreq	r1, [r3, #0]
 8005baa:	685b      	ldreq	r3, [r3, #4]
 8005bac:	6063      	str	r3, [r4, #4]
 8005bae:	bf04      	itt	eq
 8005bb0:	1809      	addeq	r1, r1, r0
 8005bb2:	6021      	streq	r1, [r4, #0]
 8005bb4:	6054      	str	r4, [r2, #4]
 8005bb6:	e7ca      	b.n	8005b4e <_free_r+0x22>
 8005bb8:	bd38      	pop	{r3, r4, r5, pc}
 8005bba:	bf00      	nop
 8005bbc:	20004c18 	.word	0x20004c18

08005bc0 <__malloc_lock>:
 8005bc0:	4801      	ldr	r0, [pc, #4]	@ (8005bc8 <__malloc_lock+0x8>)
 8005bc2:	f7ff bfa3 	b.w	8005b0c <__retarget_lock_acquire_recursive>
 8005bc6:	bf00      	nop
 8005bc8:	20004c14 	.word	0x20004c14

08005bcc <__malloc_unlock>:
 8005bcc:	4801      	ldr	r0, [pc, #4]	@ (8005bd4 <__malloc_unlock+0x8>)
 8005bce:	f7ff bf9e 	b.w	8005b0e <__retarget_lock_release_recursive>
 8005bd2:	bf00      	nop
 8005bd4:	20004c14 	.word	0x20004c14

08005bd8 <_init>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	bf00      	nop
 8005bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bde:	bc08      	pop	{r3}
 8005be0:	469e      	mov	lr, r3
 8005be2:	4770      	bx	lr

08005be4 <_fini>:
 8005be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be6:	bf00      	nop
 8005be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bea:	bc08      	pop	{r3}
 8005bec:	469e      	mov	lr, r3
 8005bee:	4770      	bx	lr
